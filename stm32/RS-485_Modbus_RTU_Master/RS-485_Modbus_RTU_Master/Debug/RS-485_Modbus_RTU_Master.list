
RS-485_Modbus_RTU_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004154  08004154  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004154  08004154  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800415c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000008c  080041e8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080041e8  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f15d  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c88  00000000  00000000  0002f212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00032e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a7a  00000000  00000000  00033c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013868  00000000  00000000  0004d6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c767  00000000  00000000  00060f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df8  00000000  00000000  000ed714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f14 	.word	0x08003f14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003f14 	.word	0x08003f14

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa71 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8e7 	bl	800032c <MX_GPIO_Init>
  MX_TIM3_Init();
 800015e:	f000 f86f 	bl	8000240 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8b9 	bl	80002d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	MT_PORT_SetTimerModule(&htim3);
 8000166:	4811      	ldr	r0, [pc, #68]	; (80001ac <main+0x60>)
 8000168:	f003 fa22 	bl	80035b0 <MT_PORT_SetTimerModule>
	MT_PORT_SetUartModule(&huart1);
 800016c:	4810      	ldr	r0, [pc, #64]	; (80001b0 <main+0x64>)
 800016e:	f003 fa2d 	bl	80035cc <MT_PORT_SetUartModule>
	eMBErrorCode eStatus;
	eStatus = eMBMasterInit(MB_RTU, 0, 19200, MB_PAR_NONE);
 8000172:	2300      	movs	r3, #0
 8000174:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000178:	2100      	movs	r1, #0
 800017a:	2000      	movs	r0, #0
 800017c:	f002 ffdc 	bl	8003138 <eMBMasterInit>
 8000180:	4603      	mov	r3, r0
 8000182:	71fb      	strb	r3, [r7, #7]
	eStatus = eMBMasterEnable();
 8000184:	f003 f842 	bl	800320c <eMBMasterEnable>
 8000188:	4603      	mov	r3, r0
 800018a:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		eMBMasterPoll();
 800018c:	f003 f85a 	bl	8003244 <eMBMasterPoll>
		eMBMasterReqWriteHoldingRegister(0x0A, 0x1234, 0x5678, 1000);
 8000190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000194:	f245 6278 	movw	r2, #22136	; 0x5678
 8000198:	f241 2134 	movw	r1, #4660	; 0x1234
 800019c:	200a      	movs	r0, #10
 800019e:	f002 fd78 	bl	8002c92 <eMBMasterReqWriteHoldingRegister>
		HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 faa9 	bl	80006fc <HAL_Delay>
		eMBMasterPoll();
 80001aa:	e7ef      	b.n	800018c <main+0x40>
 80001ac:	200000a8 	.word	0x200000a8
 80001b0:	200000f0 	.word	0x200000f0

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f003 fe9e 	bl	8003f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fde3 	bl	8000dc8 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f8fc 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 f850 	bl	80012cc <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 f8e7 	bl	8000404 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800025c:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_TIM3_Init+0x90>)
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <MX_TIM3_Init+0x94>)
 8000260:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000262:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <MX_TIM3_Init+0x90>)
 8000264:	2248      	movs	r2, #72	; 0x48
 8000266:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000268:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_TIM3_Init+0x90>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_TIM3_Init+0x90>)
 8000270:	2232      	movs	r2, #50	; 0x32
 8000272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <MX_TIM3_Init+0x90>)
 8000276:	2200      	movs	r2, #0
 8000278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_TIM3_Init+0x90>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000280:	4813      	ldr	r0, [pc, #76]	; (80002d0 <MX_TIM3_Init+0x90>)
 8000282:	f001 f9bb 	bl	80015fc <HAL_TIM_Base_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800028c:	f000 f8ba 	bl	8000404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	4619      	mov	r1, r3
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MX_TIM3_Init+0x90>)
 800029e:	f001 fb85 	bl	80019ac <HAL_TIM_ConfigClockSource>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80002a8:	f000 f8ac 	bl	8000404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ac:	2300      	movs	r3, #0
 80002ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80002b4:	463b      	mov	r3, r7
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_TIM3_Init+0x90>)
 80002ba:	f001 fd57 	bl	8001d6c <HAL_TIMEx_MasterConfigSynchronization>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80002c4:	f000 f89e 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	200000a8 	.word	0x200000a8
 80002d4:	40000400 	.word	0x40000400

080002d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	; (8000328 <MX_USART1_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002e4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80002e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 8000310:	f001 fd9c 	bl	8001e4c <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 f873 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000f0 	.word	0x200000f0
 8000328:	40013800 	.word	0x40013800

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_GPIO_Init+0x40>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <MX_GPIO_Init+0x40>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_GPIO_Init+0x40>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0320 	and.w	r3, r3, #32
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_GPIO_Init+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <MX_GPIO_Init+0x40>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <MX_GPIO_Init+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]

}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <eMBMasterRegInputCB>:

/* USER CODE BEGIN 4 */
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBMasterRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	807b      	strh	r3, [r7, #2]
 800037c:	4613      	mov	r3, r2
 800037e:	803b      	strh	r3, [r7, #0]
  eMBErrorCode eStatus = MB_ENOERR;
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]
  return eStatus;
 8000384:	7bfb      	ldrb	r3, [r7, #15]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <eMBMasterRegHoldingCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	4608      	mov	r0, r1
 800039a:	4611      	mov	r1, r2
 800039c:	461a      	mov	r2, r3
 800039e:	4603      	mov	r3, r0
 80003a0:	817b      	strh	r3, [r7, #10]
 80003a2:	460b      	mov	r3, r1
 80003a4:	813b      	strh	r3, [r7, #8]
 80003a6:	4613      	mov	r3, r2
 80003a8:	71fb      	strb	r3, [r7, #7]
  eMBErrorCode eStatus = MB_ENOERR;
 80003aa:	2300      	movs	r3, #0
 80003ac:	75fb      	strb	r3, [r7, #23]
  return eStatus;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	371c      	adds	r7, #28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <eMBMasterRegCoilsCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b087      	sub	sp, #28
 80003be:	af00      	add	r7, sp, #0
 80003c0:	60f8      	str	r0, [r7, #12]
 80003c2:	4608      	mov	r0, r1
 80003c4:	4611      	mov	r1, r2
 80003c6:	461a      	mov	r2, r3
 80003c8:	4603      	mov	r3, r0
 80003ca:	817b      	strh	r3, [r7, #10]
 80003cc:	460b      	mov	r3, r1
 80003ce:	813b      	strh	r3, [r7, #8]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71fb      	strb	r3, [r7, #7]
  eMBErrorCode eStatus = MB_ENOERR;
 80003d4:	2300      	movs	r3, #0
 80003d6:	75fb      	strb	r3, [r7, #23]
  return eStatus;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	371c      	adds	r7, #28
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <eMBMasterRegDiscreteCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	807b      	strh	r3, [r7, #2]
 80003f0:	4613      	mov	r3, r2
 80003f2:	803b      	strh	r3, [r7, #0]
  eMBErrorCode eStatus = MB_ENOERR;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]
  return eStatus;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	e7fe      	b.n	800040c <Error_Handler+0x8>
	...

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a14      	ldr	r2, [pc, #80]	; (800046c <HAL_MspInit+0x5c>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <HAL_MspInit+0x5c>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_MspInit+0x60>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <HAL_MspInit+0x60>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000

08000474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <HAL_TIM_Base_MspInit+0x44>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d113      	bne.n	80004ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <HAL_TIM_Base_MspInit+0x48>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <HAL_TIM_Base_MspInit+0x48>)
 800048c:	f043 0302 	orr.w	r3, r3, #2
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_TIM_Base_MspInit+0x48>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	201d      	movs	r0, #29
 80004a4:	f000 fa25 	bl	80008f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80004a8:	201d      	movs	r0, #29
 80004aa:	f000 fa3e 	bl	800092a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40000400 	.word	0x40000400
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a20      	ldr	r2, [pc, #128]	; (800055c <HAL_UART_MspInit+0x9c>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d139      	bne.n	8000554 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <HAL_UART_MspInit+0xa0>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a1e      	ldr	r2, [pc, #120]	; (8000560 <HAL_UART_MspInit+0xa0>)
 80004e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <HAL_UART_MspInit+0xa0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <HAL_UART_MspInit+0xa0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a18      	ldr	r2, [pc, #96]	; (8000560 <HAL_UART_MspInit+0xa0>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <HAL_UART_MspInit+0xa0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000516:	2302      	movs	r3, #2
 8000518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051a:	2303      	movs	r3, #3
 800051c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <HAL_UART_MspInit+0xa4>)
 8000526:	f000 facb 	bl	8000ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800052a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <HAL_UART_MspInit+0xa4>)
 8000540:	f000 fabe 	bl	8000ac0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	2025      	movs	r0, #37	; 0x25
 800054a:	f000 f9d2 	bl	80008f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800054e:	2025      	movs	r0, #37	; 0x25
 8000550:	f000 f9eb 	bl	800092a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40013800 	.word	0x40013800
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f889 	bl	80006c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <TIM3_IRQHandler+0x10>)
 80005be:	f001 f8ed 	bl	800179c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000a8 	.word	0x200000a8

080005cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <USART1_IRQHandler+0x10>)
 80005d2:	f001 fdb7 	bl	8002144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000f0 	.word	0x200000f0

080005e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	; (8000630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000612:	f7ff ffe5 	bl	80005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f003 fc43 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fd97 	bl	800014c <main>
  bx lr
 800061e:	4770      	bx	lr
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000628:	0800415c 	.word	0x0800415c
  ldr r2, =_sbss
 800062c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000630:	200003b4 	.word	0x200003b4

08000634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_2_IRQHandler>
	...

08000638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_Init+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_Init+0x28>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 f947 	bl	80008dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064e:	200f      	movs	r0, #15
 8000650:	f000 f808 	bl	8000664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000654:	f7ff fedc 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40022000 	.word	0x40022000

08000664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_InitTick+0x54>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_InitTick+0x58>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	fbb3 f3f1 	udiv	r3, r3, r1
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f95f 	bl	8000946 <HAL_SYSTICK_Config>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e00e      	b.n	80006b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d80a      	bhi.n	80006ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000698:	2200      	movs	r2, #0
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
 80006a0:	f000 f927 	bl	80008f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <HAL_InitTick+0x5c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e000      	b.n	80006b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000004 	.word	0x20000004

080006c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_IncTick+0x1c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x20>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <HAL_IncTick+0x20>)
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000134 	.word	0x20000134

080006e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return uwTick;
 80006ec:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <HAL_GetTick+0x10>)
 80006ee:	681b      	ldr	r3, [r3, #0]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000134 	.word	0x20000134

080006fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000704:	f7ff fff0 	bl	80006e8 <HAL_GetTick>
 8000708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000714:	d005      	beq.n	8000722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_Delay+0x44>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4413      	add	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000722:	bf00      	nop
 8000724:	f7ff ffe0 	bl	80006e8 <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	429a      	cmp	r2, r3
 8000732:	d8f7      	bhi.n	8000724 <HAL_Delay+0x28>
  {
  }
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000008 	.word	0x20000008

08000744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800076c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	60d3      	str	r3, [r2, #12]
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	f003 0307 	and.w	r3, r3, #7
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	db0b      	blt.n	80007d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 021f 	and.w	r2, r3, #31
 80007c0:	4906      	ldr	r1, [pc, #24]	; (80007dc <__NVIC_EnableIRQ+0x34>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	2001      	movs	r0, #1
 80007ca:	fa00 f202 	lsl.w	r2, r0, r2
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0a      	blt.n	800080a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <__NVIC_SetPriority+0x4c>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000808:	e00a      	b.n	8000820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4908      	ldr	r1, [pc, #32]	; (8000830 <__NVIC_SetPriority+0x50>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	3b04      	subs	r3, #4
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	440b      	add	r3, r1
 800081e:	761a      	strb	r2, [r3, #24]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f1c3 0307 	rsb	r3, r3, #7
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf28      	it	cs
 8000852:	2304      	movcs	r3, #4
 8000854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3304      	adds	r3, #4
 800085a:	2b06      	cmp	r3, #6
 800085c:	d902      	bls.n	8000864 <NVIC_EncodePriority+0x30>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b03      	subs	r3, #3
 8000862:	e000      	b.n	8000866 <NVIC_EncodePriority+0x32>
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43d9      	mvns	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	4313      	orrs	r3, r2
         );
}
 800088e:	4618      	mov	r0, r3
 8000890:	3724      	adds	r7, #36	; 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a8:	d301      	bcc.n	80008ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00f      	b.n	80008ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <SysTick_Config+0x40>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b6:	210f      	movs	r1, #15
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f7ff ff90 	bl	80007e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SysTick_Config+0x40>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <SysTick_Config+0x40>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff2d 	bl	8000744 <__NVIC_SetPriorityGrouping>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000904:	f7ff ff42 	bl	800078c <__NVIC_GetPriorityGrouping>
 8000908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	6978      	ldr	r0, [r7, #20]
 8000910:	f7ff ff90 	bl	8000834 <NVIC_EncodePriority>
 8000914:	4602      	mov	r2, r0
 8000916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff5f 	bl	80007e0 <__NVIC_SetPriority>
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff35 	bl	80007a8 <__NVIC_EnableIRQ>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffa2 	bl	8000898 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000970:	2b02      	cmp	r3, #2
 8000972:	d008      	beq.n	8000986 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2204      	movs	r2, #4
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e020      	b.n	80009c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 020e 	bic.w	r2, r2, #14
 8000994:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f022 0201 	bic.w	r2, r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ae:	2101      	movs	r1, #1
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2201      	movs	r2, #1
 80009ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d005      	beq.n	80009f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2204      	movs	r2, #4
 80009ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e051      	b.n	8000a9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 020e 	bic.w	r2, r2, #14
 8000a04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 0201 	bic.w	r2, r2, #1
 8000a14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <HAL_DMA_Abort_IT+0xd0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d029      	beq.n	8000a74 <HAL_DMA_Abort_IT+0xa0>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <HAL_DMA_Abort_IT+0xd4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d022      	beq.n	8000a70 <HAL_DMA_Abort_IT+0x9c>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <HAL_DMA_Abort_IT+0xd8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d01a      	beq.n	8000a6a <HAL_DMA_Abort_IT+0x96>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <HAL_DMA_Abort_IT+0xdc>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d012      	beq.n	8000a64 <HAL_DMA_Abort_IT+0x90>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <HAL_DMA_Abort_IT+0xe0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00a      	beq.n	8000a5e <HAL_DMA_Abort_IT+0x8a>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <HAL_DMA_Abort_IT+0xe4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d102      	bne.n	8000a58 <HAL_DMA_Abort_IT+0x84>
 8000a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a56:	e00e      	b.n	8000a76 <HAL_DMA_Abort_IT+0xa2>
 8000a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a5c:	e00b      	b.n	8000a76 <HAL_DMA_Abort_IT+0xa2>
 8000a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a62:	e008      	b.n	8000a76 <HAL_DMA_Abort_IT+0xa2>
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	e005      	b.n	8000a76 <HAL_DMA_Abort_IT+0xa2>
 8000a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6e:	e002      	b.n	8000a76 <HAL_DMA_Abort_IT+0xa2>
 8000a70:	2310      	movs	r3, #16
 8000a72:	e000      	b.n	8000a76 <HAL_DMA_Abort_IT+0xa2>
 8000a74:	2301      	movs	r3, #1
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_DMA_Abort_IT+0xe8>)
 8000a78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	4798      	blx	r3
    } 
  }
  return status;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40020008 	.word	0x40020008
 8000aa8:	4002001c 	.word	0x4002001c
 8000aac:	40020030 	.word	0x40020030
 8000ab0:	40020044 	.word	0x40020044
 8000ab4:	40020058 	.word	0x40020058
 8000ab8:	4002006c 	.word	0x4002006c
 8000abc:	40020000 	.word	0x40020000

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b08b      	sub	sp, #44	; 0x2c
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e169      	b.n	8000da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	f040 8158 	bne.w	8000da2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	4a9a      	ldr	r2, [pc, #616]	; (8000d60 <HAL_GPIO_Init+0x2a0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d05e      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000afc:	4a98      	ldr	r2, [pc, #608]	; (8000d60 <HAL_GPIO_Init+0x2a0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d875      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b02:	4a98      	ldr	r2, [pc, #608]	; (8000d64 <HAL_GPIO_Init+0x2a4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d058      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b08:	4a96      	ldr	r2, [pc, #600]	; (8000d64 <HAL_GPIO_Init+0x2a4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d86f      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b0e:	4a96      	ldr	r2, [pc, #600]	; (8000d68 <HAL_GPIO_Init+0x2a8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d052      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b14:	4a94      	ldr	r2, [pc, #592]	; (8000d68 <HAL_GPIO_Init+0x2a8>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d869      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b1a:	4a94      	ldr	r2, [pc, #592]	; (8000d6c <HAL_GPIO_Init+0x2ac>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d04c      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b20:	4a92      	ldr	r2, [pc, #584]	; (8000d6c <HAL_GPIO_Init+0x2ac>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d863      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b26:	4a92      	ldr	r2, [pc, #584]	; (8000d70 <HAL_GPIO_Init+0x2b0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d046      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b2c:	4a90      	ldr	r2, [pc, #576]	; (8000d70 <HAL_GPIO_Init+0x2b0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d85d      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b32:	2b12      	cmp	r3, #18
 8000b34:	d82a      	bhi.n	8000b8c <HAL_GPIO_Init+0xcc>
 8000b36:	2b12      	cmp	r3, #18
 8000b38:	d859      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <HAL_GPIO_Init+0x80>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000bbb 	.word	0x08000bbb
 8000b44:	08000b95 	.word	0x08000b95
 8000b48:	08000ba7 	.word	0x08000ba7
 8000b4c:	08000be9 	.word	0x08000be9
 8000b50:	08000bef 	.word	0x08000bef
 8000b54:	08000bef 	.word	0x08000bef
 8000b58:	08000bef 	.word	0x08000bef
 8000b5c:	08000bef 	.word	0x08000bef
 8000b60:	08000bef 	.word	0x08000bef
 8000b64:	08000bef 	.word	0x08000bef
 8000b68:	08000bef 	.word	0x08000bef
 8000b6c:	08000bef 	.word	0x08000bef
 8000b70:	08000bef 	.word	0x08000bef
 8000b74:	08000bef 	.word	0x08000bef
 8000b78:	08000bef 	.word	0x08000bef
 8000b7c:	08000bef 	.word	0x08000bef
 8000b80:	08000bef 	.word	0x08000bef
 8000b84:	08000b9d 	.word	0x08000b9d
 8000b88:	08000bb1 	.word	0x08000bb1
 8000b8c:	4a79      	ldr	r2, [pc, #484]	; (8000d74 <HAL_GPIO_Init+0x2b4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b92:	e02c      	b.n	8000bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e029      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e024      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	3308      	adds	r3, #8
 8000bac:	623b      	str	r3, [r7, #32]
          break;
 8000bae:	e01f      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	330c      	adds	r3, #12
 8000bb6:	623b      	str	r3, [r7, #32]
          break;
 8000bb8:	e01a      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e013      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d105      	bne.n	8000bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	611a      	str	r2, [r3, #16]
          break;
 8000bda:	e009      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	615a      	str	r2, [r3, #20]
          break;
 8000be6:	e003      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	e000      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          break;
 8000bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	2bff      	cmp	r3, #255	; 0xff
 8000bf4:	d801      	bhi.n	8000bfa <HAL_GPIO_Init+0x13a>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	e001      	b.n	8000bfe <HAL_GPIO_Init+0x13e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	2bff      	cmp	r3, #255	; 0xff
 8000c04:	d802      	bhi.n	8000c0c <HAL_GPIO_Init+0x14c>
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	e002      	b.n	8000c12 <HAL_GPIO_Init+0x152>
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	3b08      	subs	r3, #8
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	210f      	movs	r1, #15
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	6a39      	ldr	r1, [r7, #32]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80b1 	beq.w	8000da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c40:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <HAL_GPIO_Init+0x2b8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a4c      	ldr	r2, [pc, #304]	; (8000d78 <HAL_GPIO_Init+0x2b8>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <HAL_GPIO_Init+0x2b8>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c58:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <HAL_GPIO_Init+0x2bc>)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d013      	beq.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a3f      	ldr	r2, [pc, #252]	; (8000d84 <HAL_GPIO_Init+0x2c4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00d      	beq.n	8000ca8 <HAL_GPIO_Init+0x1e8>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3e      	ldr	r2, [pc, #248]	; (8000d88 <HAL_GPIO_Init+0x2c8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d007      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e4>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a3d      	ldr	r2, [pc, #244]	; (8000d8c <HAL_GPIO_Init+0x2cc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d101      	bne.n	8000ca0 <HAL_GPIO_Init+0x1e0>
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	e004      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000cac:	2300      	movs	r3, #0
 8000cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	4093      	lsls	r3, r2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cbe:	492f      	ldr	r1, [pc, #188]	; (8000d7c <HAL_GPIO_Init+0x2bc>)
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	492c      	ldr	r1, [pc, #176]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4928      	ldr	r1, [pc, #160]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	4922      	ldr	r1, [pc, #136]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	491e      	ldr	r1, [pc, #120]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	4918      	ldr	r1, [pc, #96]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4914      	ldr	r1, [pc, #80]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d021      	beq.n	8000d94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	490e      	ldr	r1, [pc, #56]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60cb      	str	r3, [r1, #12]
 8000d5c:	e021      	b.n	8000da2 <HAL_GPIO_Init+0x2e2>
 8000d5e:	bf00      	nop
 8000d60:	10320000 	.word	0x10320000
 8000d64:	10310000 	.word	0x10310000
 8000d68:	10220000 	.word	0x10220000
 8000d6c:	10210000 	.word	0x10210000
 8000d70:	10120000 	.word	0x10120000
 8000d74:	10110000 	.word	0x10110000
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	40010800 	.word	0x40010800
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	40011400 	.word	0x40011400
 8000d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	4909      	ldr	r1, [pc, #36]	; (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	3301      	adds	r3, #1
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	fa22 f303 	lsr.w	r3, r2, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f47f ae8e 	bne.w	8000ad4 <HAL_GPIO_Init+0x14>
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	372c      	adds	r7, #44	; 0x2c
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e272      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8087 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de8:	4b92      	ldr	r3, [pc, #584]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d00c      	beq.n	8000e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df4:	4b8f      	ldr	r3, [pc, #572]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d112      	bne.n	8000e26 <HAL_RCC_OscConfig+0x5e>
 8000e00:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0c:	d10b      	bne.n	8000e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0e:	4b89      	ldr	r3, [pc, #548]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d06c      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x12c>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d168      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e24c      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x76>
 8000e30:	4b80      	ldr	r3, [pc, #512]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a7f      	ldr	r2, [pc, #508]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e02e      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x98>
 8000e46:	4b7b      	ldr	r3, [pc, #492]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a7a      	ldr	r2, [pc, #488]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	4b78      	ldr	r3, [pc, #480]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a77      	ldr	r2, [pc, #476]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e01d      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e68:	d10c      	bne.n	8000e84 <HAL_RCC_OscConfig+0xbc>
 8000e6a:	4b72      	ldr	r3, [pc, #456]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a71      	ldr	r2, [pc, #452]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4b6f      	ldr	r3, [pc, #444]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a6e      	ldr	r2, [pc, #440]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e00b      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e84:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a6a      	ldr	r2, [pc, #424]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b68      	ldr	r3, [pc, #416]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a67      	ldr	r2, [pc, #412]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d013      	beq.n	8000ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fc20 	bl	80006e8 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fc1c 	bl	80006e8 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	; 0x64
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e200      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f0      	beq.n	8000eac <HAL_RCC_OscConfig+0xe4>
 8000eca:	e014      	b.n	8000ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fc0c 	bl	80006e8 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fc08 	bl	80006e8 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e1ec      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	4b53      	ldr	r3, [pc, #332]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x10c>
 8000ef2:	e000      	b.n	8000ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d063      	beq.n	8000fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f02:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00b      	beq.n	8000f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f0e:	4b49      	ldr	r3, [pc, #292]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d11c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x18c>
 8000f1a:	4b46      	ldr	r3, [pc, #280]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d116      	bne.n	8000f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <HAL_RCC_OscConfig+0x176>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d001      	beq.n	8000f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e1c0      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4939      	ldr	r1, [pc, #228]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f52:	e03a      	b.n	8000fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fbc1 	bl	80006e8 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fbbd 	bl	80006e8 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e1a1      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4927      	ldr	r1, [pc, #156]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	600b      	str	r3, [r1, #0]
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fba0 	bl	80006e8 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fac:	f7ff fb9c 	bl	80006e8 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e180      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d03a      	beq.n	800104c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d019      	beq.n	8001012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_RCC_OscConfig+0x274>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fb80 	bl	80006e8 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fb7c 	bl	80006e8 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e160      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f000 fad8 	bl	80015c0 <RCC_Delay>
 8001010:	e01c      	b.n	800104c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_RCC_OscConfig+0x274>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001018:	f7ff fb66 	bl	80006e8 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101e:	e00f      	b.n	8001040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001020:	f7ff fb62 	bl	80006e8 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d908      	bls.n	8001040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e146      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	42420000 	.word	0x42420000
 800103c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	4b92      	ldr	r3, [pc, #584]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e9      	bne.n	8001020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a6 	beq.w	80011a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105e:	4b8b      	ldr	r3, [pc, #556]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10d      	bne.n	8001086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b88      	ldr	r3, [pc, #544]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a87      	ldr	r2, [pc, #540]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b85      	ldr	r3, [pc, #532]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001082:	2301      	movs	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001086:	4b82      	ldr	r3, [pc, #520]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	2b00      	cmp	r3, #0
 8001090:	d118      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001092:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7e      	ldr	r2, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800109e:	f7ff fb23 	bl	80006e8 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a6:	f7ff fb1f 	bl	80006e8 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e103      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b8:	4b75      	ldr	r3, [pc, #468]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x312>
 80010cc:	4b6f      	ldr	r3, [pc, #444]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a6e      	ldr	r2, [pc, #440]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	e02d      	b.n	8001136 <HAL_RCC_OscConfig+0x36e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x334>
 80010e2:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a69      	ldr	r2, [pc, #420]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a66      	ldr	r2, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	e01c      	b.n	8001136 <HAL_RCC_OscConfig+0x36e>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b05      	cmp	r3, #5
 8001102:	d10c      	bne.n	800111e <HAL_RCC_OscConfig+0x356>
 8001104:	4b61      	ldr	r3, [pc, #388]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a60      	ldr	r2, [pc, #384]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a5d      	ldr	r2, [pc, #372]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	e00b      	b.n	8001136 <HAL_RCC_OscConfig+0x36e>
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a5a      	ldr	r2, [pc, #360]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	4b58      	ldr	r3, [pc, #352]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d015      	beq.n	800116a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fad3 	bl	80006e8 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff facf 	bl	80006e8 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e0b1      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ee      	beq.n	8001146 <HAL_RCC_OscConfig+0x37e>
 8001168:	e014      	b.n	8001194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff fabd 	bl	80006e8 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001170:	e00a      	b.n	8001188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001172:	f7ff fab9 	bl	80006e8 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001180:	4293      	cmp	r3, r2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e09b      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ee      	bne.n	8001172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d105      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a3b      	ldr	r2, [pc, #236]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8087 	beq.w	80012be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d061      	beq.n	8001280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d146      	bne.n	8001252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_RCC_OscConfig+0x4cc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff fa8d 	bl	80006e8 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fa89 	bl	80006e8 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e06d      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d108      	bne.n	800120c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4921      	ldr	r1, [pc, #132]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a19      	ldr	r1, [r3, #32]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	430b      	orrs	r3, r1
 800121e:	491b      	ldr	r1, [pc, #108]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_OscConfig+0x4cc>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fa5d 	bl	80006e8 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff fa59 	bl	80006e8 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e03d      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x46a>
 8001250:	e035      	b.n	80012be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_RCC_OscConfig+0x4cc>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fa46 	bl	80006e8 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff fa42 	bl	80006e8 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e026      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x498>
 800127e:	e01e      	b.n	80012be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d107      	bne.n	8001298 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e019      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x500>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0d0      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d910      	bls.n	8001310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 0207 	bic.w	r2, r3, #7
 80012f6:	4965      	ldr	r1, [pc, #404]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0b8      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001328:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800134a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	494d      	ldr	r1, [pc, #308]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d040      	beq.n	80013ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d115      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e07f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e073      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e06b      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f023 0203 	bic.w	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4936      	ldr	r1, [pc, #216]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013bc:	f7ff f994 	bl	80006e8 <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c2:	e00a      	b.n	80013da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c4:	f7ff f990 	bl	80006e8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e053      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 020c 	and.w	r2, r3, #12
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1eb      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d210      	bcs.n	800141c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 0207 	bic.w	r2, r3, #7
 8001402:	4922      	ldr	r1, [pc, #136]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e032      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4916      	ldr	r1, [pc, #88]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800145a:	f000 f821 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 800145e:	4602      	mov	r2, r0
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	490a      	ldr	r1, [pc, #40]	; (8001494 <HAL_RCC_ClockConfig+0x1c8>)
 800146c:	5ccb      	ldrb	r3, [r1, r3]
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_RCC_ClockConfig+0x1cc>)
 8001474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_ClockConfig+0x1d0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f8f2 	bl	8000664 <HAL_InitTick>

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40022000 	.word	0x40022000
 8001490:	40021000 	.word	0x40021000
 8001494:	08003f3c 	.word	0x08003f3c
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	b490      	push	{r4, r7}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_RCC_GetSysClockFreq+0xac>)
 80014a8:	1d3c      	adds	r4, r7, #4
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014b0:	f240 2301 	movw	r3, #513	; 0x201
 80014b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d002      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x40>
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x46>
 80014de:	e02b      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014e2:	623b      	str	r3, [r7, #32]
      break;
 80014e4:	e02b      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	0c9b      	lsrs	r3, r3, #18
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3328      	adds	r3, #40	; 0x28
 80014f0:	443b      	add	r3, r7
 80014f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d012      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0c5b      	lsrs	r3, r3, #17
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	3328      	adds	r3, #40	; 0x28
 800150e:	443b      	add	r3, r7
 8001510:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001514:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb4>)
 800151a:	fb03 f202 	mul.w	r2, r3, r2
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	fbb2 f3f3 	udiv	r3, r2, r3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	e004      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	623b      	str	r3, [r7, #32]
      break;
 8001536:	e002      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb4>)
 800153a:	623b      	str	r3, [r7, #32]
      break;
 800153c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800153e:	6a3b      	ldr	r3, [r7, #32]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bc90      	pop	{r4, r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	08003f2c 	.word	0x08003f2c
 8001550:	40021000 	.word	0x40021000
 8001554:	007a1200 	.word	0x007a1200
 8001558:	003d0900 	.word	0x003d0900

0800155c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_RCC_GetHCLKFreq+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001574:	f7ff fff2 	bl	800155c <HAL_RCC_GetHCLKFreq>
 8001578:	4602      	mov	r2, r0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	08003f4c 	.word	0x08003f4c

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800159c:	f7ff ffde 	bl	800155c <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0adb      	lsrs	r3, r3, #11
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	4903      	ldr	r1, [pc, #12]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08003f4c 	.word	0x08003f4c

080015c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <RCC_Delay+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <RCC_Delay+0x38>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015dc:	bf00      	nop
  }
  while (Delay --);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <RCC_Delay+0x1c>
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e041      	b.n	8001692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ff26 	bl	8000474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3304      	adds	r3, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f000 fa9e 	bl	8001b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d001      	beq.n	80016b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e03a      	b.n	800172a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_TIM_Base_Start_IT+0x98>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00e      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x58>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016de:	d009      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x58>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_TIM_Base_Start_IT+0x9c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x58>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_TIM_Base_Start_IT+0xa0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b06      	cmp	r3, #6
 8001704:	d010      	beq.n	8001728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001716:	e007      	b.n	8001728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40000400 	.word	0x40000400
 800173c:	40000800 	.word	0x40000800

08001740 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6a1a      	ldr	r2, [r3, #32]
 800175e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10f      	bne.n	8001788 <HAL_TIM_Base_Stop_IT+0x48>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	f240 4344 	movw	r3, #1092	; 0x444
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_TIM_Base_Stop_IT+0x48>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d122      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d11b      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0202 	mvn.w	r2, #2
 80017c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f9b1 	bl	8001b46 <HAL_TIM_IC_CaptureCallback>
 80017e4:	e005      	b.n	80017f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f9a4 	bl	8001b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f9b3 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b04      	cmp	r3, #4
 8001804:	d122      	bne.n	800184c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b04      	cmp	r3, #4
 8001812:	d11b      	bne.n	800184c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0204 	mvn.w	r2, #4
 800181c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2202      	movs	r2, #2
 8001822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f987 	bl	8001b46 <HAL_TIM_IC_CaptureCallback>
 8001838:	e005      	b.n	8001846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f97a 	bl	8001b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f989 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b08      	cmp	r3, #8
 8001858:	d122      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b08      	cmp	r3, #8
 8001866:	d11b      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0208 	mvn.w	r2, #8
 8001870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f95d 	bl	8001b46 <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f950 	bl	8001b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f95f 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d122      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d11b      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0210 	mvn.w	r2, #16
 80018c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2208      	movs	r2, #8
 80018ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f933 	bl	8001b46 <HAL_TIM_IC_CaptureCallback>
 80018e0:	e005      	b.n	80018ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f926 	bl	8001b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f935 	bl	8001b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10e      	bne.n	8001920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0201 	mvn.w	r2, #1
 8001918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f002 f812 	bl	8003944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192a:	2b80      	cmp	r3, #128	; 0x80
 800192c:	d10e      	bne.n	800194c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001938:	2b80      	cmp	r3, #128	; 0x80
 800193a:	d107      	bne.n	800194c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fa77 	bl	8001e3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001956:	2b40      	cmp	r3, #64	; 0x40
 8001958:	d10e      	bne.n	8001978 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001964:	2b40      	cmp	r3, #64	; 0x40
 8001966:	d107      	bne.n	8001978 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8f9 	bl	8001b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	2b20      	cmp	r3, #32
 8001984:	d10e      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b20      	cmp	r3, #32
 8001992:	d107      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0220 	mvn.w	r2, #32
 800199c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fa42 	bl	8001e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_TIM_ConfigClockSource+0x18>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e0b3      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x180>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fc:	d03e      	beq.n	8001a7c <HAL_TIM_ConfigClockSource+0xd0>
 80019fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a02:	f200 8087 	bhi.w	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a0a:	f000 8085 	beq.w	8001b18 <HAL_TIM_ConfigClockSource+0x16c>
 8001a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a12:	d87f      	bhi.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a14:	2b70      	cmp	r3, #112	; 0x70
 8001a16:	d01a      	beq.n	8001a4e <HAL_TIM_ConfigClockSource+0xa2>
 8001a18:	2b70      	cmp	r3, #112	; 0x70
 8001a1a:	d87b      	bhi.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a1c:	2b60      	cmp	r3, #96	; 0x60
 8001a1e:	d050      	beq.n	8001ac2 <HAL_TIM_ConfigClockSource+0x116>
 8001a20:	2b60      	cmp	r3, #96	; 0x60
 8001a22:	d877      	bhi.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a24:	2b50      	cmp	r3, #80	; 0x50
 8001a26:	d03c      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0xf6>
 8001a28:	2b50      	cmp	r3, #80	; 0x50
 8001a2a:	d873      	bhi.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a2c:	2b40      	cmp	r3, #64	; 0x40
 8001a2e:	d058      	beq.n	8001ae2 <HAL_TIM_ConfigClockSource+0x136>
 8001a30:	2b40      	cmp	r3, #64	; 0x40
 8001a32:	d86f      	bhi.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a34:	2b30      	cmp	r3, #48	; 0x30
 8001a36:	d064      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0x156>
 8001a38:	2b30      	cmp	r3, #48	; 0x30
 8001a3a:	d86b      	bhi.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d060      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0x156>
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d867      	bhi.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d05c      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0x156>
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d05a      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001a4c:	e062      	b.n	8001b14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6899      	ldr	r1, [r3, #8]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f000 f966 	bl	8001d2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	609a      	str	r2, [r3, #8]
      break;
 8001a7a:	e04e      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f000 f94f 	bl	8001d2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a9e:	609a      	str	r2, [r3, #8]
      break;
 8001aa0:	e03b      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f000 f8c6 	bl	8001c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2150      	movs	r1, #80	; 0x50
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f91d 	bl	8001cfa <TIM_ITRx_SetConfig>
      break;
 8001ac0:	e02b      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f000 f8e4 	bl	8001c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2160      	movs	r1, #96	; 0x60
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f90d 	bl	8001cfa <TIM_ITRx_SetConfig>
      break;
 8001ae0:	e01b      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f000 f8a6 	bl	8001c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2140      	movs	r1, #64	; 0x40
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f8fd 	bl	8001cfa <TIM_ITRx_SetConfig>
      break;
 8001b00:	e00b      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f000 f8f4 	bl	8001cfa <TIM_ITRx_SetConfig>
        break;
 8001b12:	e002      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b14:	bf00      	nop
 8001b16:	e000      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <TIM_Base_SetConfig+0xb8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00b      	beq.n	8001bac <TIM_Base_SetConfig+0x30>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d007      	beq.n	8001bac <TIM_Base_SetConfig+0x30>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <TIM_Base_SetConfig+0xbc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d003      	beq.n	8001bac <TIM_Base_SetConfig+0x30>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <TIM_Base_SetConfig+0xc0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d108      	bne.n	8001bbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <TIM_Base_SetConfig+0xb8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00b      	beq.n	8001bde <TIM_Base_SetConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bcc:	d007      	beq.n	8001bde <TIM_Base_SetConfig+0x62>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <TIM_Base_SetConfig+0xbc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d003      	beq.n	8001bde <TIM_Base_SetConfig+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <TIM_Base_SetConfig+0xc0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d108      	bne.n	8001bf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <TIM_Base_SetConfig+0xb8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d103      	bne.n	8001c24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	615a      	str	r2, [r3, #20]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800

08001c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f023 0201 	bic.w	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f023 030a 	bic.w	r3, r3, #10
 8001c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	621a      	str	r2, [r3, #32]
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f023 0210 	bic.w	r2, r3, #16
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	031b      	lsls	r3, r3, #12
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	621a      	str	r2, [r3, #32]
}
 8001cf0:	bf00      	nop
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f043 0307 	orr.w	r3, r3, #7
 8001d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	609a      	str	r2, [r3, #8]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b087      	sub	sp, #28
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	021a      	lsls	r2, r3, #8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	609a      	str	r2, [r3, #8]
}
 8001d62:	bf00      	nop
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e046      	b.n	8001e12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d009      	beq.n	8001de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d10c      	bne.n	8001e00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000800 	.word	0x40000800

08001e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e03f      	b.n	8001ede <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fb24 	bl	80004c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fcdd 	bl	8002850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d130      	bne.n	8001f62 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_UART_Transmit_IT+0x26>
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e029      	b.n	8001f64 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_UART_Transmit_IT+0x38>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e022      	b.n	8001f64 <HAL_UART_Transmit_IT+0x7e>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2221      	movs	r2, #33	; 0x21
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
  }
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d11d      	bne.n	8001fc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_UART_Receive_IT+0x26>
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e016      	b.n	8001fc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Receive_IT+0x38>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e00f      	b.n	8001fc6 <HAL_UART_Receive_IT+0x58>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa92 	bl	80024e4 <UART_Start_Receive_IT>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	e000      	b.n	8001fc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d02a      	beq.n	800204c <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002004:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	2b00      	cmp	r3, #0
 800200c:	d013      	beq.n	8002036 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_UART_AbortTransmit_IT+0x9c>)
 8002014:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fcda 	bl	80009d4 <HAL_DMA_Abort_IT>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01c      	beq.n	8002060 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002030:	4610      	mov	r0, r2
 8002032:	4798      	blx	r3
 8002034:	e014      	b.n	8002060 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fa30 	bl	80024aa <HAL_UART_AbortTransmitCpltCallback>
 800204a:	e009      	b.n	8002060 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fa25 	bl	80024aa <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	080025d7 	.word	0x080025d7

08002070 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002086:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0210 	bic.w	r2, r2, #16
 80020ae:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d02d      	beq.n	800211a <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020cc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d013      	beq.n	80020fe <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_UART_AbortReceive_IT+0xd0>)
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fc76 	bl	80009d4 <HAL_DMA_Abort_IT>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d022      	beq.n	8002134 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f8:	4610      	mov	r0, r2
 80020fa:	4798      	blx	r3
 80020fc:	e01a      	b.n	8002134 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9d2 	bl	80024bc <HAL_UART_AbortReceiveCpltCallback>
 8002118:	e00c      	b.n	8002134 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f9c4 	bl	80024bc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	08002601 	.word	0x08002601

08002144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_UART_IRQHandler+0x52>
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fab5 	bl	80026fe <UART_Receive_IT>
      return;
 8002194:	e17b      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80b1 	beq.w	8002300 <HAL_UART_IRQHandler+0x1bc>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_UART_IRQHandler+0x70>
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80a6 	beq.w	8002300 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_UART_IRQHandler+0x90>
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_UART_IRQHandler+0xb0>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_UART_IRQHandler+0xd0>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00f      	beq.n	800223e <HAL_UART_IRQHandler+0xfa>
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_UART_IRQHandler+0xee>
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0208 	orr.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 811e 	beq.w	8002484 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_UART_IRQHandler+0x11e>
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fa4e 	bl	80026fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <HAL_UART_IRQHandler+0x146>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d031      	beq.n	80022ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f963 	bl	8002556 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d023      	beq.n	80022e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d013      	beq.n	80022de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_UART_IRQHandler+0x350>)
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fb86 	bl	80009d4 <HAL_DMA_Abort_IT>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d8:	4610      	mov	r0, r2
 80022da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022dc:	e00e      	b.n	80022fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8da 	bl	8002498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e4:	e00a      	b.n	80022fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8d6 	bl	8002498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	e006      	b.n	80022fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f8d2 	bl	8002498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80022fa:	e0c3      	b.n	8002484 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	bf00      	nop
    return;
 80022fe:	e0c1      	b.n	8002484 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 80a1 	bne.w	800244c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 809b 	beq.w	800244c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8095 	beq.w	800244c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d04e      	beq.n	80023e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002350:	8a3b      	ldrh	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8098 	beq.w	8002488 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800235c:	8a3a      	ldrh	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	f080 8092 	bcs.w	8002488 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8a3a      	ldrh	r2, [r7, #16]
 8002368:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b20      	cmp	r3, #32
 8002372:	d02b      	beq.n	80023cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002382:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0210 	bic.w	r2, r2, #16
 80023c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fac9 	bl	800095e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f876 	bl	80024ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023e2:	e051      	b.n	8002488 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d047      	beq.n	800248c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80023fc:	8a7b      	ldrh	r3, [r7, #18]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d044      	beq.n	800248c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002410:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0210 	bic.w	r2, r2, #16
 800243e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002440:	8a7b      	ldrh	r3, [r7, #18]
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f842 	bl	80024ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800244a:	e01f      	b.n	800248c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_UART_IRQHandler+0x324>
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8e5 	bl	8002630 <UART_Transmit_IT>
    return;
 8002466:	e012      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <HAL_UART_IRQHandler+0x34a>
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f926 	bl	80026ce <UART_EndTransmit_IT>
    return;
 8002482:	e004      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
    return;
 8002484:	bf00      	nop
 8002486:	e002      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
      return;
 8002488:	bf00      	nop
 800248a:	e000      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
      return;
 800248c:	bf00      	nop
  }
}
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	080025af 	.word	0x080025af

08002498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2222      	movs	r2, #34	; 0x22
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002528:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0220 	orr.w	r2, r2, #32
 8002548:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800256c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0210 	bic.w	r2, r2, #16
 8002594:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff ff65 	bl	8002498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff ff59 	bl	80024aa <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7ff ff4a 	bl	80024bc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b21      	cmp	r3, #33	; 0x21
 8002642:	d13e      	bne.n	80026c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264c:	d114      	bne.n	8002678 <UART_Transmit_IT+0x48>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d110      	bne.n	8002678 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800266a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	1c9a      	adds	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	621a      	str	r2, [r3, #32]
 8002676:	e008      	b.n	800268a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	1c59      	adds	r1, r3, #1
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6211      	str	r1, [r2, #32]
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29b      	uxth	r3, r3
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4619      	mov	r1, r3
 8002698:	84d1      	strh	r1, [r2, #38]	; 0x26
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f001 f8b8 	bl	8003864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b22      	cmp	r3, #34	; 0x22
 8002710:	f040 8099 	bne.w	8002846 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271c:	d117      	bne.n	800274e <UART_Receive_IT+0x50>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d113      	bne.n	800274e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273c:	b29a      	uxth	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
 800274c:	e026      	b.n	800279c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d007      	beq.n	8002772 <UART_Receive_IT+0x74>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <UART_Receive_IT+0x82>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e008      	b.n	8002792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800278c:	b2da      	uxtb	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4619      	mov	r1, r3
 80027aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d148      	bne.n	8002842 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0220 	bic.w	r2, r2, #32
 80027be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d123      	bne.n	8002838 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0210 	bic.w	r2, r2, #16
 8002804:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b10      	cmp	r3, #16
 8002812:	d10a      	bne.n	800282a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fe4c 	bl	80024ce <HAL_UARTEx_RxEventCallback>
 8002836:	e002      	b.n	800283e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 f827 	bl	800388c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e002      	b.n	8002848 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800288a:	f023 030c 	bic.w	r3, r3, #12
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	430b      	orrs	r3, r1
 8002896:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <UART_SetConfig+0x114>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d103      	bne.n	80028c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028b8:	f7fe fe6e 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	e002      	b.n	80028c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028c0:	f7fe fe56 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
 80028c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	009a      	lsls	r2, r3, #2
 80028d0:	441a      	add	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <UART_SetConfig+0x118>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	0119      	lsls	r1, r3, #4
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009a      	lsls	r2, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <UART_SetConfig+0x118>)
 80028fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2064      	movs	r0, #100	; 0x64
 8002906:	fb00 f303 	mul.w	r3, r0, r3
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	3332      	adds	r3, #50	; 0x32
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <UART_SetConfig+0x118>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291c:	4419      	add	r1, r3
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fbb2 f2f3 	udiv	r2, r2, r3
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <UART_SetConfig+0x118>)
 8002936:	fba3 0302 	umull	r0, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	3332      	adds	r3, #50	; 0x32
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <UART_SetConfig+0x118>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	440a      	add	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40013800 	.word	0x40013800
 8002968:	51eb851f 	.word	0x51eb851f

0800296c <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800297a:	f001 fa85 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <eMBMasterFuncReadCoils+0x1e>
    {
        eStatus = MB_EX_NONE;
 8002984:	2300      	movs	r3, #0
 8002986:	75bb      	strb	r3, [r7, #22]
 8002988:	e056      	b.n	8002a38 <eMBMasterFuncReadCoils+0xcc>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d950      	bls.n	8002a34 <eMBMasterFuncReadCoils+0xc8>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fa3c 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3301      	adds	r3, #1
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3302      	adds	r3, #2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	8abb      	ldrh	r3, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80029b6:	8abb      	ldrh	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3303      	adds	r3, #3
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3304      	adds	r3, #4
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	8a7b      	ldrh	r3, [r7, #18]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 80029d6:	8a7b      	ldrh	r3, [r7, #18]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <eMBMasterFuncReadCoils+0x82>
        {
            ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 80029e0:	8a7b      	ldrh	r3, [r7, #18]
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
 80029ec:	e003      	b.n	80029f6 <eMBMasterFuncReadCoils+0x8a>
        }
        else
        {
            ucByteCount = ( UCHAR )( usCoilCount / 8 );
 80029ee:	8a7b      	ldrh	r3, [r7, #18]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usCoilCount >= 1 ) &&
 80029f6:	8a7b      	ldrh	r3, [r7, #18]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <eMBMasterFuncReadCoils+0xc2>
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3301      	adds	r3, #1
 8002a00:	781b      	ldrb	r3, [r3, #0]
        if( ( usCoilCount >= 1 ) &&
 8002a02:	7dfa      	ldrb	r2, [r7, #23]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d112      	bne.n	8002a2e <eMBMasterFuncReadCoils+0xc2>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	1c98      	adds	r0, r3, #2
 8002a0c:	8a7a      	ldrh	r2, [r7, #18]
 8002a0e:	8ab9      	ldrh	r1, [r7, #20]
 8002a10:	2300      	movs	r3, #0
 8002a12:	f7fd fcd2 	bl	80003ba <eMBMasterRegCoilsCB>
 8002a16:	4603      	mov	r3, r0
 8002a18:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002a1a:	7c7b      	ldrb	r3, [r7, #17]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <eMBMasterFuncReadCoils+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002a20:	7c7b      	ldrb	r3, [r7, #17]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fb66 	bl	80030f4 <prveMBError2Exception>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002a2c:	e004      	b.n	8002a38 <eMBMasterFuncReadCoils+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	75bb      	strb	r3, [r7, #22]
 8002a32:	e001      	b.n	8002a38 <eMBMasterFuncReadCoils+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002a34:	2303      	movs	r3, #3
 8002a36:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002a38:	7dbb      	ldrb	r3, [r7, #22]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <eMBMasterFuncWriteCoil>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d140      	bne.n	8002ada <eMBMasterFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3302      	adds	r3, #2
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	89bb      	ldrh	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002a72:	89bb      	ldrh	r3, [r7, #12]
 8002a74:	3301      	adds	r3, #1
 8002a76:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d128      	bne.n	8002ad4 <eMBMasterFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3303      	adds	r3, #3
 8002a86:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002a88:	2bff      	cmp	r3, #255	; 0xff
 8002a8a:	d004      	beq.n	8002a96 <eMBMasterFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3303      	adds	r3, #3
 8002a90:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11e      	bne.n	8002ad4 <eMBMasterFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3303      	adds	r3, #3
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2bff      	cmp	r3, #255	; 0xff
 8002aa2:	d102      	bne.n	8002aaa <eMBMasterFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	723b      	strb	r3, [r7, #8]
 8002aa8:	e001      	b.n	8002aae <eMBMasterFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8002aae:	89b9      	ldrh	r1, [r7, #12]
 8002ab0:	f107 0008 	add.w	r0, r7, #8
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f7fd fc7f 	bl	80003ba <eMBMasterRegCoilsCB>
 8002abc:	4603      	mov	r3, r0
 8002abe:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ac0:	7afb      	ldrb	r3, [r7, #11]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <eMBMasterFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fb13 	bl	80030f4 <prveMBError2Exception>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002ad2:	e004      	b.n	8002ade <eMBMasterFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e001      	b.n	8002ade <eMBMasterFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ada:	2303      	movs	r3, #3
 8002adc:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d004      	beq.n	8002b08 <eMBMasterFuncWriteMultipleCoils+0x20>
 8002afe:	f001 f9c3 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d052      	beq.n	8002bae <eMBMasterFuncWriteMultipleCoils+0xc6>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f001 f981 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3301      	adds	r3, #1
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3302      	adds	r3, #2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	8abb      	ldrh	r3, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002b2c:	8abb      	ldrh	r3, [r7, #20]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	82bb      	strh	r3, [r7, #20]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	827b      	strh	r3, [r7, #18]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	8a7b      	ldrh	r3, [r7, #18]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	827b      	strh	r3, [r7, #18]

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	795b      	ldrb	r3, [r3, #5]
 8002b50:	747b      	strb	r3, [r7, #17]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002b52:	8a7b      	ldrh	r3, [r7, #18]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <eMBMasterFuncWriteMultipleCoils+0x82>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002b5c:	8a7b      	ldrh	r3, [r7, #18]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]
 8002b68:	e003      	b.n	8002b72 <eMBMasterFuncWriteMultipleCoils+0x8a>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002b6a:	8a7b      	ldrh	r3, [r7, #18]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	75fb      	strb	r3, [r7, #23]
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8002b72:	8a7b      	ldrh	r3, [r7, #18]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <eMBMasterFuncWriteMultipleCoils+0xbe>
 8002b78:	7dfa      	ldrb	r2, [r7, #23]
 8002b7a:	7c7b      	ldrb	r3, [r7, #17]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d112      	bne.n	8002ba6 <eMBMasterFuncWriteMultipleCoils+0xbe>
        {
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1d98      	adds	r0, r3, #6
 8002b84:	8a7a      	ldrh	r2, [r7, #18]
 8002b86:	8ab9      	ldrh	r1, [r7, #20]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f7fd fc16 	bl	80003ba <eMBMasterRegCoilsCB>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	743b      	strb	r3, [r7, #16]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002b92:	7c3b      	ldrb	r3, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <eMBMasterFuncWriteMultipleCoils+0xc4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002b98:	7c3b      	ldrb	r3, [r7, #16]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 faaa 	bl	80030f4 <prveMBError2Exception>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002ba4:	e002      	b.n	8002bac <eMBMasterFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	75bb      	strb	r3, [r7, #22]
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8002baa:	e002      	b.n	8002bb2 <eMBMasterFuncWriteMultipleCoils+0xca>
 8002bac:	e001      	b.n	8002bb2 <eMBMasterFuncWriteMultipleCoils+0xca>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002bb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8002bca:	f001 f95d 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <eMBMasterFuncReadDiscreteInputs+0x1e>
    {
        eStatus = MB_EX_NONE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75bb      	strb	r3, [r7, #22]
 8002bd8:	e056      	b.n	8002c88 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d950      	bls.n	8002c84 <eMBMasterFuncReadDiscreteInputs+0xc8>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f914 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	8abb      	ldrh	r3, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002c06:	8abb      	ldrh	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3303      	adds	r3, #3
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	8a7b      	ldrh	r3, [r7, #18]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002c26:	8a7b      	ldrh	r3, [r7, #18]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <eMBMasterFuncReadDiscreteInputs+0x82>
        {
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8002c30:	8a7b      	ldrh	r3, [r7, #18]
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	75fb      	strb	r3, [r7, #23]
 8002c3c:	e003      	b.n	8002c46 <eMBMasterFuncReadDiscreteInputs+0x8a>
        }
        else
        {
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 8002c3e:	8a7b      	ldrh	r3, [r7, #18]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8002c46:	8a7b      	ldrh	r3, [r7, #18]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d018      	beq.n	8002c7e <eMBMasterFuncReadDiscreteInputs+0xc2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	7dfa      	ldrb	r2, [r7, #23]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d112      	bne.n	8002c7e <eMBMasterFuncReadDiscreteInputs+0xc2>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	8a7a      	ldrh	r2, [r7, #18]
 8002c5e:	8ab9      	ldrh	r1, [r7, #20]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fbbf 	bl	80003e4 <eMBMasterRegDiscreteCB>
 8002c66:	4603      	mov	r3, r0
 8002c68:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002c6a:	7c7b      	ldrb	r3, [r7, #17]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <eMBMasterFuncReadDiscreteInputs+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002c70:	7c7b      	ldrb	r3, [r7, #17]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fa3e 	bl	80030f4 <prveMBError2Exception>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002c7c:	e004      	b.n	8002c88 <eMBMasterFuncReadDiscreteInputs+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	75bb      	strb	r3, [r7, #22]
 8002c82:	e001      	b.n	8002c88 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c84:	2303      	movs	r3, #3
 8002c86:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002c88:	7dbb      	ldrb	r3, [r7, #22]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <eMBMasterReqWriteHoldingRegister>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqWriteHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usRegData, LONG lTimeOut )
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	81bb      	strh	r3, [r7, #12]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d902      	bls.n	8002cb6 <eMBMasterReqWriteHoldingRegister+0x24>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	75fb      	strb	r3, [r7, #23]
 8002cb4:	e036      	b.n	8002d24 <eMBMasterReqWriteHoldingRegister+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fcdc 	bl	8003674 <xMBMasterRunResTake>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <eMBMasterReqWriteHoldingRegister+0x36>
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	75fb      	strb	r3, [r7, #23]
 8002cc6:	e02d      	b.n	8002d24 <eMBMasterReqWriteHoldingRegister+0x92>
    else
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 f8a1 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        vMBMasterSetDestAddress(ucSndAddr);
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fc1d 	bl	8003514 <vMBMasterSetDestAddress>
        ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_WRITE_REGISTER;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2206      	movs	r2, #6
 8002cde:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF]      = usRegAddr >> 8;
 8002ce0:	89bb      	ldrh	r3, [r7, #12]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF + 1]  = usRegAddr;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	89ba      	ldrh	r2, [r7, #12]
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF]     = usRegData >> 8;
 8002cf8:	897b      	ldrh	r3, [r7, #10]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3303      	adds	r3, #3
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF + 1] = usRegData ;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	897a      	ldrh	r2, [r7, #10]
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_SIZE );
 8002d10:	2005      	movs	r0, #5
 8002d12:	f001 f88d 	bl	8003e30 <vMBMasterSetPDUSndLength>
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8002d16:	2008      	movs	r0, #8
 8002d18:	f000 fc72 	bl	8003600 <xMBMasterPortEventPost>
        eErrStatus = eMBMasterWaitRequestFinish( );
 8002d1c:	f000 fcf0 	bl	8003700 <eMBMasterWaitRequestFinish>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <eMBMasterFuncWriteHoldingRegister>:

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d122      	bne.n	8002d8a <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3302      	adds	r3, #2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	89bb      	ldrh	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002d5e:	89bb      	ldrh	r3, [r7, #12]
 8002d60:	3301      	adds	r3, #1
 8002d62:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	1cd8      	adds	r0, r3, #3
 8002d68:	89b9      	ldrh	r1, [r7, #12]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f7fd fb0f 	bl	8000390 <eMBMasterRegHoldingCB>
 8002d72:	4603      	mov	r3, r0
 8002d74:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002d76:	7afb      	ldrb	r3, [r7, #11]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f9b8 	bl	80030f4 <prveMBError2Exception>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e001      	b.n	8002d8e <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <eMBMasterFuncWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d004      	beq.n	8002db8 <eMBMasterFuncWriteMultipleHoldingRegister+0x20>
 8002dae:	f001 f86b 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d03f      	beq.n	8002e38 <eMBMasterFuncWriteMultipleHoldingRegister+0xa0>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f829 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	8abb      	ldrh	r3, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002ddc:	8abb      	ldrh	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3303      	adds	r3, #3
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3304      	adds	r3, #4
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	8a7b      	ldrh	r3, [r7, #18]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	827b      	strh	r3, [r7, #18]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	795b      	ldrb	r3, [r3, #5]
 8002e00:	747b      	strb	r3, [r7, #17]

        if( ucRegByteCount == 2 * usRegCount )
 8002e02:	7c7a      	ldrb	r2, [r7, #17]
 8002e04:	8a7b      	ldrh	r3, [r7, #18]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d112      	bne.n	8002e32 <eMBMasterFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1d98      	adds	r0, r3, #6
 8002e10:	8a7a      	ldrh	r2, [r7, #18]
 8002e12:	8ab9      	ldrh	r1, [r7, #20]
 8002e14:	2301      	movs	r3, #1
 8002e16:	f7fd fabb 	bl	8000390 <eMBMasterRegHoldingCB>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	743b      	strb	r3, [r7, #16]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002e1e:	7c3b      	ldrb	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002e24:	7c3b      	ldrb	r3, [r7, #16]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f964 	bl	80030f4 <prveMBError2Exception>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8002e30:	e005      	b.n	8002e3e <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e32:	2303      	movs	r3, #3
 8002e34:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8002e36:	e002      	b.n	8002e3e <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	75fb      	strb	r3, [r7, #23]
 8002e3c:	e000      	b.n	8002e40 <eMBMasterFuncWriteMultipleHoldingRegister+0xa8>
        if( ucRegByteCount == 2 * usRegCount )
 8002e3e:	bf00      	nop
    }
    return eStatus;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8002e58:	f001 f816 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <eMBMasterFuncReadHoldingRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
 8002e66:	e047      	b.n	8002ef8 <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d941      	bls.n	8002ef4 <eMBMasterFuncReadHoldingRegister+0xaa>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 ffcd 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	8abb      	ldrh	r3, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002e94:	8abb      	ldrh	r3, [r7, #20]
 8002e96:	3301      	adds	r3, #1
 8002e98:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3303      	adds	r3, #3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	8a7b      	ldrh	r3, [r7, #18]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8002eb4:	8a7b      	ldrh	r3, [r7, #18]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d019      	beq.n	8002eee <eMBMasterFuncReadHoldingRegister+0xa4>
 8002eba:	8a7b      	ldrh	r3, [r7, #18]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	3201      	adds	r2, #1
 8002ec2:	7812      	ldrb	r2, [r2, #0]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d112      	bne.n	8002eee <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1c98      	adds	r0, r3, #2
 8002ecc:	8a7a      	ldrh	r2, [r7, #18]
 8002ece:	8ab9      	ldrh	r1, [r7, #20]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f7fd fa5d 	bl	8000390 <eMBMasterRegHoldingCB>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002eda:	7c7b      	ldrb	r3, [r7, #17]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002ee0:	7c7b      	ldrb	r3, [r7, #17]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f906 	bl	80030f4 <prveMBError2Exception>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002eec:	e004      	b.n	8002ef8 <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	75fb      	strb	r3, [r7, #23]
 8002ef2:	e001      	b.n	8002ef8 <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
    USHORT          usRegReadCount;
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8002f10:	f000 ffba 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75fb      	strb	r3, [r7, #23]
 8002f1e:	e06b      	b.n	8002ff8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d967      	bls.n	8002ff8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 ff71 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3302      	adds	r3, #2
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	8abb      	ldrh	r3, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8002f4c:	8abb      	ldrh	r3, [r7, #20]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3303      	adds	r3, #3
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3304      	adds	r3, #4
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	8a7b      	ldrh	r3, [r7, #18]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3305      	adds	r3, #5
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3306      	adds	r3, #6
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	8a3b      	ldrh	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3307      	adds	r3, #7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	81fb      	strh	r3, [r7, #14]

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8002fa6:	8a7b      	ldrh	r3, [r7, #18]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	3201      	adds	r2, #1
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d11f      	bne.n	8002ff4 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf2>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f103 000a 	add.w	r0, r3, #10
 8002fba:	89fa      	ldrh	r2, [r7, #14]
 8002fbc:	8a39      	ldrh	r1, [r7, #16]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f7fd f9e6 	bl	8000390 <eMBMasterRegHoldingCB>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75bb      	strb	r3, [r7, #22]
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002fc8:	7dbb      	ldrb	r3, [r7, #22]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xde>
            {
                /* Make the read callback. */
                eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	1c98      	adds	r0, r3, #2
 8002fd2:	8a7a      	ldrh	r2, [r7, #18]
 8002fd4:	8ab9      	ldrh	r1, [r7, #20]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f7fd f9da 	bl	8000390 <eMBMasterRegHoldingCB>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	75bb      	strb	r3, [r7, #22]
                                              usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 8002fe0:	7dbb      	ldrb	r3, [r7, #22]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002fe6:	7dbb      	ldrb	r3, [r7, #22]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f883 	bl	80030f4 <prveMBError2Exception>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	75fb      	strb	r3, [r7, #23]
 8002ff2:	e001      	b.n	8002ff8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <eMBMasterFuncReadInputRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 800300c:	2300      	movs	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8003010:	f000 ff3a 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <eMBMasterFuncReadInputRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
 800301e:	e047      	b.n	80030b0 <eMBMasterFuncReadInputRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d941      	bls.n	80030ac <eMBMasterFuncReadInputRegister+0xaa>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fef1 	bl	8003e14 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3301      	adds	r3, #1
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3302      	adds	r3, #2
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b29a      	uxth	r2, r3
 8003046:	8abb      	ldrh	r3, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800304c:	8abb      	ldrh	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3303      	adds	r3, #3
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3304      	adds	r3, #4
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b29a      	uxth	r2, r3
 8003066:	8a7b      	ldrh	r3, [r7, #18]
 8003068:	4313      	orrs	r3, r2
 800306a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 800306c:	8a7b      	ldrh	r3, [r7, #18]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d019      	beq.n	80030a6 <eMBMasterFuncReadInputRegister+0xa4>
 8003072:	8a7b      	ldrh	r3, [r7, #18]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	3201      	adds	r2, #1
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	4293      	cmp	r3, r2
 800307e:	d112      	bne.n	80030a6 <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3302      	adds	r3, #2
 8003084:	8a7a      	ldrh	r2, [r7, #18]
 8003086:	8ab9      	ldrh	r1, [r7, #20]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd f971 	bl	8000370 <eMBMasterRegInputCB>
 800308e:	4603      	mov	r3, r0
 8003090:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003092:	7c7b      	ldrb	r3, [r7, #17]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003098:	7c7b      	ldrb	r3, [r7, #17]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f82a 	bl	80030f4 <prveMBError2Exception>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80030a4:	e004      	b.n	80030b0 <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80030a6:	2303      	movs	r3, #3
 80030a8:	75fb      	strb	r3, [r7, #23]
 80030aa:	e001      	b.n	80030b0 <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80030ac:	2303      	movs	r3, #3
 80030ae:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a08      	ldr	r2, [pc, #32]	; (80030ec <eMBFuncReportSlaveID+0x30>)
 80030cc:	8812      	ldrh	r2, [r2, #0]
 80030ce:	4908      	ldr	r1, [pc, #32]	; (80030f0 <eMBFuncReportSlaveID+0x34>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 ff09 	bl	8003ee8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <eMBFuncReportSlaveID+0x30>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	3301      	adds	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000158 	.word	0x20000158
 80030f0:	20000138 	.word	0x20000138

080030f4 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	2b07      	cmp	r3, #7
 8003102:	d00c      	beq.n	800311e <prveMBError2Exception+0x2a>
 8003104:	2b07      	cmp	r3, #7
 8003106:	dc0d      	bgt.n	8003124 <prveMBError2Exception+0x30>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <prveMBError2Exception+0x1e>
 800310c:	2b01      	cmp	r3, #1
 800310e:	d003      	beq.n	8003118 <prveMBError2Exception+0x24>
 8003110:	e008      	b.n	8003124 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
            break;
 8003116:	e008      	b.n	800312a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8003118:	2302      	movs	r3, #2
 800311a:	73fb      	strb	r3, [r7, #15]
            break;
 800311c:	e005      	b.n	800312a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800311e:	2306      	movs	r3, #6
 8003120:	73fb      	strb	r3, [r7, #15]
            break;
 8003122:	e002      	b.n	800312a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8003124:	2304      	movs	r3, #4
 8003126:	73fb      	strb	r3, [r7, #15]
            break;
 8003128:	bf00      	nop
    }

    return eStatus;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
	...

08003138 <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	603a      	str	r2, [r7, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
 8003146:	460b      	mov	r3, r1
 8003148:	71bb      	strb	r3, [r7, #6]
 800314a:	4613      	mov	r3, r2
 800314c:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]

    switch (eMode)
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d120      	bne.n	800319a <eMBMasterInit+0x62>
    {
#if MB_MASTER_RTU_ENABLED > 0
    case MB_RTU:
        pvMBMasterFrameStartCur = eMBMasterRTUStart;
 8003158:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <eMBMasterInit+0x94>)
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <eMBMasterInit+0x98>)
 800315c:	601a      	str	r2, [r3, #0]
        pvMBMasterFrameStopCur = eMBMasterRTUStop;
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <eMBMasterInit+0x9c>)
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <eMBMasterInit+0xa0>)
 8003162:	601a      	str	r2, [r3, #0]
        peMBMasterFrameSendCur = eMBMasterRTUSend;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <eMBMasterInit+0xa4>)
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <eMBMasterInit+0xa8>)
 8003168:	601a      	str	r2, [r3, #0]
        peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <eMBMasterInit+0xac>)
 800316c:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <eMBMasterInit+0xb0>)
 800316e:	601a      	str	r2, [r3, #0]
        pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <eMBMasterInit+0xb4>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
        pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <eMBMasterInit+0xb8>)
 8003178:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <eMBMasterInit+0xbc>)
 800317a:	601a      	str	r2, [r3, #0]
        pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <eMBMasterInit+0xc0>)
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <eMBMasterInit+0xc4>)
 8003180:	601a      	str	r2, [r3, #0]
        pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <eMBMasterInit+0xc8>)
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <eMBMasterInit+0xcc>)
 8003186:	601a      	str	r2, [r3, #0]

        eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 8003188:	797a      	ldrb	r2, [r7, #5]
 800318a:	79bb      	ldrb	r3, [r7, #6]
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fc32 	bl	80039f8 <eMBMasterRTUInit>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
        break;
 8003198:	e002      	b.n	80031a0 <eMBMasterInit+0x68>
#endif

    default:
        eStatus = MB_EINVAL;
 800319a:	2302      	movs	r3, #2
 800319c:	73fb      	strb	r3, [r7, #15]
        break;
 800319e:	bf00      	nop
    }

    if (eStatus == MB_ENOERR)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <eMBMasterInit+0x88>
    {
        if (!xMBMasterPortEventInit())
 80031a6:	f000 fa1f 	bl	80035e8 <xMBMasterPortEventInit>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <eMBMasterInit+0x7e>
        {
            /* port dependent event module initalization failed. */
            eStatus = MB_EPORTERR;
 80031b0:	2303      	movs	r3, #3
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e002      	b.n	80031bc <eMBMasterInit+0x84>
        }
        else
        {
            eMBState = STATE_DISABLED;
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <eMBMasterInit+0xd0>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
        }
        /* initialize the OS resource for modbus master. */
        vMBMasterOsResInit();
 80031bc:	f000 fa54 	bl	8003668 <vMBMasterOsResInit>
    }
    return eStatus;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000164 	.word	0x20000164
 80031d0:	08003a69 	.word	0x08003a69
 80031d4:	20000168 	.word	0x20000168
 80031d8:	08003a91 	.word	0x08003a91
 80031dc:	20000160 	.word	0x20000160
 80031e0:	08003b1d 	.word	0x08003b1d
 80031e4:	2000016c 	.word	0x2000016c
 80031e8:	08003aad 	.word	0x08003aad
 80031ec:	20000170 	.word	0x20000170
 80031f0:	20000174 	.word	0x20000174
 80031f4:	08003bf1 	.word	0x08003bf1
 80031f8:	20000178 	.word	0x20000178
 80031fc:	08003cad 	.word	0x08003cad
 8003200:	2000017c 	.word	0x2000017c
 8003204:	08003d5d 	.word	0x08003d5d
 8003208:	20000009 	.word	0x20000009

0800320c <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8003212:	2300      	movs	r3, #0
 8003214:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <eMBMasterEnable+0x30>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d106      	bne.n	800322c <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <eMBMasterEnable+0x34>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <eMBMasterEnable+0x30>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e001      	b.n	8003230 <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800322c:	2306      	movs	r3, #6
 800322e:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8003230:	79fb      	ldrb	r3, [r7, #7]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000009 	.word	0x20000009
 8003240:	20000164 	.word	0x20000164

08003244 <eMBMasterPoll>:
}


eMBErrorCode
eMBMasterPoll( void )
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i , j;
    eMBErrorCode    eStatus = MB_ENOERR;
 800324a:	2300      	movs	r3, #0
 800324c:	71fb      	strb	r3, [r7, #7]
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 800324e:	4b9b      	ldr	r3, [pc, #620]	; (80034bc <eMBMasterPoll+0x278>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <eMBMasterPoll+0x1e>
 8003256:	4b99      	ldr	r3, [pc, #612]	; (80034bc <eMBMasterPoll+0x278>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d001      	beq.n	8003262 <eMBMasterPoll+0x1e>
    {
        return MB_EILLSTATE;
 800325e:	2306      	movs	r3, #6
 8003260:	e127      	b.n	80034b2 <eMBMasterPoll+0x26e>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f9e1 	bl	800362c <xMBMasterPortEventGet>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 811c 	bne.w	80034aa <eMBMasterPoll+0x266>
    {
        switch ( eEvent )
 8003272:	88bb      	ldrh	r3, [r7, #4]
 8003274:	3b01      	subs	r3, #1
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f200 8119 	bhi.w	80034ae <eMBMasterPoll+0x26a>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <eMBMasterPoll+0x40>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032c5 	.word	0x080032c5
 8003288:	080032cd 	.word	0x080032cd
 800328c:	080034af 	.word	0x080034af
 8003290:	0800330b 	.word	0x0800330b
 8003294:	080034af 	.word	0x080034af
 8003298:	080034af 	.word	0x080034af
 800329c:	080034af 	.word	0x080034af
 80032a0:	080033ff 	.word	0x080033ff
 80032a4:	080034af 	.word	0x080034af
 80032a8:	080034af 	.word	0x080034af
 80032ac:	080034af 	.word	0x080034af
 80032b0:	080034af 	.word	0x080034af
 80032b4:	080034af 	.word	0x080034af
 80032b8:	080034af 	.word	0x080034af
 80032bc:	080034af 	.word	0x080034af
 80032c0:	08003429 	.word	0x08003429
        {
        case EV_MASTER_READY:
            eMBState = STATE_ESTABLISHED;
 80032c4:	4b7d      	ldr	r3, [pc, #500]	; (80034bc <eMBMasterPoll+0x278>)
 80032c6:	2203      	movs	r2, #3
 80032c8:	701a      	strb	r2, [r3, #0]
            break;
 80032ca:	e0f1      	b.n	80034b0 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_RECEIVED:
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <eMBMasterPoll+0x27c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a7c      	ldr	r2, [pc, #496]	; (80034c4 <eMBMasterPoll+0x280>)
 80032d2:	497d      	ldr	r1, [pc, #500]	; (80034c8 <eMBMasterPoll+0x284>)
 80032d4:	487d      	ldr	r0, [pc, #500]	; (80034cc <eMBMasterPoll+0x288>)
 80032d6:	4798      	blx	r3
 80032d8:	4603      	mov	r3, r0
 80032da:	71fb      	strb	r3, [r7, #7]
            /* Check if the frame is for us. If not ,send an error process event. */
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <eMBMasterPoll+0xb8>
 80032e2:	f000 f90d 	bl	8003500 <ucMBMasterGetDestAddress>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b78      	ldr	r3, [pc, #480]	; (80034cc <eMBMasterPoll+0x288>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d104      	bne.n	80032fc <eMBMasterPoll+0xb8>
            {
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 80032f2:	2004      	movs	r0, #4
 80032f4:	f000 f984 	bl	8003600 <xMBMasterPortEventPost>
 80032f8:	bf00      	nop
            else
            {
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
            }
            break;
 80032fa:	e0d9      	b.n	80034b0 <eMBMasterPoll+0x26c>
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f000 f923 	bl	8003548 <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8003302:	2010      	movs	r0, #16
 8003304:	f000 f97c 	bl	8003600 <xMBMasterPortEventPost>
            break;
 8003308:	e0d2      	b.n	80034b0 <eMBMasterPoll+0x26c>

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800330a:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <eMBMasterPoll+0x284>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <eMBMasterPoll+0x28c>)
 8003312:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003314:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <eMBMasterPoll+0x290>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 800331a:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <eMBMasterPoll+0x28c>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b25b      	sxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	da06      	bge.n	8003332 <eMBMasterPoll+0xee>
                eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <eMBMasterPoll+0x284>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	4b69      	ldr	r3, [pc, #420]	; (80034d4 <eMBMasterPoll+0x290>)
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e055      	b.n	80033de <eMBMasterPoll+0x19a>
            }
            else
            {
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e04d      	b.n	80033d4 <eMBMasterPoll+0x190>
                {
                    /* No more function handlers registered. Abort. */
                    if (xMasterFuncHandlers[i].ucFunctionCode == 0) {
 8003338:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <eMBMasterPoll+0x294>)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d04b      	beq.n	80033dc <eMBMasterPoll+0x198>
                        break;
                    }
                    else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8003344:	4a64      	ldr	r2, [pc, #400]	; (80034d8 <eMBMasterPoll+0x294>)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800334c:	4b60      	ldr	r3, [pc, #384]	; (80034d0 <eMBMasterPoll+0x28c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d13c      	bne.n	80033ce <eMBMasterPoll+0x18a>
                        vMBMasterSetCBRunInMasterMode(TRUE);
 8003354:	2001      	movs	r0, #1
 8003356:	f000 f8c3 	bl	80034e0 <vMBMasterSetCBRunInMasterMode>
                        /* If master request is broadcast,
                         * the master need execute function for all slave.
                         */
                        if ( xMBMasterRequestIsBroadcast() ) {
 800335a:	f000 fd95 	bl	8003e88 <xMBMasterRequestIsBroadcast>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d022      	beq.n	80033aa <eMBMasterPoll+0x166>
                            usLength = usMBMasterGetPDUSndLength();
 8003364:	f000 fd74 	bl	8003e50 <usMBMasterGetPDUSndLength>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	4b55      	ldr	r3, [pc, #340]	; (80034c4 <eMBMasterPoll+0x280>)
 800336e:	801a      	strh	r2, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8003370:	2301      	movs	r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	e015      	b.n	80033a2 <eMBMasterPoll+0x15e>
                                vMBMasterSetDestAddress(j);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f8ca 	bl	8003514 <vMBMasterSetDestAddress>
                                eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8003380:	4a55      	ldr	r2, [pc, #340]	; (80034d8 <eMBMasterPoll+0x294>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <eMBMasterPoll+0x284>)
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	494d      	ldr	r1, [pc, #308]	; (80034c4 <eMBMasterPoll+0x280>)
 8003390:	4610      	mov	r0, r2
 8003392:	4798      	blx	r3
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <eMBMasterPoll+0x290>)
 800339a:	701a      	strb	r2, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	3301      	adds	r3, #1
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	dde6      	ble.n	8003376 <eMBMasterPoll+0x132>
 80033a8:	e00d      	b.n	80033c6 <eMBMasterPoll+0x182>
                            }
                        }
                        else {
                            eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 80033aa:	4a4b      	ldr	r2, [pc, #300]	; (80034d8 <eMBMasterPoll+0x294>)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a44      	ldr	r2, [pc, #272]	; (80034c8 <eMBMasterPoll+0x284>)
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	4942      	ldr	r1, [pc, #264]	; (80034c4 <eMBMasterPoll+0x280>)
 80033ba:	4610      	mov	r0, r2
 80033bc:	4798      	blx	r3
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <eMBMasterPoll+0x290>)
 80033c4:	701a      	strb	r2, [r3, #0]
                        }
                        vMBMasterSetCBRunInMasterMode(FALSE);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f000 f88a 	bl	80034e0 <vMBMasterSetCBRunInMasterMode>
                        break;
 80033cc:	e007      	b.n	80033de <eMBMasterPoll+0x19a>
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	ddae      	ble.n	8003338 <eMBMasterPoll+0xf4>
 80033da:	e000      	b.n	80033de <eMBMasterPoll+0x19a>
                        break;
 80033dc:	bf00      	nop
                    }
                }
            }
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 80033de:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <eMBMasterPoll+0x290>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <eMBMasterPoll+0x1b0>
                vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 80033e6:	2002      	movs	r0, #2
 80033e8:	f000 f8ae 	bl	8003548 <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 80033ec:	2010      	movs	r0, #16
 80033ee:	f000 f907 	bl	8003600 <xMBMasterPortEventPost>
            }
            else {
                vMBMasterCBRequestScuuess( );
                vMBMasterRunResRelease( );
            }
            break;
 80033f2:	e05d      	b.n	80034b0 <eMBMasterPoll+0x26c>
                vMBMasterCBRequestScuuess( );
 80033f4:	f000 f97c 	bl	80036f0 <vMBMasterCBRequestScuuess>
                vMBMasterRunResRelease( );
 80033f8:	f000 f946 	bl	8003688 <vMBMasterRunResRelease>
            break;
 80033fc:	e058      	b.n	80034b0 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_SENT:
            /* Master is busy now. */
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 80033fe:	4832      	ldr	r0, [pc, #200]	; (80034c8 <eMBMasterPoll+0x284>)
 8003400:	f000 fd08 	bl	8003e14 <vMBMasterGetPDUSndBuf>
            eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8003404:	4b35      	ldr	r3, [pc, #212]	; (80034dc <eMBMasterPoll+0x298>)
 8003406:	681c      	ldr	r4, [r3, #0]
 8003408:	f000 f87a 	bl	8003500 <ucMBMasterGetDestAddress>
 800340c:	4603      	mov	r3, r0
 800340e:	461e      	mov	r6, r3
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <eMBMasterPoll+0x284>)
 8003412:	681d      	ldr	r5, [r3, #0]
 8003414:	f000 fd1c 	bl	8003e50 <usMBMasterGetPDUSndLength>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	4629      	mov	r1, r5
 800341e:	4630      	mov	r0, r6
 8003420:	47a0      	blx	r4
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
            break;
 8003426:	e043      	b.n	80034b0 <eMBMasterPoll+0x26c>

        case EV_MASTER_ERROR_PROCESS:
            /* Execute specified error process callback function. */
            errorType = eMBMasterGetErrorType();
 8003428:	f000 f884 	bl	8003534 <eMBMasterGetErrorType>
 800342c:	4603      	mov	r3, r0
 800342e:	71bb      	strb	r3, [r7, #6]
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 8003430:	4825      	ldr	r0, [pc, #148]	; (80034c8 <eMBMasterPoll+0x284>)
 8003432:	f000 fcef 	bl	8003e14 <vMBMasterGetPDUSndBuf>
            switch (errorType) {
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d024      	beq.n	8003486 <eMBMasterPoll+0x242>
 800343c:	2b02      	cmp	r3, #2
 800343e:	dc31      	bgt.n	80034a4 <eMBMasterPoll+0x260>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <eMBMasterPoll+0x206>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d00f      	beq.n	8003468 <eMBMasterPoll+0x224>
 8003448:	e02c      	b.n	80034a4 <eMBMasterPoll+0x260>
            case EV_ERROR_RESPOND_TIMEOUT:
                vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 800344a:	f000 f859 	bl	8003500 <ucMBMasterGetDestAddress>
 800344e:	4603      	mov	r3, r0
 8003450:	461d      	mov	r5, r3
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <eMBMasterPoll+0x284>)
 8003454:	681c      	ldr	r4, [r3, #0]
 8003456:	f000 fcfb 	bl	8003e50 <usMBMasterGetPDUSndLength>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	4621      	mov	r1, r4
 8003460:	4628      	mov	r0, r5
 8003462:	f000 f917 	bl	8003694 <vMBMasterErrorCBRespondTimeout>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8003466:	e01d      	b.n	80034a4 <eMBMasterPoll+0x260>
            case EV_ERROR_RECEIVE_DATA:
                vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8003468:	f000 f84a 	bl	8003500 <ucMBMasterGetDestAddress>
 800346c:	4603      	mov	r3, r0
 800346e:	461d      	mov	r5, r3
 8003470:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <eMBMasterPoll+0x284>)
 8003472:	681c      	ldr	r4, [r3, #0]
 8003474:	f000 fcec 	bl	8003e50 <usMBMasterGetPDUSndLength>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	4621      	mov	r1, r4
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f917 	bl	80036b2 <vMBMasterErrorCBReceiveData>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8003484:	e00e      	b.n	80034a4 <eMBMasterPoll+0x260>
            case EV_ERROR_EXECUTE_FUNCTION:
                vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8003486:	f000 f83b 	bl	8003500 <ucMBMasterGetDestAddress>
 800348a:	4603      	mov	r3, r0
 800348c:	461d      	mov	r5, r3
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <eMBMasterPoll+0x284>)
 8003490:	681c      	ldr	r4, [r3, #0]
 8003492:	f000 fcdd 	bl	8003e50 <usMBMasterGetPDUSndLength>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	4621      	mov	r1, r4
 800349c:	4628      	mov	r0, r5
 800349e:	f000 f917 	bl	80036d0 <vMBMasterErrorCBExecuteFunction>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 80034a2:	bf00      	nop
            }
            vMBMasterRunResRelease();
 80034a4:	f000 f8f0 	bl	8003688 <vMBMasterRunResRelease>
            break;
 80034a8:	e002      	b.n	80034b0 <eMBMasterPoll+0x26c>

        default:
            break;
        }

    }
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <eMBMasterPoll+0x26c>
            break;
 80034ae:	bf00      	nop
    return MB_ENOERR;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000009 	.word	0x20000009
 80034c0:	2000016c 	.word	0x2000016c
 80034c4:	20000188 	.word	0x20000188
 80034c8:	20000184 	.word	0x20000184
 80034cc:	20000180 	.word	0x20000180
 80034d0:	2000018a 	.word	0x2000018a
 80034d4:	2000018b 	.word	0x2000018b
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	20000160 	.word	0x20000160

080034e0 <vMBMasterSetCBRunInMasterMode>:
{
    return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
    xMBRunInMasterMode = IsMasterMode;
 80034ea:	4a04      	ldr	r2, [pc, #16]	; (80034fc <vMBMasterSetCBRunInMasterMode+0x1c>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	7013      	strb	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000015b 	.word	0x2000015b

08003500 <ucMBMasterGetDestAddress>:
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
    return ucMBMasterDestAddress;
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <ucMBMasterGetDestAddress+0x10>)
 8003506:	781b      	ldrb	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	2000015a 	.word	0x2000015a

08003514 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
    ucMBMasterDestAddress = Address;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <vMBMasterSetDestAddress+0x1c>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	7013      	strb	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000015a 	.word	0x2000015a

08003534 <eMBMasterGetErrorType>:
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
    return eMBMasterCurErrorType;
 8003538:	4b02      	ldr	r3, [pc, #8]	; (8003544 <eMBMasterGetErrorType+0x10>)
 800353a:	781b      	ldrb	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	2000015c 	.word	0x2000015c

08003548 <vMBMasterSetErrorType>:
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
    eMBMasterCurErrorType = errorType;
 8003552:	4a04      	ldr	r2, [pc, #16]	; (8003564 <vMBMasterSetErrorType+0x1c>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	7013      	strb	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	2000015c 	.word	0x2000015c

08003568 <EnterCriticalSection>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800356c:	b672      	cpsid	i
}
 800356e:	bf00      	nop
  __disable_irq();
  lockCounter++;
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <EnterCriticalSection+0x1c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <EnterCriticalSection+0x1c>)
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	2000018c 	.word	0x2000018c

08003588 <ExitCriticalSection>:



/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  lockCounter--;
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <ExitCriticalSection+0x24>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3b01      	subs	r3, #1
 8003592:	4a06      	ldr	r2, [pc, #24]	; (80035ac <ExitCriticalSection+0x24>)
 8003594:	6013      	str	r3, [r2, #0]

  if (lockCounter == 0)
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <ExitCriticalSection+0x24>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <ExitCriticalSection+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 800359e:	b662      	cpsie	i
}
 80035a0:	bf00      	nop
  {
    __enable_irq();
  }
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	2000018c 	.word	0x2000018c

080035b0 <MT_PORT_SetTimerModule>:



/*----------------------------------------------------------------------------*/
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  modbusTimer = timer;
 80035b8:	4a03      	ldr	r2, [pc, #12]	; (80035c8 <MT_PORT_SetTimerModule+0x18>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6013      	str	r3, [r2, #0]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	20000194 	.word	0x20000194

080035cc <MT_PORT_SetUartModule>:



/*----------------------------------------------------------------------------*/
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  modbusUart = uart;
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <MT_PORT_SetUartModule+0x18>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6013      	str	r3, [r2, #0]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	20000190 	.word	0x20000190

080035e8 <xMBMasterPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBMasterPortEventInit(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  xEventInQueue = FALSE;
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <xMBMasterPortEventInit+0x14>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
  return TRUE;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	2000019a 	.word	0x2000019a

08003600 <xMBMasterPortEventPost>:



/*----------------------------------------------------------------------------*/
BOOL xMBMasterPortEventPost(eMBMasterEventType eEvent)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
  xEventInQueue = TRUE;
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <xMBMasterPortEventPost+0x24>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 8003610:	4a05      	ldr	r2, [pc, #20]	; (8003628 <xMBMasterPortEventPost+0x28>)
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	8013      	strh	r3, [r2, #0]
  return TRUE;
 8003616:	2301      	movs	r3, #1
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2000019a 	.word	0x2000019a
 8003628:	20000198 	.word	0x20000198

0800362c <xMBMasterPortEventGet>:



/*----------------------------------------------------------------------------*/
BOOL xMBMasterPortEventGet(eMBMasterEventType * eEvent)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  BOOL xEventHappened = FALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]

  if(xEventInQueue)
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <xMBMasterPortEventGet+0x34>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <xMBMasterPortEventGet+0x26>
  {
    *eEvent = eQueuedEvent;
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <xMBMasterPortEventGet+0x38>)
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	801a      	strh	r2, [r3, #0]
    xEventInQueue = FALSE;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <xMBMasterPortEventGet+0x34>)
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
    xEventHappened = TRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
  }

  return xEventHappened;
 8003652:	7bfb      	ldrb	r3, [r7, #15]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000019a 	.word	0x2000019a
 8003664:	20000198 	.word	0x20000198

08003668 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake(LONG lTimeOut)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return TRUE;
 800367c:	2301      	movs	r3, #1
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <vMBMasterErrorCBRespondTimeout>:
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
                                    USHORT ucPDULength)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	71fb      	strb	r3, [r7, #7]
 80036a0:	4613      	mov	r3, r2
 80036a2:	80bb      	strh	r3, [r7, #4]
  xMBMasterPortEventPost(EV_MASTER_ERROR_RESPOND_TIMEOUT);
 80036a4:	2040      	movs	r0, #64	; 0x40
 80036a6:	f7ff ffab 	bl	8003600 <xMBMasterPortEventPost>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <vMBMasterErrorCBReceiveData>:


/*----------------------------------------------------------------------------*/
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
                                 USHORT ucPDULength)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	4603      	mov	r3, r0
 80036ba:	6039      	str	r1, [r7, #0]
 80036bc:	71fb      	strb	r3, [r7, #7]
 80036be:	4613      	mov	r3, r2
 80036c0:	80bb      	strh	r3, [r7, #4]
  xMBMasterPortEventPost(EV_MASTER_ERROR_RECEIVE_DATA);
 80036c2:	2080      	movs	r0, #128	; 0x80
 80036c4:	f7ff ff9c 	bl	8003600 <xMBMasterPortEventPost>
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <vMBMasterErrorCBExecuteFunction>:


/*----------------------------------------------------------------------------*/
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
                                     USHORT ucPDULength)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	4613      	mov	r3, r2
 80036de:	80bb      	strh	r3, [r7, #4]
  xMBMasterPortEventPost(EV_MASTER_ERROR_EXECUTE_FUNCTION);
 80036e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036e4:	f7ff ff8c 	bl	8003600 <xMBMasterPortEventPost>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <vMBMasterCBRequestScuuess>:



/*----------------------------------------------------------------------------*/
void vMBMasterCBRequestScuuess(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  xMBMasterPortEventPost(EV_MASTER_PROCESS_SUCCESS);
 80036f4:	2020      	movs	r0, #32
 80036f6:	f7ff ff83 	bl	8003600 <xMBMasterPortEventPost>
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <eMBMasterWaitRequestFinish>:



/*----------------------------------------------------------------------------*/
eMBMasterReqErrCode eMBMasterWaitRequestFinish(void)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
  eMBMasterReqErrCode eErrStatus = MB_MRE_NO_ERR;
 8003706:	2300      	movs	r3, #0
 8003708:	71fb      	strb	r3, [r7, #7]

  switch (eQueuedEvent)
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <eMBMasterWaitRequestFinish+0x50>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003712:	d011      	beq.n	8003738 <eMBMasterWaitRequestFinish+0x38>
 8003714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003718:	dc11      	bgt.n	800373e <eMBMasterWaitRequestFinish+0x3e>
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d009      	beq.n	8003732 <eMBMasterWaitRequestFinish+0x32>
 800371e:	2b80      	cmp	r3, #128	; 0x80
 8003720:	dc0d      	bgt.n	800373e <eMBMasterWaitRequestFinish+0x3e>
 8003722:	2b20      	cmp	r3, #32
 8003724:	d00d      	beq.n	8003742 <eMBMasterWaitRequestFinish+0x42>
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d000      	beq.n	800372c <eMBMasterWaitRequestFinish+0x2c>
    case EV_MASTER_ERROR_EXECUTE_FUNCTION:
      eErrStatus = MB_MRE_EXE_FUN;
      break;

    default:
      break;
 800372a:	e008      	b.n	800373e <eMBMasterWaitRequestFinish+0x3e>
      eErrStatus = MB_MRE_TIMEDOUT;
 800372c:	2304      	movs	r3, #4
 800372e:	71fb      	strb	r3, [r7, #7]
      break;
 8003730:	e008      	b.n	8003744 <eMBMasterWaitRequestFinish+0x44>
      eErrStatus = MB_MRE_REV_DATA;
 8003732:	2303      	movs	r3, #3
 8003734:	71fb      	strb	r3, [r7, #7]
      break;
 8003736:	e005      	b.n	8003744 <eMBMasterWaitRequestFinish+0x44>
      eErrStatus = MB_MRE_EXE_FUN;
 8003738:	2306      	movs	r3, #6
 800373a:	71fb      	strb	r3, [r7, #7]
      break;
 800373c:	e002      	b.n	8003744 <eMBMasterWaitRequestFinish+0x44>
      break;
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <eMBMasterWaitRequestFinish+0x44>
      break;
 8003742:	bf00      	nop
  }

  return eErrStatus;
 8003744:	79fb      	ldrb	r3, [r7, #7]
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	20000198 	.word	0x20000198

08003754 <vMBMasterPortSerialEnable>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	460a      	mov	r2, r1
 800375e:	71fb      	strb	r3, [r7, #7]
 8003760:	4613      	mov	r3, r2
 8003762:	71bb      	strb	r3, [r7, #6]
  if (xRxEnable == FALSE)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <vMBMasterPortSerialEnable+0x22>
  {
    HAL_UART_AbortReceive_IT(modbusUart);
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <vMBMasterPortSerialEnable+0x5c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fc7e 	bl	8002070 <HAL_UART_AbortReceive_IT>
 8003774:	e006      	b.n	8003784 <vMBMasterPortSerialEnable+0x30>
  }
  else
  {
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <vMBMasterPortSerialEnable+0x5c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	490d      	ldr	r1, [pc, #52]	; (80037b4 <vMBMasterPortSerialEnable+0x60>)
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fbf5 	bl	8001f6e <HAL_UART_Receive_IT>
  }

  if (xTxEnable == FALSE)
 8003784:	79bb      	ldrb	r3, [r7, #6]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <vMBMasterPortSerialEnable+0x42>
  {
    HAL_UART_AbortTransmit_IT(modbusUart);
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <vMBMasterPortSerialEnable+0x5c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe fc1e 	bl	8001fd0 <HAL_UART_AbortTransmit_IT>
    if (modbusUart->gState == HAL_UART_STATE_READY)
    {
      prvvUARTTxReadyISR();
    }
  }
}
 8003794:	e008      	b.n	80037a8 <vMBMasterPortSerialEnable+0x54>
    if (modbusUart->gState == HAL_UART_STATE_READY)
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <vMBMasterPortSerialEnable+0x5c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d101      	bne.n	80037a8 <vMBMasterPortSerialEnable+0x54>
      prvvUARTTxReadyISR();
 80037a4:	f000 f84a 	bl	800383c <prvvUARTTxReadyISR>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000190 	.word	0x20000190
 80037b4:	2000019c 	.word	0x2000019c

080037b8 <xMBMasterPortSerialInit>:



/* --------------------------------------------------------------------------*/
BOOL xMBMasterPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6039      	str	r1, [r7, #0]
 80037c0:	4611      	mov	r1, r2
 80037c2:	461a      	mov	r2, r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
 80037c8:	460b      	mov	r3, r1
 80037ca:	71bb      	strb	r3, [r7, #6]
 80037cc:	4613      	mov	r3, r2
 80037ce:	717b      	strb	r3, [r7, #5]
  return TRUE;
 80037d0:	2301      	movs	r3, #1
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <xMBMasterPortSerialPutByte>:



/* --------------------------------------------------------------------------*/
BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  txByte = ucByte;
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <xMBMasterPortSerialPutByte+0x28>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	7013      	strb	r3, [r2, #0]
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <xMBMasterPortSerialPutByte+0x2c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	4904      	ldr	r1, [pc, #16]	; (8003804 <xMBMasterPortSerialPutByte+0x28>)
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fb76 	bl	8001ee6 <HAL_UART_Transmit_IT>
  return TRUE;
 80037fa:	2301      	movs	r3, #1
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	2000019b 	.word	0x2000019b
 8003808:	20000190 	.word	0x20000190

0800380c <xMBMasterPortSerialGetByte>:



/* --------------------------------------------------------------------------*/
BOOL xMBMasterPortSerialGetByte( CHAR * pucByte )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  *pucByte = rxByte;
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <xMBMasterPortSerialGetByte+0x28>)
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <xMBMasterPortSerialGetByte+0x2c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	4904      	ldr	r1, [pc, #16]	; (8003834 <xMBMasterPortSerialGetByte+0x28>)
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fba2 	bl	8001f6e <HAL_UART_Receive_IT>
  return TRUE;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2000019c 	.word	0x2000019c
 8003838:	20000190 	.word	0x20000190

0800383c <prvvUARTTxReadyISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  pxMBMasterFrameCBTransmitterEmpty();
 8003840:	4b02      	ldr	r3, [pc, #8]	; (800384c <prvvUARTTxReadyISR+0x10>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4798      	blx	r3
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000178 	.word	0x20000178

08003850 <prvvUARTRxISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTRxISR(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  pxMBMasterFrameCBByteReceived();
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <prvvUARTRxISR+0x10>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4798      	blx	r3
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000174 	.word	0x20000174

08003864 <HAL_UART_TxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_UART_TxCpltCallback+0x24>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d101      	bne.n	800387e <HAL_UART_TxCpltCallback+0x1a>
  {
    prvvUARTTxReadyISR();
 800387a:	f7ff ffdf 	bl	800383c <prvvUARTTxReadyISR>
  }
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000190 	.word	0x20000190

0800388c <HAL_UART_RxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_UART_RxCpltCallback+0x24>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_RxCpltCallback+0x1a>
  {
    prvvUARTRxISR();
 80038a2:	f7ff ffd5 	bl	8003850 <prvvUARTRxISR>
  }
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000190 	.word	0x20000190

080038b4 <xMBMasterPortTimersInit>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBMasterPortTimersInit(USHORT usTim1Timerout50us)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	80fb      	strh	r3, [r7, #6]
  timerPeriod = usTim1Timerout50us;
 80038be:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <xMBMasterPortTimersInit+0x1c>)
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	8013      	strh	r3, [r2, #0]
  return TRUE;
 80038c4:	2301      	movs	r3, #1
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	2000019e 	.word	0x2000019e

080038d4 <vMBMasterPortTimersT35Enable>:



/* --------------------------------------------------------------------------*/
inline void vMBMasterPortTimersT35Enable()
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  vMBMasterSetCurTimerMode(MB_TMODE_T35);
 80038d8:	2000      	movs	r0, #0
 80038da:	f000 fac5 	bl	8003e68 <vMBMasterSetCurTimerMode>
  timerCounter = 0;
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <vMBMasterPortTimersT35Enable+0x20>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(modbusTimer);
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <vMBMasterPortTimersT35Enable+0x24>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fed7 	bl	800169c <HAL_TIM_Base_Start_IT>
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200001a0 	.word	0x200001a0
 80038f8:	20000194 	.word	0x20000194

080038fc <vMBMasterPortTimersConvertDelayEnable>:



/* --------------------------------------------------------------------------*/
void vMBMasterPortTimersConvertDelayEnable()
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8003900:	2002      	movs	r0, #2
 8003902:	f000 fab1 	bl	8003e68 <vMBMasterSetCurTimerMode>
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}

0800390a <vMBMasterPortTimersRespondTimeoutEnable>:



/* --------------------------------------------------------------------------*/
void vMBMasterPortTimersRespondTimeoutEnable()
{
 800390a:	b580      	push	{r7, lr}
 800390c:	af00      	add	r7, sp, #0
  vMBMasterSetCurTimerMode(MB_TMODE_RESPOND_TIMEOUT);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 faaa 	bl	8003e68 <vMBMasterSetCurTimerMode>
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}

08003918 <vMBMasterPortTimersDisable>:



/* --------------------------------------------------------------------------*/
inline void vMBMasterPortTimersDisable()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop_IT(modbusTimer);
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <vMBMasterPortTimersDisable+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd ff0d 	bl	8001740 <HAL_TIM_Base_Stop_IT>
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000194 	.word	0x20000194

08003930 <prvvTIMERExpiredISR>:



/* --------------------------------------------------------------------------*/
static void prvvTIMERExpiredISR(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
    ( void )pxMBMasterPortCBTimerExpired();
 8003934:	4b02      	ldr	r3, [pc, #8]	; (8003940 <prvvTIMERExpiredISR+0x10>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4798      	blx	r3
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000017c 	.word	0x2000017c

08003944 <HAL_TIM_PeriodElapsedCallback>:



/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == modbusTimer->Instance)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10d      	bne.n	8003976 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    timerCounter++;
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003964:	801a      	strh	r2, [r3, #0]

    if (timerCounter == timerPeriod)
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	4b07      	ldr	r3, [pc, #28]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d101      	bne.n	8003976 <HAL_TIM_PeriodElapsedCallback+0x32>
    {
      prvvTIMERExpiredISR();
 8003972:	f7ff ffdd 	bl	8003930 <prvvTIMERExpiredISR>
    }
  }
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000194 	.word	0x20000194
 8003984:	200001a0 	.word	0x200001a0
 8003988:	2000019e 	.word	0x2000019e

0800398c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8003998:	23ff      	movs	r3, #255	; 0xff
 800399a:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800399c:	23ff      	movs	r3, #255	; 0xff
 800399e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 80039a0:	e013      	b.n	80039ca <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	7bbb      	ldrb	r3, [r7, #14]
 80039ac:	4053      	eors	r3, r2
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80039b2:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <usMBCRC16+0x64>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4413      	add	r3, r2
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	4053      	eors	r3, r2
 80039be:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80039c0:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <usMBCRC16+0x68>)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	807a      	strh	r2, [r7, #2]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e6      	bne.n	80039a2 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	b21a      	sxth	r2, r3
 80039da:	7bbb      	ldrb	r3, [r7, #14]
 80039dc:	b21b      	sxth	r3, r3
 80039de:	4313      	orrs	r3, r2
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	b29b      	uxth	r3, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	08003f54 	.word	0x08003f54
 80039f4:	08004054 	.word	0x08004054

080039f8 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
 8003a04:	4613      	mov	r3, r2
 8003a06:	71bb      	strb	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 8003a0c:	f7ff fdac 	bl	8003568 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8003a10:	79bb      	ldrb	r3, [r7, #6]
 8003a12:	79f8      	ldrb	r0, [r7, #7]
 8003a14:	2208      	movs	r2, #8
 8003a16:	6839      	ldr	r1, [r7, #0]
 8003a18:	f7ff fece 	bl	80037b8 <xMBMasterPortSerialInit>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d002      	beq.n	8003a28 <eMBMasterRTUInit+0x30>
    {
        eStatus = MB_EPORTERR;
 8003a22:	2303      	movs	r3, #3
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	e016      	b.n	8003a56 <eMBMasterRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8003a2e:	d902      	bls.n	8003a36 <eMBMasterRTUInit+0x3e>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8003a30:	2323      	movs	r3, #35	; 0x23
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	e005      	b.n	8003a42 <eMBMasterRTUInit+0x4a>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <eMBMasterRTUInit+0x6c>)
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	60bb      	str	r3, [r7, #8]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff34 	bl	80038b4 <xMBMasterPortTimersInit>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <eMBMasterRTUInit+0x5e>
        {
            eStatus = MB_EPORTERR;
 8003a52:	2303      	movs	r3, #3
 8003a54:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8003a56:	f7ff fd97 	bl	8003588 <ExitCriticalSection>

    return eStatus;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	00177fa0 	.word	0x00177fa0

08003a68 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8003a6c:	f7ff fd7c 	bl	8003568 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <eMBMasterRTUStart+0x24>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 8003a76:	2100      	movs	r1, #0
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7ff fe6b 	bl	8003754 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 8003a7e:	f7ff ff29 	bl	80038d4 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 8003a82:	f7ff fd81 	bl	8003588 <ExitCriticalSection>
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200001a3 	.word	0x200001a3

08003a90 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8003a94:	f7ff fd68 	bl	8003568 <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 8003a98:	2100      	movs	r1, #0
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f7ff fe5a 	bl	8003754 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 8003aa0:	f7ff ff3a 	bl	8003918 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8003aa4:	f7ff fd70 	bl	8003588 <ExitCriticalSection>
}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8003abc:	f7ff fd54 	bl	8003568 <EnterCriticalSection>
    assert_param( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <eMBMasterRTUReceive+0x64>)
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d919      	bls.n	8003afe <eMBMasterRTUReceive+0x52>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <eMBMasterRTUReceive+0x64>)
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4810      	ldr	r0, [pc, #64]	; (8003b14 <eMBMasterRTUReceive+0x68>)
 8003ad4:	f7ff ff5a 	bl	800398c <usMBCRC16>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <eMBMasterRTUReceive+0x52>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <eMBMasterRTUReceive+0x68>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <eMBMasterRTUReceive+0x64>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b03      	subs	r3, #3
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <eMBMasterRTUReceive+0x6c>)
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e001      	b.n	8003b02 <eMBMasterRTUReceive+0x56>
    }
    else
    {
        eStatus = MB_EIO;
 8003afe:	2305      	movs	r3, #5
 8003b00:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8003b02:	f7ff fd41 	bl	8003588 <ExitCriticalSection>
    return eStatus;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200003ae 	.word	0x200003ae
 8003b14:	200002a4 	.word	0x200002a4
 8003b18:	200002a5 	.word	0x200002a5

08003b1c <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d901      	bls.n	8003b3a <eMBMasterRTUSend+0x1e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e04b      	b.n	8003bd2 <eMBMasterRTUSend+0xb6>

    ENTER_CRITICAL_SECTION(  );
 8003b3a:	f7ff fd15 	bl	8003568 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <eMBMasterRTUSend+0xc0>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d13f      	bne.n	8003bc8 <eMBMasterRTUSend+0xac>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <eMBMasterRTUSend+0xc4>)
 8003b4e:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <eMBMasterRTUSend+0xc4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	79fa      	ldrb	r2, [r7, #7]
 8003b5c:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	88bb      	ldrh	r3, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003b6c:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <eMBMasterRTUSend+0xc4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1c      	ldr	r2, [pc, #112]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	b292      	uxth	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff06 	bl	800398c <usMBCRC16>
 8003b80:	4603      	mov	r3, r0
 8003b82:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	b291      	uxth	r1, r2
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003b90:	8011      	strh	r1, [r2, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	89bb      	ldrh	r3, [r7, #12]
 8003b96:	b2d9      	uxtb	r1, r3
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <eMBMasterRTUSend+0xcc>)
 8003b9a:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003b9c:	89bb      	ldrh	r3, [r7, #12]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b299      	uxth	r1, r3
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	b290      	uxth	r0, r2
 8003bac:	4a0d      	ldr	r2, [pc, #52]	; (8003be4 <eMBMasterRTUSend+0xc8>)
 8003bae:	8010      	strh	r0, [r2, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	b2c9      	uxtb	r1, r1
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <eMBMasterRTUSend+0xcc>)
 8003bb6:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <eMBMasterRTUSend+0xd0>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7ff fdc7 	bl	8003754 <vMBMasterPortSerialEnable>
 8003bc6:	e001      	b.n	8003bcc <eMBMasterRTUSend+0xb0>
    }
    else
    {
        eStatus = MB_EIO;
 8003bc8:	2305      	movs	r3, #5
 8003bca:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8003bcc:	f7ff fcdc 	bl	8003588 <ExitCriticalSection>
    return eStatus;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200001a3 	.word	0x200001a3
 8003be0:	200003a8 	.word	0x200003a8
 8003be4:	200003ac 	.word	0x200003ac
 8003be8:	200001a4 	.word	0x200001a4
 8003bec:	200001a2 	.word	0x200001a2

08003bf0 <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert_param(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 8003bfa:	1dbb      	adds	r3, r7, #6
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fe05 	bl	800380c <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <xMBMasterRTUReceiveFSM+0xac>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d841      	bhi.n	8003c90 <xMBMasterRTUReceiveFSM+0xa0>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <xMBMasterRTUReceiveFSM+0x24>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c31 	.word	0x08003c31
 8003c1c:	08003c63 	.word	0x08003c63
 8003c20:	08003c2b 	.word	0x08003c2b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 8003c24:	f7ff fe56 	bl	80038d4 <vMBMasterPortTimersT35Enable>
        break;
 8003c28:	e032      	b.n	8003c90 <xMBMasterRTUReceiveFSM+0xa0>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 8003c2a:	f7ff fe53 	bl	80038d4 <vMBMasterPortTimersT35Enable>
        break;
 8003c2e:	e02f      	b.n	8003c90 <xMBMasterRTUReceiveFSM+0xa0>
         */
    case STATE_M_RX_IDLE:
        /* In time of respond timeout,the receiver receive a frame.
         * Disable timer of respond timeout and change the transmiter state to idle.
         */
        vMBMasterPortTimersDisable( );
 8003c30:	f7ff fe72 	bl	8003918 <vMBMasterPortTimersDisable>
        eSndState = STATE_M_TX_IDLE;
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <xMBMasterRTUReceiveFSM+0xb0>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <xMBMasterRTUReceiveFSM+0xb4>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8003c40:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <xMBMasterRTUReceiveFSM+0xb4>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	b291      	uxth	r1, r2
 8003c4a:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <xMBMasterRTUReceiveFSM+0xb4>)
 8003c4c:	8011      	strh	r1, [r2, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	79b9      	ldrb	r1, [r7, #6]
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <xMBMasterRTUReceiveFSM+0xb8>)
 8003c54:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <xMBMasterRTUReceiveFSM+0xac>)
 8003c58:	2202      	movs	r2, #2
 8003c5a:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 8003c5c:	f7ff fe3a 	bl	80038d4 <vMBMasterPortTimersT35Enable>
        break;
 8003c60:	e016      	b.n	8003c90 <xMBMasterRTUReceiveFSM+0xa0>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <xMBMasterRTUReceiveFSM+0xb4>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2bff      	cmp	r3, #255	; 0xff
 8003c6a:	d80b      	bhi.n	8003c84 <xMBMasterRTUReceiveFSM+0x94>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <xMBMasterRTUReceiveFSM+0xb4>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	b291      	uxth	r1, r2
 8003c76:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <xMBMasterRTUReceiveFSM+0xb4>)
 8003c78:	8011      	strh	r1, [r2, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	79b9      	ldrb	r1, [r7, #6]
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <xMBMasterRTUReceiveFSM+0xb8>)
 8003c80:	5499      	strb	r1, [r3, r2]
 8003c82:	e002      	b.n	8003c8a <xMBMasterRTUReceiveFSM+0x9a>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <xMBMasterRTUReceiveFSM+0xac>)
 8003c86:	2203      	movs	r2, #3
 8003c88:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 8003c8a:	f7ff fe23 	bl	80038d4 <vMBMasterPortTimersT35Enable>
        break;
 8003c8e:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8003c90:	79fb      	ldrb	r3, [r7, #7]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200001a3 	.word	0x200001a3
 8003ca0:	200001a2 	.word	0x200001a2
 8003ca4:	200003ae 	.word	0x200003ae
 8003ca8:	200002a4 	.word	0x200002a4

08003cac <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	71fb      	strb	r3, [r7, #7]

    assert_param( eRcvState == STATE_M_RX_IDLE );

    switch ( eSndState )
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <xMBMasterRTUTransmitFSM+0x9c>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <xMBMasterRTUTransmitFSM+0x1a>
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d005      	beq.n	8003cd0 <xMBMasterRTUTransmitFSM+0x24>
            }
        }
        break;

    default:
        break;
 8003cc4:	e03a      	b.n	8003d3c <xMBMasterRTUTransmitFSM+0x90>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7ff fd43 	bl	8003754 <vMBMasterPortSerialEnable>
        break;
 8003cce:	e035      	b.n	8003d3c <xMBMasterRTUTransmitFSM+0x90>
        if( usMasterSndBufferCount != 0 )
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <xMBMasterRTUTransmitFSM+0xa0>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d013      	beq.n	8003d02 <xMBMasterRTUTransmitFSM+0x56>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <xMBMasterRTUTransmitFSM+0xa4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fd7a 	bl	80037dc <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <xMBMasterRTUTransmitFSM+0xa4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <xMBMasterRTUTransmitFSM+0xa4>)
 8003cf0:	6013      	str	r3, [r2, #0]
            usMasterSndBufferCount--;
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <xMBMasterRTUTransmitFSM+0xa0>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <xMBMasterRTUTransmitFSM+0xa0>)
 8003cfe:	801a      	strh	r2, [r3, #0]
        break;
 8003d00:	e01b      	b.n	8003d3a <xMBMasterRTUTransmitFSM+0x8e>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <xMBMasterRTUTransmitFSM+0xa8>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <xMBMasterRTUTransmitFSM+0xac>)
 8003d16:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7ff fd1a 	bl	8003754 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <xMBMasterRTUTransmitFSM+0x9c>)
 8003d22:	2202      	movs	r2, #2
 8003d24:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <xMBMasterRTUTransmitFSM+0xac>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d102      	bne.n	8003d36 <xMBMasterRTUTransmitFSM+0x8a>
                vMBMasterPortTimersConvertDelayEnable( );
 8003d30:	f7ff fde4 	bl	80038fc <vMBMasterPortTimersConvertDelayEnable>
        break;
 8003d34:	e001      	b.n	8003d3a <xMBMasterRTUTransmitFSM+0x8e>
                vMBMasterPortTimersRespondTimeoutEnable( );
 8003d36:	f7ff fde8 	bl	800390a <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 8003d3a:	bf00      	nop
    }

    return xNeedPoll;
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200001a2 	.word	0x200001a2
 8003d4c:	200003ac 	.word	0x200003ac
 8003d50:	200003a8 	.word	0x200003a8
 8003d54:	200001a4 	.word	0x200001a4
 8003d58:	200003b0 	.word	0x200003b0

08003d5c <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
    BOOL xNeedPoll = FALSE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	71fb      	strb	r3, [r7, #7]

    switch (eRcvState)
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <xMBMasterRTUTimerExpired+0xa8>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d012      	beq.n	8003d96 <xMBMasterRTUTimerExpired+0x3a>
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	dc19      	bgt.n	8003da8 <xMBMasterRTUTimerExpired+0x4c>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <xMBMasterRTUTimerExpired+0x22>
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d006      	beq.n	8003d8a <xMBMasterRTUTimerExpired+0x2e>
        /* Function called in an illegal state. */
    default:
        assert_param(
                ( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
                ( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
        break;
 8003d7c:	e014      	b.n	8003da8 <xMBMasterRTUTimerExpired+0x4c>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f7ff fc3e 	bl	8003600 <xMBMasterPortEventPost>
 8003d84:	4603      	mov	r3, r0
 8003d86:	71fb      	strb	r3, [r7, #7]
        break;
 8003d88:	e00f      	b.n	8003daa <xMBMasterRTUTimerExpired+0x4e>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f7ff fc38 	bl	8003600 <xMBMasterPortEventPost>
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
        break;
 8003d94:	e009      	b.n	8003daa <xMBMasterRTUTimerExpired+0x4e>
        vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f7ff fbd6 	bl	8003548 <vMBMasterSetErrorType>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8003d9c:	2010      	movs	r0, #16
 8003d9e:	f7ff fc2f 	bl	8003600 <xMBMasterPortEventPost>
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
        break;
 8003da6:	e000      	b.n	8003daa <xMBMasterRTUTimerExpired+0x4e>
        break;
 8003da8:	bf00      	nop
    }
    eRcvState = STATE_M_RX_IDLE;
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <xMBMasterRTUTimerExpired+0xa8>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]

    switch (eSndState)
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <xMBMasterRTUTimerExpired+0xac>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d10d      	bne.n	8003dd6 <xMBMasterRTUTimerExpired+0x7a>
    {
        /* A frame was send finish and convert delay or respond timeout expired.
         * If the frame is broadcast,The master will idle,and if the frame is not
         * broadcast.Notify the listener process error.*/
    case STATE_M_TX_XFWR:
        if ( xFrameIsBroadcast == FALSE ) {
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <xMBMasterRTUTimerExpired+0xb0>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <xMBMasterRTUTimerExpired+0x7e>
            vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7ff fbbf 	bl	8003548 <vMBMasterSetErrorType>
            xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 8003dca:	2010      	movs	r0, #16
 8003dcc:	f7ff fc18 	bl	8003600 <xMBMasterPortEventPost>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
        }
        break;
 8003dd4:	e001      	b.n	8003dda <xMBMasterRTUTimerExpired+0x7e>
        /* Function called in an illegal state. */
    default:
        assert_param(
                ( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <xMBMasterRTUTimerExpired+0x80>
        break;
 8003dda:	bf00      	nop
    }
    eSndState = STATE_M_TX_IDLE;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <xMBMasterRTUTimerExpired+0xac>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]

    vMBMasterPortTimersDisable( );
 8003de2:	f7ff fd99 	bl	8003918 <vMBMasterPortTimersDisable>
    /* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
    if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <xMBMasterRTUTimerExpired+0xb4>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d104      	bne.n	8003dfa <xMBMasterRTUTimerExpired+0x9e>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8003df0:	2004      	movs	r0, #4
 8003df2:	f7ff fc05 	bl	8003600 <xMBMasterPortEventPost>
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
    }

    return xNeedPoll;
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200001a3 	.word	0x200001a3
 8003e08:	200001a2 	.word	0x200001a2
 8003e0c:	200003b0 	.word	0x200003b0
 8003e10:	200003b1 	.word	0x200003b1

08003e14 <vMBMasterGetPDUSndBuf>:
    *pucFrame = ( UCHAR * ) ucMasterRTUSndBuf;
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
    *pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <vMBMasterGetPDUSndBuf+0x18>)
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	200001a5 	.word	0x200001a5

08003e30 <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
    usMasterSendPDULength = SendPDULength;
 8003e3a:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <vMBMasterSetPDUSndLength+0x1c>)
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	8013      	strh	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	200003a4 	.word	0x200003a4

08003e50 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
    return usMasterSendPDULength;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <usMBMasterGetPDUSndLength+0x14>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	200003a4 	.word	0x200003a4

08003e68 <vMBMasterSetCurTimerMode>:

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
    eMasterCurTimerMode = eMBTimerMode;
 8003e72:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <vMBMasterSetCurTimerMode+0x1c>)
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	7013      	strb	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	200003b1 	.word	0x200003b1

08003e88 <xMBMasterRequestIsBroadcast>:

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
    return xFrameIsBroadcast;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <xMBMasterRequestIsBroadcast+0x14>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b2db      	uxtb	r3, r3
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	200003b0 	.word	0x200003b0

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	4d0c      	ldr	r5, [pc, #48]	; (8003ed8 <__libc_init_array+0x38>)
 8003ea6:	4c0d      	ldr	r4, [pc, #52]	; (8003edc <__libc_init_array+0x3c>)
 8003ea8:	1b64      	subs	r4, r4, r5
 8003eaa:	10a4      	asrs	r4, r4, #2
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	f000 f830 	bl	8003f14 <_init>
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	4d0a      	ldr	r5, [pc, #40]	; (8003ee0 <__libc_init_array+0x40>)
 8003eb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ee4 <__libc_init_array+0x44>)
 8003eba:	1b64      	subs	r4, r4, r5
 8003ebc:	10a4      	asrs	r4, r4, #2
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08004154 	.word	0x08004154
 8003edc:	08004154 	.word	0x08004154
 8003ee0:	08004154 	.word	0x08004154
 8003ee4:	08004158 	.word	0x08004158

08003ee8 <memcpy>:
 8003ee8:	440a      	add	r2, r1
 8003eea:	4291      	cmp	r1, r2
 8003eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ef0:	d100      	bne.n	8003ef4 <memcpy+0xc>
 8003ef2:	4770      	bx	lr
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efa:	4291      	cmp	r1, r2
 8003efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f00:	d1f9      	bne.n	8003ef6 <memcpy+0xe>
 8003f02:	bd10      	pop	{r4, pc}

08003f04 <memset>:
 8003f04:	4603      	mov	r3, r0
 8003f06:	4402      	add	r2, r0
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d100      	bne.n	8003f0e <memset+0xa>
 8003f0c:	4770      	bx	lr
 8003f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f12:	e7f9      	b.n	8003f08 <memset+0x4>

08003f14 <_init>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr

08003f20 <_fini>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr
