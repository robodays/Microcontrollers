
SPI_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c0  080069c0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080069c0  080069c0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069c0  080069c0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080069c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002310  20000024  080069ec  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002334  080069ec  00022334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096ef  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e99  00000000  00000000  0002973c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001721b  00000000  00000000  0002c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb88  00000000  00000000  000439fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fe3  00000000  00000000  00050583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002514  00000000  00000000  000d25b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080063d0 	.word	0x080063d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080063d0 	.word	0x080063d0

0800014c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4803      	ldr	r0, [pc, #12]	; (8000164 <SELECT+0x18>)
 8000156:	f001 f973 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800015a:	2001      	movs	r0, #1
 800015c:	f000 fee4 	bl	8000f28 <HAL_Delay>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40010800 	.word	0x40010800

08000168 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2110      	movs	r1, #16
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <DESELECT+0x18>)
 8000172:	f001 f965 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000176:	2001      	movs	r0, #1
 8000178:	f000 fed6 	bl	8000f28 <HAL_Delay>
}
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40010800 	.word	0x40010800

08000184 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800018e:	bf00      	nop
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <SPI_TxByte+0x30>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	f003 0302 	and.w	r3, r3, #2
 800019a:	2b02      	cmp	r3, #2
 800019c:	d1f8      	bne.n	8000190 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	2201      	movs	r2, #1
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <SPI_TxByte+0x30>)
 80001a6:	f001 fdcf 	bl	8001d48 <HAL_SPI_Transmit>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	200020a4 	.word	0x200020a4

080001b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001c4:	bf00      	nop
 80001c6:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <SPI_TxBuffer+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	f003 0302 	and.w	r3, r3, #2
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d1f8      	bne.n	80001c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001d4:	887a      	ldrh	r2, [r7, #2]
 80001d6:	2364      	movs	r3, #100	; 0x64
 80001d8:	6879      	ldr	r1, [r7, #4]
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_TxBuffer+0x30>)
 80001dc:	f001 fdb4 	bl	8001d48 <HAL_SPI_Transmit>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200020a4 	.word	0x200020a4

080001ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80001f2:	23ff      	movs	r3, #255	; 0xff
 80001f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001f6:	bf00      	nop
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <SPI_RxByte+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b02      	cmp	r3, #2
 8000204:	d1f8      	bne.n	80001f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000206:	1dba      	adds	r2, r7, #6
 8000208:	1df9      	adds	r1, r7, #7
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <SPI_RxByte+0x34>)
 8000212:	f001 fed5 	bl	8001fc0 <HAL_SPI_TransmitReceive>

	return data;
 8000216:	79bb      	ldrb	r3, [r7, #6]
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200020a4 	.word	0x200020a4

08000224 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800022c:	f7ff ffde 	bl	80001ec <SPI_RxByte>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	701a      	strb	r2, [r3, #0]
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <SD_ReadyWait+0x30>)
 8000248:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800024c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800024e:	f7ff ffcd 	bl	80001ec <SPI_RxByte>
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2bff      	cmp	r3, #255	; 0xff
 800025a:	d003      	beq.n	8000264 <SD_ReadyWait+0x24>
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <SD_ReadyWait+0x30>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f4      	bne.n	800024e <SD_ReadyWait+0xe>

	return res;
 8000264:	79fb      	ldrb	r3, [r7, #7]
}
 8000266:	4618      	mov	r0, r3
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000042 	.word	0x20000042

08000274 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800027a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800027e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000280:	f7ff ff72 	bl	8000168 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	e005      	b.n	8000296 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800028a:	20ff      	movs	r0, #255	; 0xff
 800028c:	f7ff ff7a 	bl	8000184 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	3301      	adds	r3, #1
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	2b09      	cmp	r3, #9
 800029a:	ddf6      	ble.n	800028a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800029c:	f7ff ff56 	bl	800014c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80002a0:	2340      	movs	r3, #64	; 0x40
 80002a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80002b4:	2395      	movs	r3, #149	; 0x95
 80002b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80002b8:	463b      	mov	r3, r7
 80002ba:	2106      	movs	r1, #6
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff7b 	bl	80001b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80002c2:	e002      	b.n	80002ca <SD_PowerOn+0x56>
	{
		cnt--;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80002ca:	f7ff ff8f 	bl	80001ec <SPI_RxByte>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d002      	beq.n	80002da <SD_PowerOn+0x66>
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f4      	bne.n	80002c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80002da:	f7ff ff45 	bl	8000168 <DESELECT>
	SPI_TxByte(0XFF);
 80002de:	20ff      	movs	r0, #255	; 0xff
 80002e0:	f7ff ff50 	bl	8000184 <SPI_TxByte>

	PowerFlag = 1;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <SD_PowerOn+0x80>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000045 	.word	0x20000045

080002f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <SD_PowerOff+0x14>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000045 	.word	0x20000045

08000310 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000314:	4b02      	ldr	r3, [pc, #8]	; (8000320 <SD_CheckPower+0x10>)
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	4618      	mov	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	20000045 	.word	0x20000045

08000324 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <SD_RxDataBlock+0x58>)
 8000330:	22c8      	movs	r2, #200	; 0xc8
 8000332:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000334:	f7ff ff5a 	bl	80001ec <SPI_RxByte>
 8000338:	4603      	mov	r3, r0
 800033a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2bff      	cmp	r3, #255	; 0xff
 8000340:	d103      	bne.n	800034a <SD_RxDataBlock+0x26>
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <SD_RxDataBlock+0x58>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f4      	bne.n	8000334 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	2bfe      	cmp	r3, #254	; 0xfe
 800034e:	d001      	beq.n	8000354 <SD_RxDataBlock+0x30>
 8000350:	2300      	movs	r3, #0
 8000352:	e00f      	b.n	8000374 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff62 	bl	8000224 <SPI_RxBytePtr>
	} while(len--);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	603a      	str	r2, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f4      	bne.n	8000354 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800036a:	f7ff ff3f 	bl	80001ec <SPI_RxByte>
	SPI_RxByte();
 800036e:	f7ff ff3d 	bl	80001ec <SPI_RxByte>

	return TRUE;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000040 	.word	0x20000040

08000380 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000390:	f7ff ff56 	bl	8000240 <SD_ReadyWait>
 8000394:	4603      	mov	r3, r0
 8000396:	2bff      	cmp	r3, #255	; 0xff
 8000398:	d001      	beq.n	800039e <SD_TxDataBlock+0x1e>
 800039a:	2300      	movs	r3, #0
 800039c:	e02f      	b.n	80003fe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff feef 	bl	8000184 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2bfd      	cmp	r3, #253	; 0xfd
 80003aa:	d020      	beq.n	80003ee <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff01 	bl	80001b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80003b6:	f7ff ff19 	bl	80001ec <SPI_RxByte>
		SPI_RxByte();
 80003ba:	f7ff ff17 	bl	80001ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80003be:	e00b      	b.n	80003d8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80003c0:	f7ff ff14 	bl	80001ec <SPI_RxByte>
 80003c4:	4603      	mov	r3, r0
 80003c6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	f003 031f 	and.w	r3, r3, #31
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d006      	beq.n	80003e0 <SD_TxDataBlock+0x60>
			i++;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	3301      	adds	r3, #1
 80003d6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	2b40      	cmp	r3, #64	; 0x40
 80003dc:	d9f0      	bls.n	80003c0 <SD_TxDataBlock+0x40>
 80003de:	e000      	b.n	80003e2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80003e0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80003e2:	bf00      	nop
 80003e4:	f7ff ff02 	bl	80001ec <SPI_RxByte>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0fa      	beq.n	80003e4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	f003 031f 	and.w	r3, r3, #31
 80003f4:	2b05      	cmp	r3, #5
 80003f6:	d101      	bne.n	80003fc <SD_TxDataBlock+0x7c>
 80003f8:	2301      	movs	r3, #1
 80003fa:	e000      	b.n	80003fe <SD_TxDataBlock+0x7e>

	return FALSE;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	6039      	str	r1, [r7, #0]
 8000410:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000412:	f7ff ff15 	bl	8000240 <SD_ReadyWait>
 8000416:	4603      	mov	r3, r0
 8000418:	2bff      	cmp	r3, #255	; 0xff
 800041a:	d001      	beq.n	8000420 <SD_SendCmd+0x1a>
 800041c:	23ff      	movs	r3, #255	; 0xff
 800041e:	e042      	b.n	80004a6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff feae 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	0e1b      	lsrs	r3, r3, #24
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fea8 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	0c1b      	lsrs	r3, r3, #16
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fea2 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b2db      	uxtb	r3, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe9c 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe97 	bl	8000184 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b40      	cmp	r3, #64	; 0x40
 800045a:	d102      	bne.n	8000462 <SD_SendCmd+0x5c>
 800045c:	2395      	movs	r3, #149	; 0x95
 800045e:	73fb      	strb	r3, [r7, #15]
 8000460:	e007      	b.n	8000472 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b48      	cmp	r3, #72	; 0x48
 8000466:	d102      	bne.n	800046e <SD_SendCmd+0x68>
 8000468:	2387      	movs	r3, #135	; 0x87
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	e001      	b.n	8000472 <SD_SendCmd+0x6c>
	else crc = 1;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fe85 	bl	8000184 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b4c      	cmp	r3, #76	; 0x4c
 800047e:	d101      	bne.n	8000484 <SD_SendCmd+0x7e>
 8000480:	f7ff feb4 	bl	80001ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000484:	230a      	movs	r3, #10
 8000486:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000488:	f7ff feb0 	bl	80001ec <SPI_RxByte>
 800048c:	4603      	mov	r3, r0
 800048e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000490:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da05      	bge.n	80004a4 <SD_SendCmd+0x9e>
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	3b01      	subs	r3, #1
 800049c:	73bb      	strb	r3, [r7, #14]
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1f1      	bne.n	8000488 <SD_SendCmd+0x82>

	return res;
 80004a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SD_disk_initialize+0x14>
 80004c0:	2301      	movs	r3, #1
 80004c2:	e0d1      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80004c4:	4b6a      	ldr	r3, [pc, #424]	; (8000670 <SD_disk_initialize+0x1c0>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <SD_disk_initialize+0x2a>
 80004d2:	4b67      	ldr	r3, [pc, #412]	; (8000670 <SD_disk_initialize+0x1c0>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	e0c6      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80004da:	f7ff fecb 	bl	8000274 <SD_PowerOn>

	/* slave select */
	SELECT();
 80004de:	f7ff fe35 	bl	800014c <SELECT>

	/* check disk type */
	type = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80004e6:	2100      	movs	r1, #0
 80004e8:	2040      	movs	r0, #64	; 0x40
 80004ea:	f7ff ff8c 	bl	8000406 <SD_SendCmd>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 80a1 	bne.w	8000638 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80004f6:	4b5f      	ldr	r3, [pc, #380]	; (8000674 <SD_disk_initialize+0x1c4>)
 80004f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80004fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000502:	2048      	movs	r0, #72	; 0x48
 8000504:	f7ff ff7f 	bl	8000406 <SD_SendCmd>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d155      	bne.n	80005ba <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e00c      	b.n	800052e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000514:	7bfc      	ldrb	r4, [r7, #15]
 8000516:	f7ff fe69 	bl	80001ec <SPI_RxByte>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	f104 0310 	add.w	r3, r4, #16
 8000522:	443b      	add	r3, r7
 8000524:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	3301      	adds	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d9ef      	bls.n	8000514 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000534:	7abb      	ldrb	r3, [r7, #10]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d17e      	bne.n	8000638 <SD_disk_initialize+0x188>
 800053a:	7afb      	ldrb	r3, [r7, #11]
 800053c:	2baa      	cmp	r3, #170	; 0xaa
 800053e:	d17b      	bne.n	8000638 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000540:	2100      	movs	r1, #0
 8000542:	2077      	movs	r0, #119	; 0x77
 8000544:	f7ff ff5f 	bl	8000406 <SD_SendCmd>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d807      	bhi.n	800055e <SD_disk_initialize+0xae>
 800054e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000552:	2069      	movs	r0, #105	; 0x69
 8000554:	f7ff ff57 	bl	8000406 <SD_SendCmd>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <SD_disk_initialize+0x1c4>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1ec      	bne.n	8000540 <SD_disk_initialize+0x90>
 8000566:	e000      	b.n	800056a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000568:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800056a:	4b42      	ldr	r3, [pc, #264]	; (8000674 <SD_disk_initialize+0x1c4>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d062      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000572:	2100      	movs	r1, #0
 8000574:	207a      	movs	r0, #122	; 0x7a
 8000576:	f7ff ff46 	bl	8000406 <SD_SendCmd>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d15b      	bne.n	8000638 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e00c      	b.n	80005a0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000586:	7bfc      	ldrb	r4, [r7, #15]
 8000588:	f7ff fe30 	bl	80001ec <SPI_RxByte>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	f104 0310 	add.w	r3, r4, #16
 8000594:	443b      	add	r3, r7
 8000596:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	3301      	adds	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d9ef      	bls.n	8000586 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005a6:	7a3b      	ldrb	r3, [r7, #8]
 80005a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SD_disk_initialize+0x104>
 80005b0:	230c      	movs	r3, #12
 80005b2:	e000      	b.n	80005b6 <SD_disk_initialize+0x106>
 80005b4:	2304      	movs	r3, #4
 80005b6:	73bb      	strb	r3, [r7, #14]
 80005b8:	e03e      	b.n	8000638 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005ba:	2100      	movs	r1, #0
 80005bc:	2077      	movs	r0, #119	; 0x77
 80005be:	f7ff ff22 	bl	8000406 <SD_SendCmd>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d808      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005c8:	2100      	movs	r1, #0
 80005ca:	2069      	movs	r0, #105	; 0x69
 80005cc:	f7ff ff1b 	bl	8000406 <SD_SendCmd>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d801      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005d6:	2302      	movs	r3, #2
 80005d8:	e000      	b.n	80005dc <SD_disk_initialize+0x12c>
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d10e      	bne.n	8000602 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005e4:	2100      	movs	r1, #0
 80005e6:	2077      	movs	r0, #119	; 0x77
 80005e8:	f7ff ff0d 	bl	8000406 <SD_SendCmd>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d80e      	bhi.n	8000610 <SD_disk_initialize+0x160>
 80005f2:	2100      	movs	r1, #0
 80005f4:	2069      	movs	r0, #105	; 0x69
 80005f6:	f7ff ff06 	bl	8000406 <SD_SendCmd>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d107      	bne.n	8000610 <SD_disk_initialize+0x160>
 8000600:	e00c      	b.n	800061c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000602:	2100      	movs	r1, #0
 8000604:	2041      	movs	r0, #65	; 0x41
 8000606:	f7ff fefe 	bl	8000406 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d004      	beq.n	800061a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <SD_disk_initialize+0x1c4>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1e2      	bne.n	80005de <SD_disk_initialize+0x12e>
 8000618:	e000      	b.n	800061c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800061a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <SD_disk_initialize+0x1c4>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <SD_disk_initialize+0x184>
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	2050      	movs	r0, #80	; 0x50
 800062a:	f7ff feec 	bl	8000406 <SD_SendCmd>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <SD_disk_initialize+0x1c8>)
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800063e:	f7ff fd93 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000642:	f7ff fdd3 	bl	80001ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <SD_disk_initialize+0x1c0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SD_disk_initialize+0x1c0>)
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e001      	b.n	8000662 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800065e:	f7ff fe4b 	bl	80002f8 <SD_PowerOff>
	}

	return Stat;
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <SD_disk_initialize+0x1c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000040 	.word	0x20000040
 8000678:	20000044 	.word	0x20000044

0800067c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SD_disk_status+0x14>
 800068c:	2301      	movs	r3, #1
 800068e:	e002      	b.n	8000696 <SD_disk_status+0x1a>
	return Stat;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <SD_disk_status+0x24>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000000 	.word	0x20000000

080006a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <SD_disk_read+0x1c>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <SD_disk_read+0x20>
 80006c0:	2304      	movs	r3, #4
 80006c2:	e051      	b.n	8000768 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <SD_disk_read+0xcc>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SD_disk_read+0x32>
 80006d2:	2303      	movs	r3, #3
 80006d4:	e048      	b.n	8000768 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SD_disk_read+0xd0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <SD_disk_read+0x44>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	025b      	lsls	r3, r3, #9
 80006e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80006e8:	f7ff fd30 	bl	800014c <SELECT>

	if (count == 1)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d111      	bne.n	8000716 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	2051      	movs	r0, #81	; 0x51
 80006f6:	f7ff fe86 	bl	8000406 <SD_SendCmd>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d129      	bne.n	8000754 <SD_disk_read+0xb0>
 8000700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000704:	68b8      	ldr	r0, [r7, #8]
 8000706:	f7ff fe0d 	bl	8000324 <SD_RxDataBlock>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d021      	beq.n	8000754 <SD_disk_read+0xb0>
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	e01e      	b.n	8000754 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2052      	movs	r0, #82	; 0x52
 800071a:	f7ff fe74 	bl	8000406 <SD_SendCmd>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d117      	bne.n	8000754 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f7ff fdfb 	bl	8000324 <SD_RxDataBlock>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00a      	beq.n	800074a <SD_disk_read+0xa6>
				buff += 512;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800073a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1ed      	bne.n	8000724 <SD_disk_read+0x80>
 8000748:	e000      	b.n	800074c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800074a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	204c      	movs	r0, #76	; 0x4c
 8000750:	f7ff fe59 	bl	8000406 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000754:	f7ff fd08 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000758:	f7ff fd48 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000044 	.word	0x20000044

08000778 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <SD_disk_write+0x1c>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <SD_disk_write+0x20>
 8000794:	2304      	movs	r3, #4
 8000796:	e06b      	b.n	8000870 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <SD_disk_write+0x100>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SD_disk_write+0x32>
 80007a6:	2303      	movs	r3, #3
 80007a8:	e062      	b.n	8000870 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <SD_disk_write+0x100>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SD_disk_write+0x44>
 80007b8:	2302      	movs	r3, #2
 80007ba:	e059      	b.n	8000870 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <SD_disk_write+0x104>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <SD_disk_write+0x56>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	025b      	lsls	r3, r3, #9
 80007cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80007ce:	f7ff fcbd 	bl	800014c <SELECT>

	if (count == 1)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d110      	bne.n	80007fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	2058      	movs	r0, #88	; 0x58
 80007dc:	f7ff fe13 	bl	8000406 <SD_SendCmd>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d13a      	bne.n	800085c <SD_disk_write+0xe4>
 80007e6:	21fe      	movs	r1, #254	; 0xfe
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f7ff fdc9 	bl	8000380 <SD_TxDataBlock>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d033      	beq.n	800085c <SD_disk_write+0xe4>
			count = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	e030      	b.n	800085c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <SD_disk_write+0x104>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000806:	2100      	movs	r1, #0
 8000808:	2077      	movs	r0, #119	; 0x77
 800080a:	f7ff fdfc 	bl	8000406 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	2057      	movs	r0, #87	; 0x57
 8000812:	f7ff fdf8 	bl	8000406 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	2059      	movs	r0, #89	; 0x59
 800081a:	f7ff fdf4 	bl	8000406 <SD_SendCmd>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d11b      	bne.n	800085c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000824:	21fc      	movs	r1, #252	; 0xfc
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f7ff fdaa 	bl	8000380 <SD_TxDataBlock>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <SD_disk_write+0xd0>
				buff += 512;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000838:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ee      	bne.n	8000824 <SD_disk_write+0xac>
 8000846:	e000      	b.n	800084a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000848:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800084a:	21fd      	movs	r1, #253	; 0xfd
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fd97 	bl	8000380 <SD_TxDataBlock>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <SD_disk_write+0xe4>
			{
				count = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800085c:	f7ff fc84 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000860:	f7ff fcc4 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000044 	.word	0x20000044

08000880 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	603a      	str	r2, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	460b      	mov	r3, r1
 800088e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SD_disk_ioctl+0x1e>
 800089a:	2304      	movs	r3, #4
 800089c:	e115      	b.n	8000aca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b05      	cmp	r3, #5
 80008a8:	d124      	bne.n	80008f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d012      	beq.n	80008d8 <SD_disk_ioctl+0x58>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	dc1a      	bgt.n	80008ec <SD_disk_ioctl+0x6c>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <SD_disk_ioctl+0x40>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d006      	beq.n	80008cc <SD_disk_ioctl+0x4c>
 80008be:	e015      	b.n	80008ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80008c0:	f7ff fd1a 	bl	80002f8 <SD_PowerOff>
			res = RES_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ca:	e0fc      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80008cc:	f7ff fcd2 	bl	8000274 <SD_PowerOn>
			res = RES_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008d6:	e0f6      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	1c5c      	adds	r4, r3, #1
 80008dc:	f7ff fd18 	bl	8000310 <SD_CheckPower>
 80008e0:	4603      	mov	r3, r0
 80008e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ea:	e0ec      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80008ec:	2304      	movs	r3, #4
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008f2:	e0e8      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008f4:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <SD_disk_ioctl+0x254>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SD_disk_ioctl+0x86>
 8000902:	2303      	movs	r3, #3
 8000904:	e0e1      	b.n	8000aca <SD_disk_ioctl+0x24a>

		SELECT();
 8000906:	f7ff fc21 	bl	800014c <SELECT>

		switch (ctrl)
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	2b0d      	cmp	r3, #13
 800090e:	f200 80cb 	bhi.w	8000aa8 <SD_disk_ioctl+0x228>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <SD_disk_ioctl+0x98>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000a13 	.word	0x08000a13
 800091c:	08000951 	.word	0x08000951
 8000920:	08000a03 	.word	0x08000a03
 8000924:	08000aa9 	.word	0x08000aa9
 8000928:	08000aa9 	.word	0x08000aa9
 800092c:	08000aa9 	.word	0x08000aa9
 8000930:	08000aa9 	.word	0x08000aa9
 8000934:	08000aa9 	.word	0x08000aa9
 8000938:	08000aa9 	.word	0x08000aa9
 800093c:	08000aa9 	.word	0x08000aa9
 8000940:	08000aa9 	.word	0x08000aa9
 8000944:	08000a25 	.word	0x08000a25
 8000948:	08000a49 	.word	0x08000a49
 800094c:	08000a6d 	.word	0x08000a6d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000950:	2100      	movs	r1, #0
 8000952:	2049      	movs	r0, #73	; 0x49
 8000954:	f7ff fd57 	bl	8000406 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	f040 80a8 	bne.w	8000ab0 <SD_disk_ioctl+0x230>
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2110      	movs	r1, #16
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fcdc 	bl	8000324 <SD_RxDataBlock>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 809e 	beq.w	8000ab0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	099b      	lsrs	r3, r3, #6
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d10e      	bne.n	800099c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800097e:	7d7b      	ldrb	r3, [r7, #21]
 8000980:	b29a      	uxth	r2, r3
 8000982:	7d3b      	ldrb	r3, [r7, #20]
 8000984:	b29b      	uxth	r3, r3
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29b      	uxth	r3, r3
 800098a:	4413      	add	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000992:	8bfb      	ldrh	r3, [r7, #30]
 8000994:	029a      	lsls	r2, r3, #10
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e02e      	b.n	80009fa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800099c:	7c7b      	ldrb	r3, [r7, #17]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7dbb      	ldrb	r3, [r7, #22]
 80009a6:	09db      	lsrs	r3, r3, #7
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	7d7b      	ldrb	r3, [r7, #21]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0306 	and.w	r3, r3, #6
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3302      	adds	r3, #2
 80009c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009c4:	7d3b      	ldrb	r3, [r7, #20]
 80009c6:	099b      	lsrs	r3, r3, #6
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	7cbb      	ldrb	r3, [r7, #18]
 80009da:	029b      	lsls	r3, r3, #10
 80009dc:	b29b      	uxth	r3, r3
 80009de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	3301      	adds	r3, #1
 80009ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80009ec:	8bfa      	ldrh	r2, [r7, #30]
 80009ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009f2:	3b09      	subs	r3, #9
 80009f4:	409a      	lsls	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000a00:	e056      	b.n	8000ab0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a10:	e055      	b.n	8000abe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a12:	f7ff fc15 	bl	8000240 <SD_ReadyWait>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2bff      	cmp	r3, #255	; 0xff
 8000a1a:	d14b      	bne.n	8000ab4 <SD_disk_ioctl+0x234>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a22:	e047      	b.n	8000ab4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a24:	2100      	movs	r1, #0
 8000a26:	2049      	movs	r0, #73	; 0x49
 8000a28:	f7ff fced 	bl	8000406 <SD_SendCmd>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d142      	bne.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a32:	2110      	movs	r1, #16
 8000a34:	6a38      	ldr	r0, [r7, #32]
 8000a36:	f7ff fc75 	bl	8000324 <SD_RxDataBlock>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d03b      	beq.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a46:	e037      	b.n	8000ab8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a48:	2100      	movs	r1, #0
 8000a4a:	204a      	movs	r0, #74	; 0x4a
 8000a4c:	f7ff fcdb 	bl	8000406 <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d132      	bne.n	8000abc <SD_disk_ioctl+0x23c>
 8000a56:	2110      	movs	r1, #16
 8000a58:	6a38      	ldr	r0, [r7, #32]
 8000a5a:	f7ff fc63 	bl	8000324 <SD_RxDataBlock>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d02b      	beq.n	8000abc <SD_disk_ioctl+0x23c>
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a6a:	e027      	b.n	8000abc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	207a      	movs	r0, #122	; 0x7a
 8000a70:	f7ff fcc9 	bl	8000406 <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d116      	bne.n	8000aa8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a80:	e00b      	b.n	8000a9a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000a82:	6a3c      	ldr	r4, [r7, #32]
 8000a84:	1c63      	adds	r3, r4, #1
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	f7ff fbb0 	bl	80001ec <SPI_RxByte>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a94:	3301      	adds	r3, #1
 8000a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d9ef      	bls.n	8000a82 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000aae:	e006      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab0:	bf00      	nop
 8000ab2:	e004      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab4:	bf00      	nop
 8000ab6:	e002      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab8:	bf00      	nop
 8000aba:	e000      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000abc:	bf00      	nop
		}

		DESELECT();
 8000abe:	f7ff fb53 	bl	8000168 <DESELECT>
		SPI_RxByte();
 8000ac2:	f7ff fb93 	bl	80001ec <SPI_RxByte>
	}

	return res;
 8000ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	372c      	adds	r7, #44	; 0x2c
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 f9c2 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f82e 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 f89e 	bl	8000c24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ae8:	f000 f866 	bl	8000bb8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000aec:	f001 fcb0 	bl	8002450 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af4:	f000 fa18 	bl	8000f28 <HAL_Delay>
    f_mount(&fs, "", 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	490c      	ldr	r1, [pc, #48]	; (8000b2c <main+0x54>)
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <main+0x58>)
 8000afe:	f004 f97d 	bl	8004dfc <f_mount>
    f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000b02:	2213      	movs	r2, #19
 8000b04:	490b      	ldr	r1, [pc, #44]	; (8000b34 <main+0x5c>)
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <main+0x60>)
 8000b08:	f004 f9c2 	bl	8004e90 <f_open>
    f_lseek(&fil, fil.fsize);
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <main+0x60>)
 8000b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4808      	ldr	r0, [pc, #32]	; (8000b38 <main+0x60>)
 8000b18:	f005 f804 	bl	8005b24 <f_lseek>
    f_puts("Hello, WORLD\n", &fil);
 8000b1c:	4906      	ldr	r1, [pc, #24]	; (8000b38 <main+0x60>)
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <main+0x64>)
 8000b20:	f005 fb2e 	bl	8006180 <f_puts>
    f_close(&fil);
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <main+0x60>)
 8000b26:	f004 ffd2 	bl	8005ace <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <main+0x52>
 8000b2c:	080063e8 	.word	0x080063e8
 8000b30:	20000048 	.word	0x20000048
 8000b34:	080063ec 	.word	0x080063ec
 8000b38:	20001078 	.word	0x20001078
 8000b3c:	080063f8 	.word	0x080063f8

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b090      	sub	sp, #64	; 0x40
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	2228      	movs	r2, #40	; 0x28
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 fc36 	bl	80063c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b66:	2301      	movs	r3, #1
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fc7a 	bl	8001470 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b82:	f000 f881 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fee8 	bl	8001974 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000baa:	f000 f86d 	bl	8000c88 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3740      	adds	r7, #64	; 0x40
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MX_SPI1_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000c04:	220a      	movs	r2, #10
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_SPI1_Init+0x64>)
 8000c0a:	f001 f819 	bl	8001c40 <HAL_SPI_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c14:	f000 f838 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200020a4 	.word	0x200020a4
 8000c20:	40013000 	.word	0x40013000

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_GPIO_Init+0x5c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <MX_GPIO_Init+0x5c>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_GPIO_Init+0x5c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2110      	movs	r1, #16
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <MX_GPIO_Init+0x60>)
 8000c56:	f000 fbf3 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2302      	movs	r3, #2
 8000c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_GPIO_Init+0x60>)
 8000c72:	f000 fa61 	bl	8001138 <HAL_GPIO_Init>

}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010800 	.word	0x40010800

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d12f      	bne.n	8000d78 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480b      	ldr	r0, [pc, #44]	; (8000d88 <HAL_SPI_MspInit+0x90>)
 8000d5c:	f000 f9ec 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_SPI_MspInit+0x90>)
 8000d74:	f000 f9e0 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010800 	.word	0x40010800

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <SysTick_Handler+0x34>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <SysTick_Handler+0x18>
		Timer1--;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <SysTick_Handler+0x34>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <SysTick_Handler+0x34>)
 8000de6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SysTick_Handler+0x38>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d005      	beq.n	8000dfc <SysTick_Handler+0x2c>
		Timer2--;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Handler+0x38>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <SysTick_Handler+0x38>)
 8000dfa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f878 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000040 	.word	0x20000040
 8000e08:	20000042 	.word	0x20000042

08000e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	; (8000e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e3e:	f7ff ffe5 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f005 fa99 	bl	8006378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e46:	f7ff fe47 	bl	8000ad8 <main>
  bx lr
 8000e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e54:	080069c8 	.word	0x080069c8
  ldr r2, =_sbss
 8000e58:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000e5c:	20002334 	.word	0x20002334

08000e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_2_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x28>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f92b 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff ff08 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f935 	bl	800111e <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f90b 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000004 	.word	0x20000004
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000008 	.word	0x20000008

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x1c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x20>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <HAL_IncTick+0x20>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	2000000c 	.word	0x2000000c
 8000f10:	200020fc 	.word	0x200020fc

08000f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <HAL_GetTick+0x10>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	200020fc 	.word	0x200020fc

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff fff0 	bl	8000f14 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffe0 	bl	8000f14 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000000c 	.word	0x2000000c

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff90 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff49 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff5e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff90 	bl	8001028 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5f 	bl	8000fd4 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb0 	bl	800108c <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b08b      	sub	sp, #44	; 0x2c
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e169      	b.n	8001420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800114c:	2201      	movs	r2, #1
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 8158 	bne.w	800141a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a9a      	ldr	r2, [pc, #616]	; (80013d8 <HAL_GPIO_Init+0x2a0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d05e      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001174:	4a98      	ldr	r2, [pc, #608]	; (80013d8 <HAL_GPIO_Init+0x2a0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d875      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 800117a:	4a98      	ldr	r2, [pc, #608]	; (80013dc <HAL_GPIO_Init+0x2a4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d058      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001180:	4a96      	ldr	r2, [pc, #600]	; (80013dc <HAL_GPIO_Init+0x2a4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d86f      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 8001186:	4a96      	ldr	r2, [pc, #600]	; (80013e0 <HAL_GPIO_Init+0x2a8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d052      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 800118c:	4a94      	ldr	r2, [pc, #592]	; (80013e0 <HAL_GPIO_Init+0x2a8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d869      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 8001192:	4a94      	ldr	r2, [pc, #592]	; (80013e4 <HAL_GPIO_Init+0x2ac>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d04c      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001198:	4a92      	ldr	r2, [pc, #584]	; (80013e4 <HAL_GPIO_Init+0x2ac>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d863      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 800119e:	4a92      	ldr	r2, [pc, #584]	; (80013e8 <HAL_GPIO_Init+0x2b0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d046      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 80011a4:	4a90      	ldr	r2, [pc, #576]	; (80013e8 <HAL_GPIO_Init+0x2b0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d85d      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d82a      	bhi.n	8001204 <HAL_GPIO_Init+0xcc>
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d859      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <HAL_GPIO_Init+0x80>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	08001233 	.word	0x08001233
 80011bc:	0800120d 	.word	0x0800120d
 80011c0:	0800121f 	.word	0x0800121f
 80011c4:	08001261 	.word	0x08001261
 80011c8:	08001267 	.word	0x08001267
 80011cc:	08001267 	.word	0x08001267
 80011d0:	08001267 	.word	0x08001267
 80011d4:	08001267 	.word	0x08001267
 80011d8:	08001267 	.word	0x08001267
 80011dc:	08001267 	.word	0x08001267
 80011e0:	08001267 	.word	0x08001267
 80011e4:	08001267 	.word	0x08001267
 80011e8:	08001267 	.word	0x08001267
 80011ec:	08001267 	.word	0x08001267
 80011f0:	08001267 	.word	0x08001267
 80011f4:	08001267 	.word	0x08001267
 80011f8:	08001267 	.word	0x08001267
 80011fc:	08001215 	.word	0x08001215
 8001200:	08001229 	.word	0x08001229
 8001204:	4a79      	ldr	r2, [pc, #484]	; (80013ec <HAL_GPIO_Init+0x2b4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800120a:	e02c      	b.n	8001266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e029      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	3304      	adds	r3, #4
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	e024      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	3308      	adds	r3, #8
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e01f      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	330c      	adds	r3, #12
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e01a      	b.n	8001268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800123a:	2304      	movs	r3, #4
 800123c:	623b      	str	r3, [r7, #32]
          break;
 800123e:	e013      	b.n	8001268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001248:	2308      	movs	r3, #8
 800124a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	611a      	str	r2, [r3, #16]
          break;
 8001252:	e009      	b.n	8001268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001254:	2308      	movs	r3, #8
 8001256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	615a      	str	r2, [r3, #20]
          break;
 800125e:	e003      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x130>
          break;
 8001266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2bff      	cmp	r3, #255	; 0xff
 800126c:	d801      	bhi.n	8001272 <HAL_GPIO_Init+0x13a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e001      	b.n	8001276 <HAL_GPIO_Init+0x13e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3304      	adds	r3, #4
 8001276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d802      	bhi.n	8001284 <HAL_GPIO_Init+0x14c>
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x152>
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	3b08      	subs	r3, #8
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	210f      	movs	r1, #15
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	401a      	ands	r2, r3
 800129c:	6a39      	ldr	r1, [r7, #32]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80b1 	beq.w	800141a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b8:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a4c      	ldr	r2, [pc, #304]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d0:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <HAL_GPIO_Init+0x2bc>)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a40      	ldr	r2, [pc, #256]	; (80013f8 <HAL_GPIO_Init+0x2c0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d013      	beq.n	8001324 <HAL_GPIO_Init+0x1ec>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3f      	ldr	r2, [pc, #252]	; (80013fc <HAL_GPIO_Init+0x2c4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00d      	beq.n	8001320 <HAL_GPIO_Init+0x1e8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3e      	ldr	r2, [pc, #248]	; (8001400 <HAL_GPIO_Init+0x2c8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x1e4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <HAL_GPIO_Init+0x2cc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_GPIO_Init+0x1e0>
 8001314:	2303      	movs	r3, #3
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 8001318:	2304      	movs	r3, #4
 800131a:	e004      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 8001324:	2300      	movs	r3, #0
 8001326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001336:	492f      	ldr	r1, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x2bc>)
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	492c      	ldr	r1, [pc, #176]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	43db      	mvns	r3, r3
 8001366:	4928      	ldr	r1, [pc, #160]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 8001368:	4013      	ands	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4922      	ldr	r1, [pc, #136]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	491e      	ldr	r1, [pc, #120]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 8001390:	4013      	ands	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	4918      	ldr	r1, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4914      	ldr	r1, [pc, #80]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d021      	beq.n	800140c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
 80013d4:	e021      	b.n	800141a <HAL_GPIO_Init+0x2e2>
 80013d6:	bf00      	nop
 80013d8:	10320000 	.word	0x10320000
 80013dc:	10310000 	.word	0x10310000
 80013e0:	10220000 	.word	0x10220000
 80013e4:	10210000 	.word	0x10210000
 80013e8:	10120000 	.word	0x10120000
 80013ec:	10110000 	.word	0x10110000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	40011000 	.word	0x40011000
 8001404:	40011400 	.word	0x40011400
 8001408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_GPIO_Init+0x304>)
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	43db      	mvns	r3, r3
 8001414:	4909      	ldr	r1, [pc, #36]	; (800143c <HAL_GPIO_Init+0x304>)
 8001416:	4013      	ands	r3, r2
 8001418:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	3301      	adds	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	fa22 f303 	lsr.w	r3, r2, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	f47f ae8e 	bne.w	800114c <HAL_GPIO_Init+0x14>
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	372c      	adds	r7, #44	; 0x2c
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e272      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8087 	beq.w	800159e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b04      	cmp	r3, #4
 800149a:	d00c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149c:	4b8f      	ldr	r3, [pc, #572]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d112      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
 80014a8:	4b8c      	ldr	r3, [pc, #560]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d10b      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b6:	4b89      	ldr	r3, [pc, #548]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d06c      	beq.n	800159c <HAL_RCC_OscConfig+0x12c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d168      	bne.n	800159c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e24c      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x76>
 80014d8:	4b80      	ldr	r3, [pc, #512]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a7f      	ldr	r2, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e02e      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b7b      	ldr	r3, [pc, #492]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7a      	ldr	r2, [pc, #488]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b78      	ldr	r3, [pc, #480]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a77      	ldr	r2, [pc, #476]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0xbc>
 8001512:	4b72      	ldr	r3, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a71      	ldr	r2, [pc, #452]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 800152c:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a67      	ldr	r2, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fce2 	bl	8000f14 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fcde 	bl	8000f14 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e200      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xe4>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcce 	bl	8000f14 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcca 	bl	8000f14 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1ec      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x10c>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015b6:	4b49      	ldr	r3, [pc, #292]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
 80015c2:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1c0      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4939      	ldr	r1, [pc, #228]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fc83 	bl	8000f14 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fc7f 	bl	8000f14 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1a1      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4927      	ldr	r1, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc62 	bl	8000f14 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fc5e 	bl	8000f14 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e180      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d03a      	beq.n	80016f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_OscConfig+0x274>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fc42 	bl	8000f14 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fc3e 	bl	8000f14 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e160      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 faa6 	bl	8001c04 <RCC_Delay>
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_OscConfig+0x274>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc28 	bl	8000f14 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c6:	e00f      	b.n	80016e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc24 	bl	8000f14 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d908      	bls.n	80016e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e146      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	42420000 	.word	0x42420000
 80016e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e9      	bne.n	80016c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a6 	beq.w	800184e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001706:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10d      	bne.n	800172e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b88      	ldr	r3, [pc, #544]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a87      	ldr	r2, [pc, #540]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b85      	ldr	r3, [pc, #532]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b82      	ldr	r3, [pc, #520]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7e      	ldr	r2, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbe5 	bl	8000f14 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fbe1 	bl	8000f14 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b64      	cmp	r3, #100	; 0x64
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e103      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	4b75      	ldr	r3, [pc, #468]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x312>
 8001774:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a6e      	ldr	r2, [pc, #440]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e02d      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x334>
 800178a:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a69      	ldr	r2, [pc, #420]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b67      	ldr	r3, [pc, #412]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a66      	ldr	r2, [pc, #408]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	e01c      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x356>
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017c6:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b58      	ldr	r3, [pc, #352]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a57      	ldr	r2, [pc, #348]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d015      	beq.n	8001812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb95 	bl	8000f14 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb91 	bl	8000f14 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0b1      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ee      	beq.n	80017ee <HAL_RCC_OscConfig+0x37e>
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb7f 	bl	8000f14 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb7b 	bl	8000f14 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e09b      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ee      	bne.n	800181a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d105      	bne.n	800184e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001842:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a3b      	ldr	r2, [pc, #236]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8087 	beq.w	8001966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001858:	4b36      	ldr	r3, [pc, #216]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d061      	beq.n	8001928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d146      	bne.n	80018fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b33      	ldr	r3, [pc, #204]	; (800193c <HAL_RCC_OscConfig+0x4cc>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb4f 	bl	8000f14 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb4b 	bl	8000f14 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e06d      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4921      	ldr	r1, [pc, #132]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a19      	ldr	r1, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	430b      	orrs	r3, r1
 80018c6:	491b      	ldr	r1, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb1f 	bl	8000f14 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb1b 	bl	8000f14 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e03d      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x46a>
 80018f8:	e035      	b.n	8001966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_RCC_OscConfig+0x4cc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb08 	bl	8000f14 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fb04 	bl	8000f14 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e026      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x498>
 8001926:	e01e      	b.n	8001966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e019      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
 8001934:	40021000 	.word	0x40021000
 8001938:	40007000 	.word	0x40007000
 800193c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x500>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	429a      	cmp	r2, r3
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0d0      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4965      	ldr	r1, [pc, #404]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b8      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	494d      	ldr	r1, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d040      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e07f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e073      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06b      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4936      	ldr	r1, [pc, #216]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff fa56 	bl	8000f14 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff fa52 	bl	8000f14 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e053      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d210      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4922      	ldr	r1, [pc, #136]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e032      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4916      	ldr	r1, [pc, #88]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	490e      	ldr	r1, [pc, #56]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b02:	f000 f821 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	490a      	ldr	r1, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1cc>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1d0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f9b4 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08006460 	.word	0x08006460
 8001b40:	20000004 	.word	0x20000004
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b490      	push	{r4, r7}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b50:	1d3c      	adds	r4, r7, #4
 8001b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b58:	f240 2301 	movw	r3, #513	; 0x201
 8001b5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x40>
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x46>
 8001b86:	e02b      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b8a:	623b      	str	r3, [r7, #32]
      break;
 8001b8c:	e02b      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3328      	adds	r3, #40	; 0x28
 8001b98:	443b      	add	r3, r7
 8001b9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	0c5b      	lsrs	r3, r3, #17
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	3328      	adds	r3, #40	; 0x28
 8001bb6:	443b      	add	r3, r7
 8001bb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bc2:	fb03 f202 	mul.w	r2, r3, r2
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	e004      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	623b      	str	r3, [r7, #32]
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001be2:	623b      	str	r3, [r7, #32]
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	6a3b      	ldr	r3, [r7, #32]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc90      	pop	{r4, r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	08006408 	.word	0x08006408
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	007a1200 	.word	0x007a1200
 8001c00:	003d0900 	.word	0x003d0900

08001c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <RCC_Delay+0x34>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <RCC_Delay+0x38>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0a5b      	lsrs	r3, r3, #9
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c20:	bf00      	nop
  }
  while (Delay --);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	60fa      	str	r2, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f9      	bne.n	8001c20 <RCC_Delay+0x1c>
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	10624dd3 	.word	0x10624dd3

08001c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e076      	b.n	8001d40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c62:	d009      	beq.n	8001c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
 8001c6a:	e005      	b.n	8001c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff f830 	bl	8000cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	ea42 0103 	orr.w	r1, r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	0c1a      	lsrs	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f002 0204 	and.w	r2, r2, #4
 8001d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_SPI_Transmit+0x22>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e126      	b.n	8001fb8 <HAL_SPI_Transmit+0x270>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d72:	f7ff f8cf 	bl	8000f14 <HAL_GetTick>
 8001d76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d002      	beq.n	8001d8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d8c:	e10b      	b.n	8001fa6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_SPI_Transmit+0x52>
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d9e:	e102      	b.n	8001fa6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2203      	movs	r2, #3
 8001da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	88fa      	ldrh	r2, [r7, #6]
 8001db8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	88fa      	ldrh	r2, [r7, #6]
 8001dbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de6:	d10f      	bne.n	8001e08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d007      	beq.n	8001e26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e2e:	d14b      	bne.n	8001ec8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_SPI_Transmit+0xf6>
 8001e38:	8afb      	ldrh	r3, [r7, #22]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d13e      	bne.n	8001ebc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	1c9a      	adds	r2, r3, #2
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e62:	e02b      	b.n	8001ebc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d112      	bne.n	8001e98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	881a      	ldrh	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	1c9a      	adds	r2, r3, #2
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e96:	e011      	b.n	8001ebc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e98:	f7ff f83c 	bl	8000f14 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d803      	bhi.n	8001eb0 <HAL_SPI_Transmit+0x168>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d102      	bne.n	8001eb6 <HAL_SPI_Transmit+0x16e>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001eba:	e074      	b.n	8001fa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ce      	bne.n	8001e64 <HAL_SPI_Transmit+0x11c>
 8001ec6:	e04c      	b.n	8001f62 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_SPI_Transmit+0x18e>
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d140      	bne.n	8001f58 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	330c      	adds	r3, #12
 8001ee0:	7812      	ldrb	r2, [r2, #0]
 8001ee2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001efc:	e02c      	b.n	8001f58 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d113      	bne.n	8001f34 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	330c      	adds	r3, #12
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f32:	e011      	b.n	8001f58 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f34:	f7fe ffee 	bl	8000f14 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d803      	bhi.n	8001f4c <HAL_SPI_Transmit+0x204>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d102      	bne.n	8001f52 <HAL_SPI_Transmit+0x20a>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f56:	e026      	b.n	8001fa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1cd      	bne.n	8001efe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fa54 	bl	8002414 <SPI_EndRxTxTransaction>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2220      	movs	r2, #32
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	77fb      	strb	r3, [r7, #31]
 8001fa2:	e000      	b.n	8001fa6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001fa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e18a      	b.n	80022fc <HAL_SPI_TransmitReceive+0x33c>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fee:	f7fe ff91 	bl	8000f14 <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800200c:	2b01      	cmp	r3, #1
 800200e:	d00f      	beq.n	8002030 <HAL_SPI_TransmitReceive+0x70>
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002016:	d107      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x68>
 8002020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002024:	2b04      	cmp	r3, #4
 8002026:	d003      	beq.n	8002030 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002028:	2302      	movs	r3, #2
 800202a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800202e:	e15b      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x82>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x82>
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002048:	e14e      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b04      	cmp	r3, #4
 8002054:	d003      	beq.n	800205e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	887a      	ldrh	r2, [r7, #2]
 8002086:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d007      	beq.n	80020b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ba:	d178      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_SPI_TransmitReceive+0x10a>
 80020c4:	8b7b      	ldrh	r3, [r7, #26]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d166      	bne.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	1c9a      	adds	r2, r3, #2
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ee:	e053      	b.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d11b      	bne.n	8002136 <HAL_SPI_TransmitReceive+0x176>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d016      	beq.n	8002136 <HAL_SPI_TransmitReceive+0x176>
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d113      	bne.n	8002136 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	881a      	ldrh	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	1c9a      	adds	r2, r3, #2
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d119      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x1b8>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d014      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	b292      	uxth	r2, r2
 800215a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	1c9a      	adds	r2, r3, #2
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002174:	2301      	movs	r3, #1
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002178:	f7fe fecc 	bl	8000f14 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002184:	429a      	cmp	r2, r3
 8002186:	d807      	bhi.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
 8002188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d003      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002196:	e0a7      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1a6      	bne.n	80020f0 <HAL_SPI_TransmitReceive+0x130>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1a1      	bne.n	80020f0 <HAL_SPI_TransmitReceive+0x130>
 80021ac:	e07c      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x1fc>
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d16b      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	330c      	adds	r3, #12
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e2:	e057      	b.n	8002294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d11c      	bne.n	800222c <HAL_SPI_TransmitReceive+0x26c>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d017      	beq.n	800222c <HAL_SPI_TransmitReceive+0x26c>
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d114      	bne.n	800222c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d119      	bne.n	800226e <HAL_SPI_TransmitReceive+0x2ae>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d014      	beq.n	800226e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800226a:	2301      	movs	r3, #1
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800226e:	f7fe fe51 	bl	8000f14 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800227a:	429a      	cmp	r2, r3
 800227c:	d803      	bhi.n	8002286 <HAL_SPI_TransmitReceive+0x2c6>
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d102      	bne.n	800228c <HAL_SPI_TransmitReceive+0x2cc>
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002292:	e029      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1a2      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x224>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d19d      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f8b1 	bl	8002414 <SPI_EndRxTxTransaction>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022c4:	e010      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	e000      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3730      	adds	r7, #48	; 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002314:	f7fe fdfe 	bl	8000f14 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4413      	add	r3, r2
 8002322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002324:	f7fe fdf6 	bl	8000f14 <HAL_GetTick>
 8002328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	0d1b      	lsrs	r3, r3, #20
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	e054      	b.n	80023e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	d050      	beq.n	80023e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002344:	f7fe fde6 	bl	8000f14 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	429a      	cmp	r2, r3
 8002352:	d902      	bls.n	800235a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d13d      	bne.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002372:	d111      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237c:	d004      	beq.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002386:	d107      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a0:	d10f      	bne.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e017      	b.n	8002406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	429a      	cmp	r2, r3
 8002402:	d19b      	bne.n	800233c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000004 	.word	0x20000004

08002414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff ff6a 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e000      	b.n	8002448 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <MX_FATFS_Init+0x18>)
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_FATFS_Init+0x1c>)
 8002458:	f003 ff16 	bl	8006288 <FATFS_LinkDriver>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <MX_FATFS_Init+0x20>)
 8002462:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20002104 	.word	0x20002104
 800246c:	20000010 	.word	0x20000010
 8002470:	20002100 	.word	0x20002100

08002474 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002478:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f80e 	bl	80004b0 <SD_disk_initialize>
 8002494:	4603      	mov	r3, r0
 8002496:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f8e5 	bl	800067c <SD_disk_status>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80024ce:	7bf8      	ldrb	r0, [r7, #15]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	f7fe f8e5 	bl	80006a4 <SD_disk_read>
 80024da:	4603      	mov	r3, r0
 80024dc:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80024f6:	7bf8      	ldrb	r0, [r7, #15]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	f7fe f93b 	bl	8000778 <SD_disk_write>
 8002502:	4603      	mov	r3, r0
 8002504:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	603a      	str	r2, [r7, #0]
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	460b      	mov	r3, r1
 800251c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	79b9      	ldrb	r1, [r7, #6]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f9ab 	bl	8000880 <SD_disk_ioctl>
 800252a:	4603      	mov	r3, r0
 800252c:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	4a08      	ldr	r2, [pc, #32]	; (8002568 <disk_status+0x30>)
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	79fa      	ldrb	r2, [r7, #7]
 8002550:	4905      	ldr	r1, [pc, #20]	; (8002568 <disk_status+0x30>)
 8002552:	440a      	add	r2, r1
 8002554:	7a12      	ldrb	r2, [r2, #8]
 8002556:	4610      	mov	r0, r2
 8002558:	4798      	blx	r3
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20002328 	.word	0x20002328

0800256c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <disk_initialize+0x48>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <disk_initialize+0x48>)
 8002588:	2101      	movs	r1, #1
 800258a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <disk_initialize+0x48>)
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	79fa      	ldrb	r2, [r7, #7]
 800259a:	4906      	ldr	r1, [pc, #24]	; (80025b4 <disk_initialize+0x48>)
 800259c:	440a      	add	r2, r1
 800259e:	7a12      	ldrb	r2, [r2, #8]
 80025a0:	4610      	mov	r0, r2
 80025a2:	4798      	blx	r3
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20002328 	.word	0x20002328

080025b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4603      	mov	r3, r0
 80025c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <disk_read+0x3c>)
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	689c      	ldr	r4, [r3, #8]
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <disk_read+0x3c>)
 80025d8:	4413      	add	r3, r2
 80025da:	7a18      	ldrb	r0, [r3, #8]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	47a0      	blx	r4
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20002328 	.word	0x20002328

080025f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <disk_write+0x3c>)
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	68dc      	ldr	r4, [r3, #12]
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <disk_write+0x3c>)
 8002618:	4413      	add	r3, r2
 800261a:	7a18      	ldrb	r0, [r3, #8]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	47a0      	blx	r4
 8002624:	4603      	mov	r3, r0
 8002626:	75fb      	strb	r3, [r7, #23]
  return res;
 8002628:	7dfb      	ldrb	r3, [r7, #23]
}
 800262a:	4618      	mov	r0, r3
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop
 8002634:	20002328 	.word	0x20002328

08002638 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	603a      	str	r2, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	460b      	mov	r3, r1
 8002646:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <disk_ioctl+0x38>)
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	4906      	ldr	r1, [pc, #24]	; (8002670 <disk_ioctl+0x38>)
 8002658:	440a      	add	r2, r1
 800265a:	7a10      	ldrb	r0, [r2, #8]
 800265c:	79b9      	ldrb	r1, [r7, #6]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4798      	blx	r3
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]
  return res;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20002328 	.word	0x20002328

08002674 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002688:	e007      	b.n	800269a <mem_cpy+0x26>
		*d++ = *s++;
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	1c53      	adds	r3, r2, #1
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	6179      	str	r1, [r7, #20]
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f2      	bne.n	800268a <mem_cpy+0x16>
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80026c0:	e005      	b.n	80026ce <mem_set+0x1e>
		*d++ = (BYTE)val;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	617a      	str	r2, [r7, #20]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f4      	bne.n	80026c2 <mem_set+0x12>
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80026fc:	bf00      	nop
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <mem_cmp+0x40>
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	61fa      	str	r2, [r7, #28]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	61ba      	str	r2, [r7, #24]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	1acb      	subs	r3, r1, r3
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ec      	beq.n	80026fe <mem_cmp+0x1a>
	return r;
 8002724:	697b      	ldr	r3, [r7, #20]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800273a:	e002      	b.n	8002742 <chk_chr+0x12>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3301      	adds	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <chk_chr+0x26>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4293      	cmp	r3, r2
 8002754:	d1f2      	bne.n	800273c <chk_chr+0xc>
	return *str;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	781b      	ldrb	r3, [r3, #0]
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e03b      	b.n	80027f0 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8002778:	4931      	ldr	r1, [pc, #196]	; (8002840 <chk_lock+0xdc>)
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02c      	beq.n	80027e6 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800278c:	492c      	ldr	r1, [pc, #176]	; (8002840 <chk_lock+0xdc>)
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d120      	bne.n	80027ea <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80027a8:	4925      	ldr	r1, [pc, #148]	; (8002840 <chk_lock+0xdc>)
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3304      	adds	r3, #4
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c0:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d111      	bne.n	80027ea <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80027c6:	491e      	ldr	r1, [pc, #120]	; (8002840 <chk_lock+0xdc>)
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3308      	adds	r3, #8
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027de:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d102      	bne.n	80027ea <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80027e4:	e007      	b.n	80027f6 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d9c0      	bls.n	8002778 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d109      	bne.n	8002810 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <chk_lock+0xa4>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d101      	bne.n	800280c <chk_lock+0xa8>
 8002808:	2300      	movs	r3, #0
 800280a:	e013      	b.n	8002834 <chk_lock+0xd0>
 800280c:	2312      	movs	r3, #18
 800280e:	e011      	b.n	8002834 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <chk_lock+0xca>
 8002816:	490a      	ldr	r1, [pc, #40]	; (8002840 <chk_lock+0xdc>)
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	330a      	adds	r3, #10
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282c:	d101      	bne.n	8002832 <chk_lock+0xce>
 800282e:	2310      	movs	r3, #16
 8002830:	e000      	b.n	8002834 <chk_lock+0xd0>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20002110 	.word	0x20002110

08002844 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	e002      	b.n	8002856 <enq_lock+0x12>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3301      	adds	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d809      	bhi.n	8002870 <enq_lock+0x2c>
 800285c:	490a      	ldr	r1, [pc, #40]	; (8002888 <enq_lock+0x44>)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ef      	bne.n	8002850 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	bf14      	ite	ne
 8002876:	2301      	movne	r3, #1
 8002878:	2300      	moveq	r3, #0
 800287a:	b2db      	uxtb	r3, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20002110 	.word	0x20002110

0800288c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e02e      	b.n	80028fa <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800289c:	4958      	ldr	r1, [pc, #352]	; (8002a00 <inc_lock+0x174>)
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d11d      	bne.n	80028f4 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80028b8:	4951      	ldr	r1, [pc, #324]	; (8002a00 <inc_lock+0x174>)
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3304      	adds	r3, #4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10e      	bne.n	80028f4 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 80028d6:	494a      	ldr	r1, [pc, #296]	; (8002a00 <inc_lock+0x174>)
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3308      	adds	r3, #8
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d006      	beq.n	8002902 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d9cd      	bls.n	800289c <inc_lock+0x10>
 8002900:	e000      	b.n	8002904 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8002902:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d148      	bne.n	800299c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e002      	b.n	8002916 <inc_lock+0x8a>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d809      	bhi.n	8002930 <inc_lock+0xa4>
 800291c:	4938      	ldr	r1, [pc, #224]	; (8002a00 <inc_lock+0x174>)
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ef      	bne.n	8002910 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d101      	bne.n	800293a <inc_lock+0xae>
 8002936:	2300      	movs	r3, #0
 8002938:	e05d      	b.n	80029f6 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	482f      	ldr	r0, [pc, #188]	; (8002a00 <inc_lock+0x174>)
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4403      	add	r3, r0
 8002950:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	4829      	ldr	r0, [pc, #164]	; (8002a00 <inc_lock+0x174>)
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4403      	add	r3, r0
 8002968:	3304      	adds	r3, #4
 800296a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002972:	88d8      	ldrh	r0, [r3, #6]
 8002974:	4922      	ldr	r1, [pc, #136]	; (8002a00 <inc_lock+0x174>)
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3308      	adds	r3, #8
 8002984:	4602      	mov	r2, r0
 8002986:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002988:	491d      	ldr	r1, [pc, #116]	; (8002a00 <inc_lock+0x174>)
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	330a      	adds	r3, #10
 8002998:	2200      	movs	r2, #0
 800299a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <inc_lock+0x130>
 80029a2:	4917      	ldr	r1, [pc, #92]	; (8002a00 <inc_lock+0x174>)
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	330a      	adds	r3, #10
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <inc_lock+0x130>
 80029b8:	2300      	movs	r3, #0
 80029ba:	e01c      	b.n	80029f6 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10b      	bne.n	80029da <inc_lock+0x14e>
 80029c2:	490f      	ldr	r1, [pc, #60]	; (8002a00 <inc_lock+0x174>)
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	330a      	adds	r3, #10
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	b299      	uxth	r1, r3
 80029d8:	e001      	b.n	80029de <inc_lock+0x152>
 80029da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029de:	4808      	ldr	r0, [pc, #32]	; (8002a00 <inc_lock+0x174>)
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4403      	add	r3, r0
 80029ec:	330a      	adds	r3, #10
 80029ee:	460a      	mov	r2, r1
 80029f0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3301      	adds	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20002110 	.word	0x20002110

08002a04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d82e      	bhi.n	8002a76 <dec_lock+0x72>
		n = Files[i].ctr;
 8002a18:	491b      	ldr	r1, [pc, #108]	; (8002a88 <dec_lock+0x84>)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	330a      	adds	r3, #10
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002a2c:	89fb      	ldrh	r3, [r7, #14]
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	d101      	bne.n	8002a38 <dec_lock+0x34>
 8002a34:	2300      	movs	r3, #0
 8002a36:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8002a38:	89fb      	ldrh	r3, [r7, #14]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <dec_lock+0x40>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002a44:	4910      	ldr	r1, [pc, #64]	; (8002a88 <dec_lock+0x84>)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	330a      	adds	r3, #10
 8002a54:	89fa      	ldrh	r2, [r7, #14]
 8002a56:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002a58:	89fb      	ldrh	r3, [r7, #14]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d108      	bne.n	8002a70 <dec_lock+0x6c>
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <dec_lock+0x84>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	737b      	strb	r3, [r7, #13]
 8002a74:	e001      	b.n	8002a7a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002a76:	2302      	movs	r3, #2
 8002a78:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20002110 	.word	0x20002110

08002a8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e016      	b.n	8002ac8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002a9a:	4910      	ldr	r1, [pc, #64]	; (8002adc <clear_lock+0x50>)
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d108      	bne.n	8002ac2 <clear_lock+0x36>
 8002ab0:	490a      	ldr	r1, [pc, #40]	; (8002adc <clear_lock+0x50>)
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d9e5      	bls.n	8002a9a <clear_lock+0xe>
	}
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20002110 	.word	0x20002110

08002ae0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af2:	791b      	ldrb	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d040      	beq.n	8002b7a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b08:	7858      	ldrb	r0, [r3, #1]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	f7ff fd72 	bl	80025f8 <disk_write>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <sync_window+0x40>
			res = FR_DISK_ERR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	e02c      	b.n	8002b7a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b26:	2200      	movs	r2, #0
 8002b28:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	1ad2      	subs	r2, r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d21b      	bcs.n	8002b7a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b48:	78db      	ldrb	r3, [r3, #3]
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e012      	b.n	8002b74 <sync_window+0x94>
					wsect += fs->fsize;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4413      	add	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b62:	7858      	ldrb	r0, [r3, #1]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	2301      	movs	r3, #1
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	f7ff fd45 	bl	80025f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d8e9      	bhi.n	8002b4e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d01e      	beq.n	8002bde <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff9d 	bl	8002ae0 <sync_window>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb6:	7858      	ldrb	r0, [r3, #1]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	f7ff fcfb 	bl	80025b8 <disk_read>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd8:	461a      	mov	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff75 	bl	8002ae0 <sync_window>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 80ad 	bne.w	8002d5c <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	f040 8098 	bne.w	8002d40 <sync_fs+0x158>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c16:	795b      	ldrb	r3, [r3, #5]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	f040 8091 	bne.w	8002d40 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c26:	895b      	ldrh	r3, [r3, #10]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f7ff fd40 	bl	80026b0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2255      	movs	r2, #85	; 0x55
 8002c34:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	22aa      	movs	r2, #170	; 0xaa
 8002c3c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2252      	movs	r2, #82	; 0x52
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2252      	movs	r2, #82	; 0x52
 8002c4a:	705a      	strb	r2, [r3, #1]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2261      	movs	r2, #97	; 0x61
 8002c50:	709a      	strb	r2, [r3, #2]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2241      	movs	r2, #65	; 0x41
 8002c56:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2272      	movs	r2, #114	; 0x72
 8002c5c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2272      	movs	r2, #114	; 0x72
 8002c64:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2241      	movs	r2, #65	; 0x41
 8002c6c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2261      	movs	r2, #97	; 0x61
 8002c74:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	0e1b      	lsrs	r3, r3, #24
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0e1b      	lsrs	r3, r3, #24
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	3301      	adds	r3, #1
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d24:	7858      	ldrb	r0, [r3, #1]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d30:	2301      	movs	r3, #1
 8002d32:	f7ff fc61 	bl	80025f8 <disk_write>
			fs->fsi_flag = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d46:	785b      	ldrb	r3, [r3, #1]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fc73 	bl	8002638 <disk_ioctl>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <sync_fs+0x174>
			res = FR_DISK_ERR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	3b02      	subs	r3, #2
 8002d74:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	3b02      	subs	r3, #2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d301      	bcc.n	8002d8a <clust2sect+0x24>
 8002d86:	2300      	movs	r3, #0
 8002d88:	e00c      	b.n	8002da4 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d90:	789b      	ldrb	r3, [r3, #2]
 8002d92:	461a      	mov	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	fb03 f202 	mul.w	r2, r3, r2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	4413      	add	r3, r2
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d906      	bls.n	8002dcc <get_fat+0x1e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <get_fat+0x24>
		val = 1;	/* Internal error */
 8002dcc:	2301      	movs	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e0e4      	b.n	8002f9c <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	f000 8098 	beq.w	8002f16 <get_fat+0x168>
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	f300 80ce 	bgt.w	8002f88 <get_fat+0x1da>
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <get_fat+0x48>
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d05f      	beq.n	8002eb4 <get_fat+0x106>
 8002df4:	e0c8      	b.n	8002f88 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4413      	add	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e12:	895b      	ldrh	r3, [r3, #10]
 8002e14:	4619      	mov	r1, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff feaf 	bl	8002b84 <move_window>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f040 80b0 	bne.w	8002f8e <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	60fa      	str	r2, [r7, #12]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e3a:	8952      	ldrh	r2, [r2, #10]
 8002e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e40:	fb01 f202 	mul.w	r2, r1, r2
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5a:	895b      	ldrh	r3, [r3, #10]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e64:	4413      	add	r3, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fe8b 	bl	8002b84 <move_window>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 808e 	bne.w	8002f92 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7c:	895b      	ldrh	r3, [r3, #10]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e86:	fb01 f202 	mul.w	r2, r1, r2
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	5cd3      	ldrb	r3, [r2, r3]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <get_fat+0xfc>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	e002      	b.n	8002eb0 <get_fat+0x102>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	617b      	str	r3, [r7, #20]
			break;
 8002eb2:	e073      	b.n	8002f9c <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec2:	895b      	ldrh	r3, [r3, #10]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fe55 	bl	8002b84 <move_window>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15a      	bne.n	8002f96 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eea:	8952      	ldrh	r2, [r2, #10]
 8002eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ef0:	fb01 f202 	mul.w	r2, r1, r2
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	3301      	adds	r3, #1
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	b21a      	sxth	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	617b      	str	r3, [r7, #20]
			break;
 8002f14:	e042      	b.n	8002f9c <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f24:	895b      	ldrh	r3, [r3, #10]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f32:	4413      	add	r3, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fe24 	bl	8002b84 <move_window>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d12b      	bne.n	8002f9a <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f4c:	8952      	ldrh	r2, [r2, #10]
 8002f4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f52:	fb01 f202 	mul.w	r2, r1, r2
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3303      	adds	r3, #3
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	061a      	lsls	r2, r3, #24
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	3201      	adds	r2, #1
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	0212      	lsls	r2, r2, #8
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f84:	617b      	str	r3, [r7, #20]
			break;
 8002f86:	e009      	b.n	8002f9c <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8002f88:	2301      	movs	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e006      	b.n	8002f9c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002f8e:	bf00      	nop
 8002f90:	e004      	b.n	8002f9c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002f92:	bf00      	nop
 8002f94:	e002      	b.n	8002f9c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002f96:	bf00      	nop
 8002f98:	e000      	b.n	8002f9c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002f9a:	bf00      	nop
		}
	}

	return val;
 8002f9c:	697b      	ldr	r3, [r7, #20]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b088      	sub	sp, #32
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d906      	bls.n	8002fc6 <put_fat+0x20>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <put_fat+0x26>
		res = FR_INT_ERR;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e13a      	b.n	8003242 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	f000 80d0 	beq.w	800317a <put_fat+0x1d4>
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	f300 8127 	bgt.w	800322e <put_fat+0x288>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d003      	beq.n	8002fec <put_fat+0x46>
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	f000 808f 	beq.w	8003108 <put_fat+0x162>
 8002fea:	e120      	b.n	800322e <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003008:	895b      	ldrh	r3, [r3, #10]
 800300a:	4619      	mov	r1, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003012:	4413      	add	r3, r2
 8003014:	4619      	mov	r1, r3
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fdb4 	bl	8002b84 <move_window>
 800301c:	4603      	mov	r3, r0
 800301e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 8106 	bne.w	8003234 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	617a      	str	r2, [r7, #20]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003034:	8952      	ldrh	r2, [r2, #10]
 8003036:	fbb3 f1f2 	udiv	r1, r3, r2
 800303a:	fb01 f202 	mul.w	r2, r1, r2
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <put_fat+0xc6>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b25b      	sxtb	r3, r3
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	b25a      	sxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	b25b      	sxtb	r3, r3
 8003064:	4313      	orrs	r3, r2
 8003066:	b25b      	sxtb	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e001      	b.n	8003070 <put_fat+0xca>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307a:	2201      	movs	r2, #1
 800307c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308c:	895b      	ldrh	r3, [r3, #10]
 800308e:	4619      	mov	r1, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	4413      	add	r3, r2
 8003098:	4619      	mov	r1, r3
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fd72 	bl	8002b84 <move_window>
 80030a0:	4603      	mov	r3, r0
 80030a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80c6 	bne.w	8003238 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b2:	895b      	ldrh	r3, [r3, #10]
 80030b4:	461a      	mov	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80030bc:	fb01 f202 	mul.w	r2, r1, r2
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <put_fat+0x134>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e00e      	b.n	80030f8 <put_fat+0x152>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b25b      	sxtb	r3, r3
 80030e0:	f023 030f 	bic.w	r3, r3, #15
 80030e4:	b25a      	sxtb	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003102:	2201      	movs	r2, #1
 8003104:	711a      	strb	r2, [r3, #4]
			break;
 8003106:	e09c      	b.n	8003242 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003116:	895b      	ldrh	r3, [r3, #10]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	b29b      	uxth	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	fbb3 f3f1 	udiv	r3, r3, r1
 8003124:	4413      	add	r3, r2
 8003126:	4619      	mov	r1, r3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff fd2b 	bl	8002b84 <move_window>
 800312e:	4603      	mov	r3, r0
 8003130:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003132:	7ffb      	ldrb	r3, [r7, #31]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 8081 	bne.w	800323c <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003144:	8952      	ldrh	r2, [r2, #10]
 8003146:	fbb3 f1f2 	udiv	r1, r3, r2
 800314a:	fb01 f202 	mul.w	r2, r1, r2
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	b29b      	uxth	r3, r3
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b29a      	uxth	r2, r3
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3301      	adds	r3, #1
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003174:	2201      	movs	r2, #1
 8003176:	711a      	strb	r2, [r3, #4]
			break;
 8003178:	e063      	b.n	8003242 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003180:	6a1a      	ldr	r2, [r3, #32]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	895b      	ldrh	r3, [r3, #10]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	b29b      	uxth	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	fbb3 f3f1 	udiv	r3, r3, r1
 8003196:	4413      	add	r3, r2
 8003198:	4619      	mov	r1, r3
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff fcf2 	bl	8002b84 <move_window>
 80031a0:	4603      	mov	r3, r0
 80031a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d14a      	bne.n	8003240 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031b4:	8952      	ldrh	r2, [r2, #10]
 80031b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80031ba:	fb01 f202 	mul.w	r2, r1, r2
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	3303      	adds	r3, #3
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	061a      	lsls	r2, r3, #24
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	3302      	adds	r3, #2
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	4313      	orrs	r3, r2
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	3201      	adds	r2, #1
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	0212      	lsls	r2, r2, #8
 80031e0:	4313      	orrs	r3, r2
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b29a      	uxth	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3301      	adds	r3, #1
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0c1a      	lsrs	r2, r3, #16
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3302      	adds	r3, #2
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0e1a      	lsrs	r2, r3, #24
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3303      	adds	r3, #3
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003228:	2201      	movs	r2, #1
 800322a:	711a      	strb	r2, [r3, #4]
			break;
 800322c:	e009      	b.n	8003242 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800322e:	2302      	movs	r3, #2
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e006      	b.n	8003242 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003234:	bf00      	nop
 8003236:	e004      	b.n	8003242 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003238:	bf00      	nop
 800323a:	e002      	b.n	8003242 <put_fat+0x29c>
			if (res != FR_OK) break;
 800323c:	bf00      	nop
 800323e:	e000      	b.n	8003242 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003240:	bf00      	nop
		}
	}

	return res;
 8003242:	7ffb      	ldrb	r3, [r7, #31]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d906      	bls.n	800326a <remove_chain+0x1e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <remove_chain+0x24>
		res = FR_INT_ERR;
 800326a:	2302      	movs	r3, #2
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e049      	b.n	8003304 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003274:	e03b      	b.n	80032ee <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003276:	6839      	ldr	r1, [r7, #0]
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fd98 	bl	8002dae <get_fat>
 800327e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d03b      	beq.n	80032fe <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <remove_chain+0x46>
 800328c:	2302      	movs	r3, #2
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e038      	b.n	8003304 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d102      	bne.n	80032a0 <remove_chain+0x54>
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e031      	b.n	8003304 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80032a0:	2200      	movs	r2, #0
 80032a2:	6839      	ldr	r1, [r7, #0]
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fe7e 	bl	8002fa6 <put_fat>
 80032aa:	4603      	mov	r3, r0
 80032ac:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d126      	bne.n	8003302 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d013      	beq.n	80032ea <remove_chain+0x9e>
				fs->free_clust++;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	3301      	adds	r3, #1
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032d2:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032da:	795b      	ldrb	r3, [r3, #5]
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e8:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d3bc      	bcc.n	8003276 <remove_chain+0x2a>
 80032fc:	e002      	b.n	8003304 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8003302:	bf00      	nop
		}
	}

	return res;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d111      	bne.n	8003342 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <create_chain+0x2e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	429a      	cmp	r2, r3
 800333a:	d31d      	bcc.n	8003378 <create_chain+0x6a>
 800333c:	2301      	movs	r3, #1
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	e01a      	b.n	8003378 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fd32 	bl	8002dae <get_fat>
 800334a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d801      	bhi.n	8003356 <create_chain+0x48>
 8003352:	2301      	movs	r3, #1
 8003354:	e07f      	b.n	8003456 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d101      	bne.n	8003362 <create_chain+0x54>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	e079      	b.n	8003456 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	d201      	bcs.n	8003374 <create_chain+0x66>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	e070      	b.n	8003456 <create_chain+0x148>
		scl = clst;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3301      	adds	r3, #1
 8003380:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	d307      	bcc.n	80033a0 <create_chain+0x92>
			ncl = 2;
 8003390:	2302      	movs	r3, #2
 8003392:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d901      	bls.n	80033a0 <create_chain+0x92>
 800339c:	2300      	movs	r3, #0
 800339e:	e05a      	b.n	8003456 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80033a0:	6979      	ldr	r1, [r7, #20]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fd03 	bl	8002dae <get_fat>
 80033a8:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d002      	beq.n	80033be <create_chain+0xb0>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <create_chain+0xb4>
			return cs;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	e049      	b.n	8003456 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d1d8      	bne.n	800337c <create_chain+0x6e>
 80033ca:	2300      	movs	r3, #0
 80033cc:	e043      	b.n	8003456 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80033ce:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80033d0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80033d4:	6979      	ldr	r1, [r7, #20]
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fde5 	bl	8002fa6 <put_fat>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <create_chain+0xec>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d006      	beq.n	80033fa <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fdd8 	bl	8002fa6 <put_fat>
 80033f6:	4603      	mov	r3, r0
 80033f8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d121      	bne.n	8003444 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003406:	461a      	mov	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d01c      	beq.n	8003454 <create_chain+0x146>
			fs->free_clust--;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	3b01      	subs	r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800342a:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003432:	795b      	ldrb	r3, [r3, #5]
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b2da      	uxtb	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003440:	715a      	strb	r2, [r3, #5]
 8003442:	e007      	b.n	8003454 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <create_chain+0x142>
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	e000      	b.n	8003452 <create_chain+0x144>
 8003450:	2301      	movs	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003454:	697b      	ldr	r3, [r7, #20]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800345e:	b480      	push	{r7}
 8003460:	b087      	sub	sp, #28
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	3304      	adds	r3, #4
 8003472:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003480:	895b      	ldrh	r3, [r3, #10]
 8003482:	461a      	mov	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	fbb3 f3f2 	udiv	r3, r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003496:	7892      	ldrb	r2, [r2, #2]
 8003498:	fbb3 f3f2 	udiv	r3, r3, r2
 800349c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1d1a      	adds	r2, r3, #4
 80034a2:	613a      	str	r2, [r7, #16]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <clmt_clust+0x54>
 80034ae:	2300      	movs	r3, #0
 80034b0:	e010      	b.n	80034d4 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d307      	bcc.n	80034ca <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	3304      	adds	r3, #4
 80034c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80034c8:	e7e9      	b.n	800349e <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80034ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4413      	add	r3, r2
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f2:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d009      	beq.n	8003518 <dir_sdi+0x3a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	d301      	bcc.n	800351c <dir_sdi+0x3e>
		return FR_INT_ERR;
 8003518:	2302      	movs	r3, #2
 800351a:	e0aa      	b.n	8003672 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d110      	bne.n	8003544 <dir_sdi+0x66>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d107      	bne.n	8003544 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d115      	bne.n	8003576 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003556:	891b      	ldrh	r3, [r3, #8]
 8003558:	461a      	mov	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4293      	cmp	r3, r2
 800355e:	d301      	bcc.n	8003564 <dir_sdi+0x86>
			return FR_INT_ERR;
 8003560:	2302      	movs	r3, #2
 8003562:	e086      	b.n	8003672 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e043      	b.n	80035fe <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003582:	895b      	ldrh	r3, [r3, #10]
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800359e:	e021      	b.n	80035e4 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6979      	ldr	r1, [r7, #20]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fbff 	bl	8002dae <get_fat>
 80035b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d101      	bne.n	80035be <dir_sdi+0xe0>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e059      	b.n	8003672 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d909      	bls.n	80035d8 <dir_sdi+0xfa>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d301      	bcc.n	80035dc <dir_sdi+0xfe>
				return FR_INT_ERR;
 80035d8:	2302      	movs	r3, #2
 80035da:	e04a      	b.n	8003672 <dir_sdi+0x194>
			idx -= ic;
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d2d9      	bcs.n	80035a0 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6979      	ldr	r1, [r7, #20]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fbb5 	bl	8002d66 <clust2sect>
 80035fc:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003604:	461a      	mov	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <dir_sdi+0x136>
 8003610:	2302      	movs	r3, #2
 8003612:	e02e      	b.n	8003672 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003620:	895b      	ldrh	r3, [r3, #10]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	fbb3 f2f2 	udiv	r2, r3, r2
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003638:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003650:	895b      	ldrh	r3, [r3, #10]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	fbb3 f1f2 	udiv	r1, r3, r2
 800365e:	fb01 f202 	mul.w	r2, r1, r2
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	015b      	lsls	r3, r3, #5
 8003666:	4403      	add	r3, r0
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800366e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800367a:	b590      	push	{r4, r7, lr}
 800367c:	b087      	sub	sp, #28
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368a:	88db      	ldrh	r3, [r3, #6]
 800368c:	3301      	adds	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <dir_next+0x2a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <dir_next+0x2e>
		return FR_NO_FILE;
 80036a4:	2304      	movs	r3, #4
 80036a6:	e12e      	b.n	8003906 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b4:	895b      	ldrh	r3, [r3, #10]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	fbb3 f1f2 	udiv	r1, r3, r2
 80036c2:	fb01 f202 	mul.w	r2, r1, r2
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 80fa 	bne.w	80038c2 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	3301      	adds	r3, #1
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036de:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f8:	891b      	ldrh	r3, [r3, #8]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4293      	cmp	r3, r2
 8003700:	f0c0 80df 	bcc.w	80038c2 <dir_next+0x248>
				return FR_NO_FILE;
 8003704:	2304      	movs	r3, #4
 8003706:	e0fe      	b.n	8003906 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003714:	895b      	ldrh	r3, [r3, #10]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	b29b      	uxth	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800372e:	7892      	ldrb	r2, [r2, #2]
 8003730:	3a01      	subs	r2, #1
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	f040 80c4 	bne.w	80038c2 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4619      	mov	r1, r3
 800374c:	4610      	mov	r0, r2
 800374e:	f7ff fb2e 	bl	8002dae <get_fat>
 8003752:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d801      	bhi.n	800375e <dir_next+0xe4>
 800375a:	2302      	movs	r3, #2
 800375c:	e0d3      	b.n	8003906 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d101      	bne.n	800376a <dir_next+0xf0>
 8003766:	2301      	movs	r3, #1
 8003768:	e0cd      	b.n	8003906 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	f0c0 808e 	bcc.w	800389c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <dir_next+0x110>
 8003786:	2304      	movs	r3, #4
 8003788:	e0bd      	b.n	8003906 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f7ff fdb6 	bl	800330e <create_chain>
 80037a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <dir_next+0x134>
 80037aa:	2307      	movs	r3, #7
 80037ac:	e0ab      	b.n	8003906 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <dir_next+0x13e>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0a6      	b.n	8003906 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d101      	bne.n	80037c4 <dir_next+0x14a>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0a0      	b.n	8003906 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f987 	bl	8002ae0 <sync_window>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <dir_next+0x162>
 80037d8:	2301      	movs	r3, #1
 80037da:	e094      	b.n	8003906 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f2:	895b      	ldrh	r3, [r3, #10]
 80037f4:	461a      	mov	r2, r3
 80037f6:	2100      	movs	r1, #0
 80037f8:	f7fe ff5a 	bl	80026b0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380a:	681c      	ldr	r4, [r3, #0]
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	4610      	mov	r0, r2
 8003810:	f7ff faa9 	bl	8002d66 <clust2sect>
 8003814:	4603      	mov	r3, r0
 8003816:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e021      	b.n	8003866 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382e:	2201      	movs	r2, #1
 8003830:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f950 	bl	8002ae0 <sync_window>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <dir_next+0x1d0>
 8003846:	2301      	movs	r3, #1
 8003848:	e05d      	b.n	8003906 <dir_next+0x28c>
						dp->fs->winsect++;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003856:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003858:	3201      	adds	r2, #1
 800385a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3301      	adds	r3, #1
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003872:	789b      	ldrb	r3, [r3, #2]
 8003874:	461a      	mov	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4293      	cmp	r3, r2
 800387a:	d3d2      	bcc.n	8003822 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1acb      	subs	r3, r1, r3
 8003896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a2:	461a      	mov	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fa57 	bl	8002d66 <clust2sect>
 80038b8:	4602      	mov	r2, r0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c0:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038cc:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e4:	895b      	ldrh	r3, [r3, #10]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80038f2:	fb01 f202 	mul.w	r2, r1, r2
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	015b      	lsls	r3, r3, #5
 80038fa:	4403      	add	r3, r0
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003902:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}

0800390e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fddf 	bl	80034de <dir_sdi>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d135      	bne.n	8003996 <dir_alloc+0x88>
		n = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7ff f91f 	bl	8002b84 <move_window>
 8003946:	4603      	mov	r3, r0
 8003948:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d121      	bne.n	8003994 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2be5      	cmp	r3, #229	; 0xe5
 800395c:	d006      	beq.n	800396c <dir_alloc+0x5e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	3301      	adds	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d102      	bne.n	8003980 <dir_alloc+0x72>
 800397a:	e00c      	b.n	8003996 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003980:	2101      	movs	r1, #1
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fe79 	bl	800367a <dir_next>
 8003988:	4603      	mov	r3, r0
 800398a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0cd      	beq.n	800392e <dir_alloc+0x20>
 8003992:	e000      	b.n	8003996 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8003994:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d101      	bne.n	80039a0 <dir_alloc+0x92>
 800399c:	2307      	movs	r3, #7
 800399e:	73fb      	strb	r3, [r7, #15]
	return res;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	331b      	adds	r3, #27
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	b21a      	sxth	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	331a      	adds	r3, #26
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b21b      	sxth	r3, r3
 80039c6:	4313      	orrs	r3, r2
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d10f      	bne.n	80039fa <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	3315      	adds	r3, #21
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	b21a      	sxth	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	3314      	adds	r3, #20
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	b21b      	sxth	r3, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

	return cl;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	331a      	adds	r3, #26
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	331b      	adds	r3, #27
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	0c1a      	lsrs	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3314      	adds	r3, #20
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3315      	adds	r3, #21
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
	...

08003a54 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <cmp_lfn+0xd8>)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	4413      	add	r3, r2
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	b21a      	sxth	r2, r3
 8003a90:	4926      	ldr	r1, [pc, #152]	; (8003b2c <cmp_lfn+0xd8>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	440b      	add	r3, r1
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	440b      	add	r3, r1
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	b21b      	sxth	r3, r3
 8003aa6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8003aa8:	89fb      	ldrh	r3, [r7, #14]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d019      	beq.n	8003ae2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003aae:	89bb      	ldrh	r3, [r7, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 fc33 	bl	800631c <ff_wtoupper>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2bfe      	cmp	r3, #254	; 0xfe
 8003abe:	d80e      	bhi.n	8003ade <cmp_lfn+0x8a>
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	617a      	str	r2, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f002 fc24 	bl	800631c <ff_wtoupper>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	89fb      	ldrh	r3, [r7, #14]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d008      	beq.n	8003af0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e01f      	b.n	8003b22 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003ae2:	89bb      	ldrh	r3, [r7, #12]
 8003ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d001      	beq.n	8003af0 <cmp_lfn+0x9c>
 8003aec:	2300      	movs	r3, #0
 8003aee:	e018      	b.n	8003b22 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3301      	adds	r3, #1
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d9bf      	bls.n	8003a7c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <cmp_lfn+0xcc>
 8003b08:	89fb      	ldrh	r3, [r7, #14]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <cmp_lfn+0xcc>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <cmp_lfn+0xcc>
		return 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8003b20:	2301      	movs	r3, #1
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	080064f0 	.word	0x080064f0

08003b30 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	460b      	mov	r3, r1
 8003b40:	71fb      	strb	r3, [r7, #7]
 8003b42:	4613      	mov	r3, r2
 8003b44:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	330d      	adds	r3, #13
 8003b4a:	79ba      	ldrb	r2, [r7, #6]
 8003b4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	330b      	adds	r3, #11
 8003b52:	220f      	movs	r2, #15
 8003b54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	331a      	adds	r3, #26
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	331b      	adds	r3, #27
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	4613      	mov	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	82fb      	strh	r3, [r7, #22]
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003b86:	8afb      	ldrh	r3, [r7, #22]
 8003b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <fit_lfn+0x70>
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	61fa      	str	r2, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <fit_lfn+0xe4>)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	8afa      	ldrh	r2, [r7, #22]
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	b299      	uxth	r1, r3
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <fit_lfn+0xe4>)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	b2ca      	uxtb	r2, r1
 8003bca:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003bcc:	8afb      	ldrh	r3, [r7, #22]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <fit_lfn+0xa8>
 8003bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d9d0      	bls.n	8003b86 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8003be4:	8afb      	ldrh	r3, [r7, #22]
 8003be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d006      	beq.n	8003bfc <fit_lfn+0xcc>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <fit_lfn+0xd4>
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c02:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	79fa      	ldrb	r2, [r7, #7]
 8003c08:	701a      	strb	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	080064f0 	.word	0x080064f0

08003c18 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	; 0x30
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003c26:	220b      	movs	r2, #11
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7fe fd22 	bl	8002674 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d92b      	bls.n	8003c8e <gen_numname+0x76>
		sr = seq;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003c3a:	e022      	b.n	8003c82 <gen_numname+0x6a>
			wc = *lfn++;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4a:	e017      	b.n	8003c7c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005a      	lsls	r2, r3, #1
 8003c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	4413      	add	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003c5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <gen_numname+0x5e>
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003c70:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003c74:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	3301      	adds	r3, #1
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	d9e4      	bls.n	8003c4c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1d8      	bne.n	8003c3c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003c8e:	2307      	movs	r3, #7
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3330      	adds	r3, #48	; 0x30
 8003c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8003ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ca6:	2b39      	cmp	r3, #57	; 0x39
 8003ca8:	d904      	bls.n	8003cb4 <gen_numname+0x9c>
 8003caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cae:	3307      	adds	r3, #7
 8003cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	1e5a      	subs	r2, r3, #1
 8003cb8:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cba:	3330      	adds	r3, #48	; 0x30
 8003cbc:	443b      	add	r3, r7
 8003cbe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003cc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1df      	bne.n	8003c92 <gen_numname+0x7a>
	ns[i] = '~';
 8003cd2:	f107 0214 	add.w	r2, r7, #20
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	4413      	add	r3, r2
 8003cda:	227e      	movs	r2, #126	; 0x7e
 8003cdc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e002      	b.n	8003cea <gen_numname+0xd2>
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d205      	bcs.n	8003cfe <gen_numname+0xe6>
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d1f2      	bne.n	8003ce4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	d807      	bhi.n	8003d14 <gen_numname+0xfc>
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d0a:	3330      	adds	r3, #48	; 0x30
 8003d0c:	443b      	add	r3, r7
 8003d0e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003d12:	e000      	b.n	8003d16 <gen_numname+0xfe>
 8003d14:	2120      	movs	r1, #32
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	460a      	mov	r2, r1
 8003d22:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	2b07      	cmp	r3, #7
 8003d28:	d9e9      	bls.n	8003cfe <gen_numname+0xe6>
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	3730      	adds	r7, #48	; 0x30
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003d40:	230b      	movs	r3, #11
 8003d42:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	0852      	lsrs	r2, r2, #1
 8003d4a:	01db      	lsls	r3, r3, #7
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	6079      	str	r1, [r7, #4]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	4413      	add	r3, r2
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ed      	bne.n	8003d44 <sum_sfn+0x10>
	return sum;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fbad 	bl	80034de <dir_sdi>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <dir_find+0x1e>
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	e0b8      	b.n	8003f04 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003d92:	23ff      	movs	r3, #255	; 0xff
 8003d94:	753b      	strb	r3, [r7, #20]
 8003d96:	7d3b      	ldrb	r3, [r7, #20]
 8003d98:	757b      	strb	r3, [r7, #21]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da4:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7fe fee3 	bl	8002b84 <move_window>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 8097 	bne.w	8003ef8 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003dda:	7dbb      	ldrb	r3, [r7, #22]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <dir_find+0x72>
 8003de0:	2304      	movs	r3, #4
 8003de2:	75fb      	strb	r3, [r7, #23]
 8003de4:	e08d      	b.n	8003f02 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	330b      	adds	r3, #11
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df0:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003df2:	7dbb      	ldrb	r3, [r7, #22]
 8003df4:	2be5      	cmp	r3, #229	; 0xe5
 8003df6:	d007      	beq.n	8003e08 <dir_find+0x94>
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <dir_find+0xa6>
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d008      	beq.n	8003e1a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003e08:	23ff      	movs	r3, #255	; 0xff
 8003e0a:	757b      	strb	r3, [r7, #21]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e16:	849a      	strh	r2, [r3, #36]	; 0x24
 8003e18:	e063      	b.n	8003ee2 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b0f      	cmp	r3, #15
 8003e1e:	d137      	bne.n	8003e90 <dir_find+0x11c>
				if (dp->lfn) {
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05a      	beq.n	8003ee2 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003e2c:	7dbb      	ldrb	r3, [r7, #22]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	7b5b      	ldrb	r3, [r3, #13]
 8003e3a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003e3c:	7dbb      	ldrb	r3, [r7, #22]
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e42:	75bb      	strb	r3, [r7, #22]
 8003e44:	7dbb      	ldrb	r3, [r7, #22]
 8003e46:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	88da      	ldrh	r2, [r3, #6]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e56:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003e58:	7dba      	ldrb	r2, [r7, #22]
 8003e5a:	7d7b      	ldrb	r3, [r7, #21]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d114      	bne.n	8003e8a <dir_find+0x116>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	330d      	adds	r3, #13
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	7d3a      	ldrb	r2, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d10e      	bne.n	8003e8a <dir_find+0x116>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fdec 	bl	8003a54 <cmp_lfn>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <dir_find+0x116>
 8003e82:	7d7b      	ldrb	r3, [r7, #21]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e000      	b.n	8003e8c <dir_find+0x118>
 8003e8a:	23ff      	movs	r3, #255	; 0xff
 8003e8c:	757b      	strb	r3, [r7, #21]
 8003e8e:	e028      	b.n	8003ee2 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003e90:	7d7b      	ldrb	r3, [r7, #21]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <dir_find+0x132>
 8003e96:	6938      	ldr	r0, [r7, #16]
 8003e98:	f7ff ff4c 	bl	8003d34 <sum_sfn>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	7d3b      	ldrb	r3, [r7, #20]
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02a      	beq.n	8003efc <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	330b      	adds	r3, #11
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <dir_find+0x15e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	220b      	movs	r2, #11
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6938      	ldr	r0, [r7, #16]
 8003ec8:	f7fe fc0c 	bl	80026e4 <mem_cmp>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d016      	beq.n	8003f00 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003ed2:	23ff      	movs	r3, #255	; 0xff
 8003ed4:	757b      	strb	r3, [r7, #21]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee0:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fbc8 	bl	800367a <dir_next>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f43f af58 	beq.w	8003da6 <dir_find+0x32>
 8003ef6:	e004      	b.n	8003f02 <dir_find+0x18e>
		if (res != FR_OK) break;
 8003ef8:	bf00      	nop
 8003efa:	e002      	b.n	8003f02 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003f00:	bf00      	nop

	return res;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08c      	sub	sp, #48	; 0x30
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	220c      	movs	r2, #12
 8003f2e:	6a39      	ldr	r1, [r7, #32]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe fb9f 	bl	8002674 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d03b      	beq.n	8003fb8 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	330b      	adds	r3, #11
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8003f54:	2301      	movs	r3, #1
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f58:	e013      	b.n	8003f82 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8003f5a:	f107 010c 	add.w	r1, r7, #12
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	6a38      	ldr	r0, [r7, #32]
 8003f64:	f7ff fe58 	bl	8003c18 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff03 	bl	8003d74 <dir_find>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	3301      	adds	r3, #1
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	2b63      	cmp	r3, #99	; 0x63
 8003f86:	d9e8      	bls.n	8003f5a <dir_register+0x4e>
 8003f88:	e000      	b.n	8003f8c <dir_register+0x80>
			if (res != FR_OK) break;
 8003f8a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d101      	bne.n	8003f96 <dir_register+0x8a>
 8003f92:	2307      	movs	r3, #7
 8003f94:	e0d8      	b.n	8004148 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d002      	beq.n	8003fa4 <dir_register+0x98>
 8003f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003fa2:	e0d1      	b.n	8004148 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	330b      	adds	r3, #11
 8003fa8:	7dfa      	ldrb	r2, [r7, #23]
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc6:	e002      	b.n	8003fce <dir_register+0xc2>
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	3301      	adds	r3, #1
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f5      	bne.n	8003fc8 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	3319      	adds	r3, #25
 8003fe0:	4a5b      	ldr	r2, [pc, #364]	; (8004150 <dir_register+0x244>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	e001      	b.n	8003ff0 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fc8b 	bl	800390e <dir_alloc>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004002:	2b00      	cmp	r3, #0
 8004004:	d15b      	bne.n	80040be <dir_register+0x1b2>
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	3b01      	subs	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d055      	beq.n	80040be <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004018:	88db      	ldrh	r3, [r3, #6]
 800401a:	461a      	mov	r2, r3
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fa5b 	bl	80034de <dir_sdi>
 8004028:	4603      	mov	r3, r0
 800402a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800402e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004032:	2b00      	cmp	r3, #0
 8004034:	d143      	bne.n	80040be <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fe78 	bl	8003d34 <sum_sfn>
 8004044:	4603      	mov	r3, r0
 8004046:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f7fe fd92 	bl	8002b84 <move_window>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800406a:	2b00      	cmp	r3, #0
 800406c:	d126      	bne.n	80040bc <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004074:	6a18      	ldr	r0, [r3, #32]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407c:	6959      	ldr	r1, [r3, #20]
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	b2da      	uxtb	r2, r3
 8004082:	7efb      	ldrb	r3, [r7, #27]
 8004084:	f7ff fd54 	bl	8003b30 <fit_lfn>
				dp->fs->wflag = 1;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004094:	2201      	movs	r2, #1
 8004096:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004098:	2100      	movs	r1, #0
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff faed 	bl	800367a <dir_next>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80040a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d107      	bne.n	80040be <dir_register+0x1b2>
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	3b01      	subs	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1c6      	bne.n	8004048 <dir_register+0x13c>
 80040ba:	e000      	b.n	80040be <dir_register+0x1b2>
				if (res != FR_OK) break;
 80040bc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80040be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d13e      	bne.n	8004144 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7fe fd53 	bl	8002b84 <move_window>
 80040de:	4603      	mov	r3, r0
 80040e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80040e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d12b      	bne.n	8004144 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	2220      	movs	r2, #32
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fad9 	bl	80026b0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	6958      	ldr	r0, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	220b      	movs	r2, #11
 8004110:	4619      	mov	r1, r3
 8004112:	f7fe faaf 	bl	8002674 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	330b      	adds	r3, #11
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	330c      	adds	r3, #12
 800412c:	f002 0218 	and.w	r2, r2, #24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004140:	2201      	movs	r2, #1
 8004142:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004148:	4618      	mov	r0, r3
 800414a:	3730      	adds	r7, #48	; 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	4ec4ec4f 	.word	0x4ec4ec4f

08004154 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	e002      	b.n	800416c <create_name+0x18>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3301      	adds	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b2f      	cmp	r3, #47	; 0x2f
 8004172:	d0f8      	beq.n	8004166 <create_name+0x12>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b5c      	cmp	r3, #92	; 0x5c
 800417a:	d0f4      	beq.n	8004166 <create_name+0x12>
	lfn = dp->lfn;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	61ba      	str	r2, [r7, #24]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800419c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800419e:	2b1f      	cmp	r3, #31
 80041a0:	d92f      	bls.n	8004202 <create_name+0xae>
 80041a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a4:	2b2f      	cmp	r3, #47	; 0x2f
 80041a6:	d02c      	beq.n	8004202 <create_name+0xae>
 80041a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041aa:	2b5c      	cmp	r3, #92	; 0x5c
 80041ac:	d029      	beq.n	8004202 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2bfe      	cmp	r3, #254	; 0xfe
 80041b2:	d901      	bls.n	80041b8 <create_name+0x64>
			return FR_INVALID_NAME;
 80041b4:	2306      	movs	r3, #6
 80041b6:	e186      	b.n	80044c6 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80041b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80041be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041c0:	2101      	movs	r1, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f002 f870 	bl	80062a8 <ff_convert>
 80041c8:	4603      	mov	r3, r0
 80041ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80041cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <create_name+0x82>
 80041d2:	2306      	movs	r3, #6
 80041d4:	e177      	b.n	80044c6 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80041d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041d8:	2b7f      	cmp	r3, #127	; 0x7f
 80041da:	d809      	bhi.n	80041f0 <create_name+0x9c>
 80041dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041de:	4619      	mov	r1, r3
 80041e0:	488e      	ldr	r0, [pc, #568]	; (800441c <create_name+0x2c8>)
 80041e2:	f7fe faa5 	bl	8002730 <chk_chr>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <create_name+0x9c>
			return FR_INVALID_NAME;
 80041ec:	2306      	movs	r3, #6
 80041ee:	e16a      	b.n	80044c6 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	617a      	str	r2, [r7, #20]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004200:	e7c5      	b.n	800418e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	441a      	add	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800420c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800420e:	2b1f      	cmp	r3, #31
 8004210:	d801      	bhi.n	8004216 <create_name+0xc2>
 8004212:	2304      	movs	r3, #4
 8004214:	e000      	b.n	8004218 <create_name+0xc4>
 8004216:	2300      	movs	r3, #0
 8004218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800421c:	e011      	b.n	8004242 <create_name+0xee>
		w = lfn[di - 1];
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004224:	3b01      	subs	r3, #1
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004232:	2b20      	cmp	r3, #32
 8004234:	d002      	beq.n	800423c <create_name+0xe8>
 8004236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004238:	2b2e      	cmp	r3, #46	; 0x2e
 800423a:	d106      	bne.n	800424a <create_name+0xf6>
		di--;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3b01      	subs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ea      	bne.n	800421e <create_name+0xca>
 8004248:	e000      	b.n	800424c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800424a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <create_name+0x102>
 8004252:	2306      	movs	r3, #6
 8004254:	e137      	b.n	80044c6 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	2200      	movs	r2, #0
 8004260:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	220b      	movs	r2, #11
 800426c:	2120      	movs	r1, #32
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fa1e 	bl	80026b0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e002      	b.n	8004280 <create_name+0x12c>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	3301      	adds	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	2b20      	cmp	r3, #32
 800428c:	d0f5      	beq.n	800427a <create_name+0x126>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	2b2e      	cmp	r3, #46	; 0x2e
 800429a:	d0ee      	beq.n	800427a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <create_name+0x162>
 80042a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042a6:	f043 0303 	orr.w	r3, r3, #3
 80042aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80042ae:	e002      	b.n	80042b6 <create_name+0x162>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <create_name+0x17c>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80042c2:	3b01      	subs	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	2b2e      	cmp	r3, #46	; 0x2e
 80042ce:	d1ef      	bne.n	80042b0 <create_name+0x15c>

	b = i = 0; ni = 8;
 80042d0:	2300      	movs	r3, #0
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	2300      	movs	r3, #0
 80042d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80042da:	2308      	movs	r3, #8
 80042dc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	61ba      	str	r2, [r7, #24]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80042ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8091 	beq.w	8004418 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80042f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d006      	beq.n	800430a <create_name+0x1b6>
 80042fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004300:	d10a      	bne.n	8004318 <create_name+0x1c4>
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	429a      	cmp	r2, r3
 8004308:	d006      	beq.n	8004318 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800430a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800430e:	f043 0303 	orr.w	r3, r3, #3
 8004312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004316:	e07e      	b.n	8004416 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	429a      	cmp	r2, r3
 800431e:	d203      	bcs.n	8004328 <create_name+0x1d4>
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	429a      	cmp	r2, r3
 8004326:	d123      	bne.n	8004370 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b0b      	cmp	r3, #11
 800432c:	d106      	bne.n	800433c <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800432e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004332:	f043 0303 	orr.w	r3, r3, #3
 8004336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800433a:	e076      	b.n	800442a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	d005      	beq.n	8004350 <create_name+0x1fc>
 8004344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004348:	f043 0303 	orr.w	r3, r3, #3
 800434c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	429a      	cmp	r2, r3
 8004356:	d867      	bhi.n	8004428 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	2308      	movs	r3, #8
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	230b      	movs	r3, #11
 8004362:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800436e:	e052      	b.n	8004416 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004372:	2b7f      	cmp	r3, #127	; 0x7f
 8004374:	d914      	bls.n	80043a0 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f001 ff94 	bl	80062a8 <ff_convert>
 8004380:	4603      	mov	r3, r0
 8004382:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <create_name+0x240>
 800438a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800438c:	3b80      	subs	r3, #128	; 0x80
 800438e:	4a24      	ldr	r2, [pc, #144]	; (8004420 <create_name+0x2cc>)
 8004390:	5cd3      	ldrb	r3, [r2, r3]
 8004392:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004398:	f043 0302 	orr.w	r3, r3, #2
 800439c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80043a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <create_name+0x262>
 80043a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043a8:	4619      	mov	r1, r3
 80043aa:	481e      	ldr	r0, [pc, #120]	; (8004424 <create_name+0x2d0>)
 80043ac:	f7fe f9c0 	bl	8002730 <chk_chr>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80043b6:	235f      	movs	r3, #95	; 0x5f
 80043b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80043ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043be:	f043 0303 	orr.w	r3, r3, #3
 80043c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043c6:	e01b      	b.n	8004400 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80043c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d909      	bls.n	80043e2 <create_name+0x28e>
 80043ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043d0:	2b5a      	cmp	r3, #90	; 0x5a
 80043d2:	d806      	bhi.n	80043e2 <create_name+0x28e>
					b |= 2;
 80043d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043d8:	f043 0302 	orr.w	r3, r3, #2
 80043dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80043e0:	e00e      	b.n	8004400 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80043e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043e4:	2b60      	cmp	r3, #96	; 0x60
 80043e6:	d90b      	bls.n	8004400 <create_name+0x2ac>
 80043e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043ea:	2b7a      	cmp	r3, #122	; 0x7a
 80043ec:	d808      	bhi.n	8004400 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 80043ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80043fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043fc:	3b20      	subs	r3, #32
 80043fe:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	6239      	str	r1, [r7, #32]
 800440e:	4413      	add	r3, r2
 8004410:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004416:	e762      	b.n	80042de <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8004418:	bf00      	nop
 800441a:	e006      	b.n	800442a <create_name+0x2d6>
 800441c:	08006418 	.word	0x08006418
 8004420:	08006470 	.word	0x08006470
 8004424:	08006424 	.word	0x08006424
			if (si > di) break;			/* No extension */
 8004428:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2be5      	cmp	r3, #229	; 0xe5
 8004436:	d105      	bne.n	8004444 <create_name+0x2f0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2205      	movs	r2, #5
 8004442:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b08      	cmp	r3, #8
 8004448:	d104      	bne.n	8004454 <create_name+0x300>
 800444a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d005      	beq.n	800446c <create_name+0x318>
 8004460:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b03      	cmp	r3, #3
 800446a:	d105      	bne.n	8004478 <create_name+0x324>
		cf |= NS_LFN;
 800446c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004470:	f043 0302 	orr.w	r3, r3, #2
 8004474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d117      	bne.n	80044b4 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004484:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <create_name+0x348>
 8004490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004494:	f043 0310 	orr.w	r3, r3, #16
 8004498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800449c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d105      	bne.n	80044b4 <create_name+0x360>
 80044a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044ac:	f043 0308 	orr.w	r3, r3, #8
 80044b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	330b      	adds	r3, #11
 80044be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80044c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80044c4:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3728      	adds	r7, #40	; 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop

080044d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b2f      	cmp	r3, #47	; 0x2f
 80044e0:	d003      	beq.n	80044ea <follow_path+0x1a>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b5c      	cmp	r3, #92	; 0x5c
 80044e8:	d102      	bne.n	80044f0 <follow_path+0x20>
		path++;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b1f      	cmp	r3, #31
 8004502:	d80c      	bhi.n	800451e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004504:	2100      	movs	r1, #0
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fe ffe9 	bl	80034de <dir_sdi>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004516:	461a      	mov	r2, r3
 8004518:	2300      	movs	r3, #0
 800451a:	6153      	str	r3, [r2, #20]
 800451c:	e049      	b.n	80045b2 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800451e:	463b      	mov	r3, r7
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fe16 	bl	8004154 <create_name>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d13a      	bne.n	80045a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fc1e 	bl	8003d74 <dir_find>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	7adb      	ldrb	r3, [r3, #11]
 8004546:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d12b      	bne.n	80045ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d126      	bne.n	80045ac <follow_path+0xdc>
 800455e:	2305      	movs	r3, #5
 8004560:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004562:	e023      	b.n	80045ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004564:	7bbb      	ldrb	r3, [r7, #14]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d120      	bne.n	80045b0 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	330b      	adds	r3, #11
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8004586:	2305      	movs	r3, #5
 8004588:	73fb      	strb	r3, [r7, #15]
 800458a:	e012      	b.n	80045b2 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fa07 	bl	80039aa <ld_clust>
 800459c:	4602      	mov	r2, r0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80045a6:	e7ba      	b.n	800451e <follow_path+0x4e>
			if (res != FR_OK) break;
 80045a8:	bf00      	nop
 80045aa:	e002      	b.n	80045b2 <follow_path+0xe2>
				break;
 80045ac:	bf00      	nop
 80045ae:	e000      	b.n	80045b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80045b0:	bf00      	nop
		}
	}

	return res;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295
 80045c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d031      	beq.n	8004636 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e002      	b.n	80045e0 <get_ldnumber+0x24>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	3301      	adds	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b1f      	cmp	r3, #31
 80045e6:	d903      	bls.n	80045f0 <get_ldnumber+0x34>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b3a      	cmp	r3, #58	; 0x3a
 80045ee:	d1f4      	bne.n	80045da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b3a      	cmp	r3, #58	; 0x3a
 80045f6:	d11c      	bne.n	8004632 <get_ldnumber+0x76>
			tp = *path;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	60fa      	str	r2, [r7, #12]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	3b30      	subs	r3, #48	; 0x30
 8004608:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b09      	cmp	r3, #9
 800460e:	d80e      	bhi.n	800462e <get_ldnumber+0x72>
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	429a      	cmp	r2, r3
 8004616:	d10a      	bne.n	800462e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <get_ldnumber+0x72>
					vol = (int)i;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	3301      	adds	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	e002      	b.n	8004638 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004636:	693b      	ldr	r3, [r7, #16]
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
	...

08004644 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	2200      	movs	r2, #0
 8004656:	711a      	strb	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	461a      	mov	r2, r3
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fe fa8b 	bl	8002b84 <move_window>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <check_fs+0x34>
		return 3;
 8004674:	2303      	movs	r3, #3
 8004676:	e04a      	b.n	800470e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800467e:	3301      	adds	r3, #1
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	b21a      	sxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800468c:	b21b      	sxth	r3, r3
 800468e:	4313      	orrs	r3, r2
 8004690:	b21b      	sxth	r3, r3
 8004692:	4a21      	ldr	r2, [pc, #132]	; (8004718 <check_fs+0xd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d001      	beq.n	800469c <check_fs+0x58>
		return 2;
 8004698:	2302      	movs	r3, #2
 800469a:	e038      	b.n	800470e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3336      	adds	r3, #54	; 0x36
 80046a0:	3303      	adds	r3, #3
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	061a      	lsls	r2, r3, #24
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3336      	adds	r3, #54	; 0x36
 80046aa:	3302      	adds	r3, #2
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	4313      	orrs	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	3236      	adds	r2, #54	; 0x36
 80046b6:	3201      	adds	r2, #1
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	0212      	lsls	r2, r2, #8
 80046bc:	4313      	orrs	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	4a14      	ldr	r2, [pc, #80]	; (800471c <check_fs+0xd8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <check_fs+0x90>
		return 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e01c      	b.n	800470e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3352      	adds	r3, #82	; 0x52
 80046d8:	3303      	adds	r3, #3
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	061a      	lsls	r2, r3, #24
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3352      	adds	r3, #82	; 0x52
 80046e2:	3302      	adds	r3, #2
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	4313      	orrs	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	3252      	adds	r2, #82	; 0x52
 80046ee:	3201      	adds	r2, #1
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	0212      	lsls	r2, r2, #8
 80046f4:	4313      	orrs	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004702:	4a06      	ldr	r2, [pc, #24]	; (800471c <check_fs+0xd8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <check_fs+0xc8>
		return 0;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <check_fs+0xca>

	return 1;
 800470c:	2301      	movs	r3, #1
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	ffffaa55 	.word	0xffffaa55
 800471c:	00544146 	.word	0x00544146

08004720 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b096      	sub	sp, #88	; 0x58
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004734:	68b8      	ldr	r0, [r7, #8]
 8004736:	f7ff ff41 	bl	80045bc <get_ldnumber>
 800473a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800473c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	da01      	bge.n	8004746 <find_volume+0x26>
 8004742:	230b      	movs	r3, #11
 8004744:	e311      	b.n	8004d6a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004746:	4a98      	ldr	r2, [pc, #608]	; (80049a8 <find_volume+0x288>)
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <find_volume+0x3a>
 8004756:	230c      	movs	r3, #12
 8004758:	e307      	b.n	8004d6a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800475e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01c      	beq.n	80047a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd fedf 	bl	8002538 <disk_status>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <find_volume+0x82>
 8004792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800479e:	230a      	movs	r3, #10
 80047a0:	e2e3      	b.n	8004d6a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80047a2:	2300      	movs	r3, #0
 80047a4:	e2e1      	b.n	8004d6a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fd fed1 	bl	800256c <disk_initialize>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80047d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80047dc:	2303      	movs	r3, #3
 80047de:	e2c4      	b.n	8004d6a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <find_volume+0xd6>
 80047e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80047f2:	230a      	movs	r3, #10
 80047f4:	e2b9      	b.n	8004d6a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fc:	7858      	ldrb	r0, [r3, #1]
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004804:	330a      	adds	r3, #10
 8004806:	461a      	mov	r2, r3
 8004808:	2102      	movs	r1, #2
 800480a:	f7fd ff15 	bl	8002638 <disk_ioctl>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481a:	895b      	ldrh	r3, [r3, #10]
 800481c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004820:	d306      	bcc.n	8004830 <find_volume+0x110>
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	895b      	ldrh	r3, [r3, #10]
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	d901      	bls.n	8004834 <find_volume+0x114>
 8004830:	2301      	movs	r3, #1
 8004832:	e29a      	b.n	8004d6a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004838:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800483a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800483c:	f7ff ff02 	bl	8004644 <check_fs>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800484a:	2b01      	cmp	r3, #1
 800484c:	d153      	bne.n	80048f6 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800484e:	2300      	movs	r3, #0
 8004850:	643b      	str	r3, [r7, #64]	; 0x40
 8004852:	e028      	b.n	80048a6 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800485e:	4413      	add	r3, r2
 8004860:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	3304      	adds	r3, #4
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <find_volume+0x172>
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	330b      	adds	r3, #11
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	061a      	lsls	r2, r3, #24
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	330a      	adds	r3, #10
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	4313      	orrs	r3, r2
 800487e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004880:	3209      	adds	r2, #9
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	0212      	lsls	r2, r2, #8
 8004886:	4313      	orrs	r3, r2
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	3208      	adds	r2, #8
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	431a      	orrs	r2, r3
 8004890:	e000      	b.n	8004894 <find_volume+0x174>
 8004892:	2200      	movs	r2, #0
 8004894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	3358      	adds	r3, #88	; 0x58
 800489a:	443b      	add	r3, r7
 800489c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80048a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a2:	3301      	adds	r3, #1
 80048a4:	643b      	str	r3, [r7, #64]	; 0x40
 80048a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d9d3      	bls.n	8004854 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80048ac:	2300      	movs	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80048b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <find_volume+0x19c>
 80048b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b8:	3b01      	subs	r3, #1
 80048ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	3358      	adds	r3, #88	; 0x58
 80048c2:	443b      	add	r3, r7
 80048c4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80048ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <find_volume+0x1bc>
 80048d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048d4:	f7ff feb6 	bl	8004644 <check_fs>
 80048d8:	4603      	mov	r3, r0
 80048da:	e000      	b.n	80048de <find_volume+0x1be>
 80048dc:	2302      	movs	r3, #2
 80048de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80048e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <find_volume+0x1d6>
 80048ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ec:	3301      	adds	r3, #1
 80048ee:	643b      	str	r3, [r7, #64]	; 0x40
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d9e2      	bls.n	80048bc <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80048f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d101      	bne.n	8004902 <find_volume+0x1e2>
 80048fe:	2301      	movs	r3, #1
 8004900:	e233      	b.n	8004d6a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004902:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <find_volume+0x1ee>
 800490a:	230d      	movs	r3, #13
 800490c:	e22d      	b.n	8004d6a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	7b1b      	ldrb	r3, [r3, #12]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	b21a      	sxth	r2, r3
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	7adb      	ldrb	r3, [r3, #11]
 800491a:	b21b      	sxth	r3, r3
 800491c:	4313      	orrs	r3, r2
 800491e:	b21a      	sxth	r2, r3
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004926:	895b      	ldrh	r3, [r3, #10]
 8004928:	b21b      	sxth	r3, r3
 800492a:	429a      	cmp	r2, r3
 800492c:	d001      	beq.n	8004932 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800492e:	230d      	movs	r3, #13
 8004930:	e21b      	b.n	8004d6a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	7ddb      	ldrb	r3, [r3, #23]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	b21a      	sxth	r2, r3
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	7d9b      	ldrb	r3, [r3, #22]
 800493e:	b21b      	sxth	r3, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	b21b      	sxth	r3, r3
 8004944:	b29b      	uxth	r3, r3
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d112      	bne.n	8004974 <find_volume+0x254>
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004954:	061a      	lsls	r2, r3, #24
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	4313      	orrs	r3, r2
 8004960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004962:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004966:	0212      	lsls	r2, r2, #8
 8004968:	4313      	orrs	r3, r2
 800496a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004970:	4313      	orrs	r3, r2
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	461a      	mov	r2, r3
 800497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	7c1a      	ldrb	r2, [r3, #16]
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004992:	78db      	ldrb	r3, [r3, #3]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d009      	beq.n	80049ac <find_volume+0x28c>
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499e:	78db      	ldrb	r3, [r3, #3]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d003      	beq.n	80049ac <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80049a4:	230d      	movs	r3, #13
 80049a6:	e1e0      	b.n	8004d6a <find_volume+0x64a>
 80049a8:	20002108 	.word	0x20002108
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b2:	78db      	ldrb	r3, [r3, #3]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	7b5a      	ldrb	r2, [r3, #13]
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c8:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	789b      	ldrb	r3, [r3, #2]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <find_volume+0x2d0>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049dc:	789b      	ldrb	r3, [r3, #2]
 80049de:	461a      	mov	r2, r3
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e6:	789b      	ldrb	r3, [r3, #2]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80049f0:	230d      	movs	r3, #13
 80049f2:	e1ba      	b.n	8004d6a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	7c9b      	ldrb	r3, [r3, #18]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	b21a      	sxth	r2, r3
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	7c5b      	ldrb	r3, [r3, #17]
 8004a00:	b21b      	sxth	r3, r3
 8004a02:	4313      	orrs	r3, r2
 8004a04:	b21b      	sxth	r3, r3
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a16:	891b      	ldrh	r3, [r3, #8]
 8004a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a1e:	8952      	ldrh	r2, [r2, #10]
 8004a20:	0952      	lsrs	r2, r2, #5
 8004a22:	b292      	uxth	r2, r2
 8004a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a28:	fb01 f202 	mul.w	r2, r1, r2
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8004a34:	230d      	movs	r3, #13
 8004a36:	e198      	b.n	8004d6a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	7d1b      	ldrb	r3, [r3, #20]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	b21a      	sxth	r2, r3
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	7cdb      	ldrb	r3, [r3, #19]
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d112      	bne.n	8004a7a <find_volume+0x35a>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a5a:	061a      	lsls	r2, r3, #24
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	4313      	orrs	r3, r2
 8004a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a68:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004a6c:	0212      	lsls	r2, r2, #8
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	7bdb      	ldrb	r3, [r3, #15]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	b21a      	sxth	r2, r3
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	7b9b      	ldrb	r3, [r3, #14]
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	b21b      	sxth	r3, r3
 8004a8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004a8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <find_volume+0x378>
 8004a94:	230d      	movs	r3, #13
 8004a96:	e168      	b.n	8004d6a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004a98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	4413      	add	r3, r2
 8004a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004aa4:	8911      	ldrh	r1, [r2, #8]
 8004aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004aac:	8952      	ldrh	r2, [r2, #10]
 8004aae:	0952      	lsrs	r2, r2, #5
 8004ab0:	b292      	uxth	r2, r2
 8004ab2:	fbb1 f2f2 	udiv	r2, r1, r2
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	4413      	add	r3, r2
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d201      	bcs.n	8004ac8 <find_volume+0x3a8>
 8004ac4:	230d      	movs	r3, #13
 8004ac6:	e150      	b.n	8004d6a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ad4:	7892      	ldrb	r2, [r2, #2]
 8004ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <find_volume+0x3c6>
 8004ae2:	230d      	movs	r3, #13
 8004ae4:	e141      	b.n	8004d6a <find_volume+0x64a>
	fmt = FS_FAT12;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d902      	bls.n	8004afc <find_volume+0x3dc>
 8004af6:	2302      	movs	r3, #2
 8004af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d902      	bls.n	8004b0c <find_volume+0x3ec>
 8004b06:	2303      	movs	r3, #3
 8004b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	3302      	adds	r3, #2
 8004b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b16:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b22:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b28:	4413      	add	r3, r2
 8004b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b30:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8004b32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	4413      	add	r3, r2
 8004b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b3e:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8004b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d124      	bne.n	8004b92 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4e:	891b      	ldrh	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <find_volume+0x438>
 8004b54:	230d      	movs	r3, #13
 8004b56:	e108      	b.n	8004d6a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b5e:	061a      	lsls	r2, r3, #24
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004b70:	0212      	lsls	r2, r2, #8
 8004b72:	4313      	orrs	r3, r2
 8004b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b76:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b82:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b90:	e02b      	b.n	8004bea <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b98:	891b      	ldrh	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <find_volume+0x482>
 8004b9e:	230d      	movs	r3, #13
 8004ba0:	e0e3      	b.n	8004d6a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bac:	4413      	add	r3, r2
 8004bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bb4:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d105      	bne.n	8004bca <find_volume+0x4aa>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	e00e      	b.n	8004be8 <find_volume+0x4c8>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	085a      	lsrs	r2, r3, #1
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004be8:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf8:	895b      	ldrh	r3, [r3, #10]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfe:	440b      	add	r3, r1
 8004c00:	3b01      	subs	r3, #1
 8004c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c04:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004c08:	8949      	ldrh	r1, [r1, #10]
 8004c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d201      	bcs.n	8004c16 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8004c12:	230d      	movs	r3, #13
 8004c14:	e0a9      	b.n	8004d6a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	6113      	str	r3, [r2, #16]
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c32:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004c3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d17a      	bne.n	8004d3c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	b21a      	sxth	r2, r3
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d16d      	bne.n	8004d3c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c62:	3301      	adds	r3, #1
 8004c64:	4619      	mov	r1, r3
 8004c66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c68:	f7fd ff8c 	bl	8002b84 <move_window>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d164      	bne.n	8004d3c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c78:	2200      	movs	r2, #0
 8004c7a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	b21a      	sxth	r2, r3
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004c8c:	b21b      	sxth	r3, r3
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b21b      	sxth	r3, r3
 8004c92:	4a38      	ldr	r2, [pc, #224]	; (8004d74 <find_volume+0x654>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d151      	bne.n	8004d3c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	78db      	ldrb	r3, [r3, #3]
 8004c9c:	061a      	lsls	r2, r3, #24
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	789b      	ldrb	r3, [r3, #2]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca8:	7852      	ldrb	r2, [r2, #1]
 8004caa:	0212      	lsls	r2, r2, #8
 8004cac:	4313      	orrs	r3, r2
 8004cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	4a30      	ldr	r2, [pc, #192]	; (8004d78 <find_volume+0x658>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d140      	bne.n	8004d3c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8004cc0:	061a      	lsls	r2, r3, #24
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cce:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8004cd2:	0212      	lsls	r2, r2, #8
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <find_volume+0x65c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d12b      	bne.n	8004d3c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8004cea:	061a      	lsls	r2, r3, #24
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cf8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8004cfc:	0212      	lsls	r2, r2, #8
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d02:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8004d06:	4313      	orrs	r3, r2
 8004d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d0e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8004d16:	061a      	lsls	r2, r3, #24
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	4313      	orrs	r3, r2
 8004d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d24:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8004d28:	0212      	lsls	r2, r2, #8
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d2e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8004d32:	4313      	orrs	r3, r2
 8004d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d3a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d42:	461a      	mov	r2, r3
 8004d44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d48:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <find_volume+0x660>)
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <find_volume+0x660>)
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <find_volume+0x660>)
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d60:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004d62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d64:	f7fd fe92 	bl	8002a8c <clear_lock>
#endif

	return FR_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3758      	adds	r7, #88	; 0x58
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	ffffaa55 	.word	0xffffaa55
 8004d78:	41615252 	.word	0x41615252
 8004d7c:	61417272 	.word	0x61417272
 8004d80:	2000210c 	.word	0x2000210c

08004d84 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02a      	beq.n	8004dec <validate+0x68>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d024      	beq.n	8004dec <validate+0x68>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <validate+0x68>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc0:	88da      	ldrh	r2, [r3, #6]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc8:	889b      	ldrh	r3, [r3, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d10e      	bne.n	8004dec <validate+0x68>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd fbab 	bl	8002538 <disk_status>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8004dec:	2309      	movs	r3, #9
 8004dee:	e000      	b.n	8004df2 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fbd2 	bl	80045bc <get_ldnumber>
 8004e18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	da01      	bge.n	8004e24 <f_mount+0x28>
 8004e20:	230b      	movs	r3, #11
 8004e22:	e02f      	b.n	8004e84 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <f_mount+0x90>)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8004e34:	69b8      	ldr	r0, [r7, #24]
 8004e36:	f7fd fe29 	bl	8002a8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d004      	beq.n	8004e54 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	490d      	ldr	r1, [pc, #52]	; (8004e8c <f_mount+0x90>)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <f_mount+0x6e>
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <f_mount+0x72>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e00a      	b.n	8004e84 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004e6e:	f107 0108 	add.w	r1, r7, #8
 8004e72:	f107 030c 	add.w	r3, r7, #12
 8004e76:	2200      	movs	r2, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fc51 	bl	8004720 <find_volume>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20002108 	.word	0x20002108

08004e90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e9e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8004ea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ea6:	f843 1c50 	str.w	r1, [r3, #-80]
 8004eaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004eae:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004eb6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <f_open+0x32>
 8004ebe:	2309      	movs	r3, #9
 8004ec0:	e2f7      	b.n	80054b2 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8004ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ec6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004ed4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ede:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004eea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004eee:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	f107 0118 	add.w	r1, r7, #24
 8004efc:	3910      	subs	r1, #16
 8004efe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f02:	3b18      	subs	r3, #24
 8004f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fc09 	bl	8004720 <find_volume>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004f14:	f102 0217 	add.w	r2, r2, #23
 8004f18:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004f1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004f1e:	f103 0317 	add.w	r3, r3, #23
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 82bf 	bne.w	80054a8 <f_open+0x618>
		INIT_BUF(dj);
 8004f2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f107 0318 	add.w	r3, r7, #24
 8004f34:	3b04      	subs	r3, #4
 8004f36:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8004f3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4bd4      	ldr	r3, [pc, #848]	; (8005294 <f_open+0x404>)
 8004f42:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8004f46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f4a:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8004f4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f52:	3b18      	subs	r3, #24
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff faba 	bl	80044d0 <follow_path>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004f62:	f102 0217 	add.w	r2, r2, #23
 8004f66:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8004f68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f6c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8004f70:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004f74:	f102 0210 	add.w	r2, r2, #16
 8004f78:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004f7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004f7e:	f103 0317 	add.w	r3, r3, #23
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d126      	bne.n	8004fd6 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8004f88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004f8c:	f103 0310 	add.w	r3, r3, #16
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <f_open+0x114>
				res = FR_INVALID_NAME;
 8004f96:	2306      	movs	r3, #6
 8004f98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004f9c:	f102 0217 	add.w	r2, r2, #23
 8004fa0:	7013      	strb	r3, [r2, #0]
 8004fa2:	e018      	b.n	8004fd6 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004fa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fa8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004fc0:	3b18      	subs	r3, #24
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fd fbcd 	bl	8002764 <chk_lock>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004fd0:	f102 0217 	add.w	r2, r2, #23
 8004fd4:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004fd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fda:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8004fde:	f003 031c 	and.w	r3, r3, #28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 813c 	beq.w	8005260 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8004fe8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004fec:	f103 0317 	add.w	r3, r3, #23
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02e      	beq.n	8005054 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004ff6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004ffa:	f103 0317 	add.w	r3, r3, #23
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d112      	bne.n	800502a <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005004:	f7fd fc1e 	bl	8002844 <enq_lock>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <f_open+0x18e>
 800500e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005012:	3b18      	subs	r3, #24
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe ff79 	bl	8003f0c <dir_register>
 800501a:	4603      	mov	r3, r0
 800501c:	e000      	b.n	8005020 <f_open+0x190>
 800501e:	2312      	movs	r3, #18
 8005020:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005024:	f102 0217 	add.w	r2, r2, #23
 8005028:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800502a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800502e:	461a      	mov	r2, r3
 8005030:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005034:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005038:	f043 0308 	orr.w	r3, r3, #8
 800503c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005040:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005044:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005048:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800504c:	f102 0210 	add.w	r2, r2, #16
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e01f      	b.n	8005094 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005054:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005058:	f103 0310 	add.w	r3, r3, #16
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330b      	adds	r3, #11
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 0311 	and.w	r3, r3, #17
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <f_open+0x1e8>
					res = FR_DENIED;
 800506a:	2307      	movs	r3, #7
 800506c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005070:	f102 0217 	add.w	r2, r2, #23
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	e00d      	b.n	8005094 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005078:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800507c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <f_open+0x204>
						res = FR_EXIST;
 8005088:	2308      	movs	r3, #8
 800508a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800508e:	f102 0217 	add.w	r2, r2, #23
 8005092:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005094:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005098:	f103 0317 	add.w	r3, r3, #23
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 8113 	bne.w	80052ca <f_open+0x43a>
 80050a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80050a8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 810a 	beq.w	80052ca <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 80050b6:	f7fd f9dd 	bl	8002474 <get_fattime>
 80050ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80050be:	f103 030c 	add.w	r3, r3, #12
 80050c2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80050c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80050c8:	f103 0310 	add.w	r3, r3, #16
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330e      	adds	r3, #14
 80050d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80050d4:	f102 020c 	add.w	r2, r2, #12
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80050e2:	f103 030c 	add.w	r3, r3, #12
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80050f2:	f103 0310 	add.w	r3, r3, #16
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330f      	adds	r3, #15
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005102:	f103 030c 	add.w	r3, r3, #12
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0c1a      	lsrs	r2, r3, #16
 800510a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800510e:	f103 0310 	add.w	r3, r3, #16
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3310      	adds	r3, #16
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800511e:	f103 030c 	add.w	r3, r3, #12
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	0e1a      	lsrs	r2, r3, #24
 8005126:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800512a:	f103 0310 	add.w	r3, r3, #16
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3311      	adds	r3, #17
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005136:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800513a:	f103 0310 	add.w	r3, r3, #16
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330b      	adds	r3, #11
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005146:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800514a:	f103 0310 	add.w	r3, r3, #16
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	331c      	adds	r3, #28
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800515a:	f103 0310 	add.w	r3, r3, #16
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	331d      	adds	r3, #29
 8005162:	2200      	movs	r2, #0
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800516a:	f103 0310 	add.w	r3, r3, #16
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	331e      	adds	r3, #30
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800517a:	f103 0310 	add.w	r3, r3, #16
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	331f      	adds	r3, #31
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005186:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800518a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800518e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005192:	f102 0210 	add.w	r2, r2, #16
 8005196:	6811      	ldr	r1, [r2, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe fc06 	bl	80039aa <ld_clust>
 800519e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80051a2:	f103 0308 	add.w	r3, r3, #8
 80051a6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80051a8:	2100      	movs	r1, #0
 80051aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80051ae:	f103 0310 	add.w	r3, r3, #16
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	f7fe fc27 	bl	8003a06 <st_clust>
				dj.fs->wflag = 1;
 80051b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051bc:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80051c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c4:	2201      	movs	r2, #1
 80051c6:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80051c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80051cc:	f103 0308 	add.w	r3, r3, #8
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d079      	beq.n	80052ca <f_open+0x43a>
					dw = dj.fs->winsect;
 80051d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051da:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80051de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80051e8:	f102 020c 	add.w	r2, r2, #12
 80051ec:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80051ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051f2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80051f6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80051fa:	f102 0208 	add.w	r2, r2, #8
 80051fe:	6811      	ldr	r1, [r2, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe f823 	bl	800324c <remove_chain>
 8005206:	4603      	mov	r3, r0
 8005208:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800520c:	f102 0217 	add.w	r2, r2, #23
 8005210:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8005212:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005216:	f103 0317 	add.w	r3, r3, #23
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d154      	bne.n	80052ca <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005220:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005224:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8005228:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800522c:	f103 0308 	add.w	r3, r3, #8
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3b01      	subs	r3, #1
 8005234:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005238:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800523a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800523e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005242:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005246:	f102 020c 	add.w	r2, r2, #12
 800524a:	6811      	ldr	r1, [r2, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fd fc99 	bl	8002b84 <move_window>
 8005252:	4603      	mov	r3, r0
 8005254:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005258:	f102 0217 	add.w	r2, r2, #23
 800525c:	7013      	strb	r3, [r2, #0]
 800525e:	e034      	b.n	80052ca <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005260:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005264:	f103 0317 	add.w	r3, r3, #23
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d12d      	bne.n	80052ca <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800526e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005272:	f103 0310 	add.w	r3, r3, #16
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330b      	adds	r3, #11
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <f_open+0x408>
					res = FR_NO_FILE;
 8005284:	2304      	movs	r3, #4
 8005286:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800528a:	f102 0217 	add.w	r2, r2, #23
 800528e:	7013      	strb	r3, [r2, #0]
 8005290:	e01b      	b.n	80052ca <f_open+0x43a>
 8005292:	bf00      	nop
 8005294:	20002128 	.word	0x20002128
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005298:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800529c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <f_open+0x43a>
 80052a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052ac:	f103 0310 	add.w	r3, r3, #16
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330b      	adds	r3, #11
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <f_open+0x43a>
						res = FR_DENIED;
 80052be:	2307      	movs	r3, #7
 80052c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80052c4:	f102 0217 	add.w	r2, r2, #23
 80052c8:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80052ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052ce:	f103 0317 	add.w	r3, r3, #23
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d157      	bne.n	8005388 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80052d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052dc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <f_open+0x46e>
				mode |= FA__WRITTEN;
 80052e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052ec:	461a      	mov	r2, r3
 80052ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052f2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80052f6:	f043 0320 	orr.w	r3, r3, #32
 80052fa:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80052fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005302:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005310:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005314:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005318:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800531a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800531e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005326:	461a      	mov	r2, r3
 8005328:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800532c:	f103 0310 	add.w	r3, r3, #16
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005334:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005338:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005350:	3b18      	subs	r3, #24
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f7fd fa99 	bl	800288c <inc_lock>
 800535a:	4602      	mov	r2, r0
 800535c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005360:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800536a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800536e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <f_open+0x4f8>
 800537c:	2302      	movs	r3, #2
 800537e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005382:	f102 0217 	add.w	r2, r2, #23
 8005386:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005388:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800538c:	f103 0317 	add.w	r3, r3, #23
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f040 8088 	bne.w	80054a8 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8005398:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800539c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80053a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a4:	461a      	mov	r2, r3
 80053a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053aa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80053ae:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80053b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053b4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	2200      	movs	r2, #0
 80053be:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80053c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053c4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80053c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80053cc:	f102 0210 	add.w	r2, r2, #16
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fae9 	bl	80039aa <ld_clust>
 80053d8:	4602      	mov	r2, r0
 80053da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053de:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80053e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e6:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80053e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053ec:	f103 0310 	add.w	r3, r3, #16
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	331f      	adds	r3, #31
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	061a      	lsls	r2, r3, #24
 80053f8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053fc:	f103 0310 	add.w	r3, r3, #16
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	331e      	adds	r3, #30
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	4313      	orrs	r3, r2
 800540a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800540e:	f102 0210 	add.w	r2, r2, #16
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	321d      	adds	r2, #29
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	0212      	lsls	r2, r2, #8
 800541a:	4313      	orrs	r3, r2
 800541c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005420:	f102 0210 	add.w	r2, r2, #16
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	321c      	adds	r2, #28
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005430:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005434:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005438:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800543a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800543e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	461a      	mov	r2, r3
 8005448:	2300      	movs	r3, #0
 800544a:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800544c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005450:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005458:	461a      	mov	r2, r3
 800545a:	2300      	movs	r3, #0
 800545c:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800545e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005462:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546a:	461a      	mov	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005474:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005478:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800547c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005480:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005484:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8005486:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800548a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800548e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005498:	88da      	ldrh	r2, [r3, #6]
 800549a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800549e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80054a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80054a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80054ac:	f103 0317 	add.w	r3, r3, #23
 80054b0:	781b      	ldrb	r3, [r3, #0]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop

080054c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fc53 	bl	8004d84 <validate>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <f_write+0x2c>
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	e21e      	b.n	800592a <f_write+0x46a>
	if (fp->err)							/* Check error */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	79db      	ldrb	r3, [r3, #7]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054fe:	79db      	ldrb	r3, [r3, #7]
 8005500:	e213      	b.n	800592a <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005508:	799b      	ldrb	r3, [r3, #6]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005512:	2307      	movs	r3, #7
 8005514:	e209      	b.n	800592a <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	f080 81d9 	bcs.w	80058e2 <f_write+0x422>
 8005530:	2300      	movs	r3, #0
 8005532:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005534:	e1d5      	b.n	80058e2 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800554a:	8952      	ldrh	r2, [r2, #10]
 800554c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005550:	fb01 f202 	mul.w	r2, r1, r2
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 8169 	bne.w	800582e <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005570:	8952      	ldrh	r2, [r2, #10]
 8005572:	fbb3 f3f2 	udiv	r3, r3, r2
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005584:	789b      	ldrb	r3, [r3, #2]
 8005586:	3b01      	subs	r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4013      	ands	r3, r2
 800558c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800558e:	7dbb      	ldrb	r3, [r7, #22]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d15f      	bne.n	8005654 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d111      	bne.n	80055c4 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d126      	bne.n	80055fe <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fd fea7 	bl	800330e <create_chain>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24
 80055c2:	e01c      	b.n	80055fe <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4619      	mov	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7fd ff3f 	bl	800345e <clmt_clust>
 80055e0:	6278      	str	r0, [r7, #36]	; 0x24
 80055e2:	e00c      	b.n	80055fe <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f7fd fe89 	bl	800330e <create_chain>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8173 	beq.w	80058ec <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2b01      	cmp	r3, #1
 800560a:	d106      	bne.n	800561a <f_write+0x15a>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005612:	2202      	movs	r2, #2
 8005614:	71da      	strb	r2, [r3, #7]
 8005616:	2302      	movs	r3, #2
 8005618:	e187      	b.n	800592a <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d106      	bne.n	8005630 <f_write+0x170>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005628:	2201      	movs	r2, #1
 800562a:	71da      	strb	r2, [r3, #7]
 800562c:	2301      	movs	r3, #1
 800562e:	e17c      	b.n	800592a <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005636:	461a      	mov	r2, r3
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <f_write+0x194>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564e:	461a      	mov	r2, r3
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565a:	799b      	ldrb	r3, [r3, #6]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d023      	beq.n	80056ac <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005670:	7858      	ldrb	r0, [r3, #1]
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	2301      	movs	r3, #1
 800567e:	f7fc ffbb 	bl	80025f8 <disk_write>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568e:	2201      	movs	r2, #1
 8005690:	71da      	strb	r2, [r3, #7]
 8005692:	2301      	movs	r3, #1
 8005694:	e149      	b.n	800592a <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569c:	799b      	ldrb	r3, [r3, #6]
 800569e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fd fb51 	bl	8002d66 <clust2sect>
 80056c4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <f_write+0x21a>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d2:	2202      	movs	r2, #2
 80056d4:	71da      	strb	r2, [r3, #7]
 80056d6:	2302      	movs	r3, #2
 80056d8:	e127      	b.n	800592a <f_write+0x46a>
			sect += csect;
 80056da:	7dbb      	ldrb	r3, [r7, #22]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ee:	895b      	ldrh	r3, [r3, #10]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d069      	beq.n	80057d4 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005700:	7dba      	ldrb	r2, [r7, #22]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005712:	7892      	ldrb	r2, [r2, #2]
 8005714:	4293      	cmp	r3, r2
 8005716:	d90a      	bls.n	800572e <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005724:	789b      	ldrb	r3, [r3, #2]
 8005726:	461a      	mov	r2, r3
 8005728:	7dbb      	ldrb	r3, [r7, #22]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573a:	7858      	ldrb	r0, [r3, #1]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	f7fc ff59 	bl	80025f8 <disk_write>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005752:	2201      	movs	r2, #1
 8005754:	71da      	strb	r2, [r3, #7]
 8005756:	2301      	movs	r3, #1
 8005758:	e0e7      	b.n	800592a <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	429a      	cmp	r2, r3
 800576a:	d926      	bls.n	80057ba <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005786:	8952      	ldrh	r2, [r2, #10]
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	18d1      	adds	r1, r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579c:	895b      	ldrh	r3, [r3, #10]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fc ff68 	bl	8002674 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057aa:	799b      	ldrb	r3, [r3, #6]
 80057ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b8:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c6:	895b      	ldrh	r3, [r3, #10]
 80057c8:	461a      	mov	r2, r3
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	623b      	str	r3, [r7, #32]
				continue;
 80057d2:	e06e      	b.n	80058b2 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d01f      	beq.n	8005822 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d215      	bcs.n	8005822 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005802:	7858      	ldrb	r0, [r3, #1]
 8005804:	68f9      	ldr	r1, [r7, #12]
 8005806:	2301      	movs	r3, #1
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	f7fc fed5 	bl	80025b8 <disk_read>
 800580e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581a:	2201      	movs	r2, #1
 800581c:	71da      	strb	r2, [r3, #7]
 800581e:	2301      	movs	r3, #1
 8005820:	e083      	b.n	800592a <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	461a      	mov	r2, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583a:	895b      	ldrh	r3, [r3, #10]
 800583c:	4618      	mov	r0, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005852:	8952      	ldrh	r2, [r2, #10]
 8005854:	fbb3 f1f2 	udiv	r1, r3, r2
 8005858:	fb01 f202 	mul.w	r2, r1, r2
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	1ac3      	subs	r3, r0, r3
 8005860:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d901      	bls.n	800586e <f_write+0x3ae>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005882:	8952      	ldrh	r2, [r2, #10]
 8005884:	fbb3 f1f2 	udiv	r1, r3, r2
 8005888:	fb01 f202 	mul.w	r2, r1, r2
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	6a3a      	ldr	r2, [r7, #32]
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	4618      	mov	r0, r3
 8005898:	f7fc feec 	bl	8002674 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a2:	799b      	ldrb	r3, [r3, #6]
 80058a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b0:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	4413      	add	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	4413      	add	r3, r2
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058cc:	6093      	str	r3, [r2, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	441a      	add	r2, r3
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f47f ae26 	bne.w	8005536 <f_write+0x76>
 80058ea:	e000      	b.n	80058ee <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80058ec:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d907      	bls.n	8005912 <f_write+0x452>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005910:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005918:	799b      	ldrb	r3, [r3, #6]
 800591a:	f043 0320 	orr.w	r3, r3, #32
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005926:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b086      	sub	sp, #24
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff fa22 	bl	8004d84 <validate>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 80bc 	bne.w	8005ac4 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005952:	799b      	ldrb	r3, [r3, #6]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80b3 	beq.w	8005ac4 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005964:	799b      	ldrb	r3, [r3, #6]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01e      	beq.n	80059ac <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597a:	7858      	ldrb	r0, [r3, #1]
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	2301      	movs	r3, #1
 8005988:	f7fc fe36 	bl	80025f8 <disk_write>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005992:	2301      	movs	r3, #1
 8005994:	e097      	b.n	8005ac6 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599c:	799b      	ldrb	r3, [r3, #6]
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059aa:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fd f8e0 	bl	8002b84 <move_window>
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d17a      	bne.n	8005ac4 <f_sync+0x192>
				dir = fp->dir_ptr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	330b      	adds	r3, #11
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	330b      	adds	r3, #11
 80059e2:	f042 0220 	orr.w	r2, r2, #32
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	331c      	adds	r3, #28
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	331d      	adds	r3, #29
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0c1a      	lsrs	r2, r3, #16
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	331e      	adds	r3, #30
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	0e1a      	lsrs	r2, r3, #24
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	331f      	adds	r3, #31
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6938      	ldr	r0, [r7, #16]
 8005a40:	f7fd ffe1 	bl	8003a06 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005a44:	f7fc fd16 	bl	8002474 <get_fattime>
 8005a48:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3316      	adds	r3, #22
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	3317      	adds	r3, #23
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	0c1a      	lsrs	r2, r3, #16
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3318      	adds	r3, #24
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	0e1a      	lsrs	r2, r3, #24
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	3319      	adds	r3, #25
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3312      	adds	r3, #18
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3313      	adds	r3, #19
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a92:	799b      	ldrb	r3, [r3, #6]
 8005a94:	f023 0320 	bic.w	r3, r3, #32
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa0:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aae:	2201      	movs	r2, #1
 8005ab0:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fd f894 	bl	8002be8 <sync_fs>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ff2b 	bl	8005932 <f_sync>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d119      	bne.n	8005b1a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff f94c 	bl	8004d84 <validate>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d111      	bne.n	8005b1a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fc ff80 	bl	8002a04 <dec_lock>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d105      	bne.n	8005b1a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b090      	sub	sp, #64	; 0x40
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff f928 	bl	8004d84 <validate>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005b3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <f_lseek+0x24>
 8005b42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b46:	e2da      	b.n	80060fe <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4e:	79db      	ldrb	r3, [r3, #7]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5a:	79db      	ldrb	r3, [r3, #7]
 8005b5c:	e2cf      	b.n	80060fe <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8124 	beq.w	8005db4 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d16c      	bne.n	8005c4e <f_lseek+0x12a>
			tbl = fp->cltbl;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	627a      	str	r2, [r7, #36]	; 0x24
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	2302      	movs	r3, #2
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d046      	beq.n	8005c2a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fd f8f5 	bl	8002dae <get_fat>
 8005bc4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d806      	bhi.n	8005bda <f_lseek+0xb6>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	71da      	strb	r2, [r3, #7]
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e291      	b.n	80060fe <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d106      	bne.n	8005bf0 <f_lseek+0xcc>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be8:	2201      	movs	r2, #1
 8005bea:	71da      	strb	r2, [r3, #7]
 8005bec:	2301      	movs	r3, #1
 8005bee:	e286      	b.n	80060fe <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d0d7      	beq.n	8005baa <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8005bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d809      	bhi.n	8005c16 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1d1a      	adds	r2, r3, #4
 8005c06:	627a      	str	r2, [r7, #36]	; 0x24
 8005c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	627a      	str	r2, [r7, #36]	; 0x24
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d3b8      	bcc.n	8005b9c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c34:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8005c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d803      	bhi.n	8005c46 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e259      	b.n	80060fa <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005c46:	2311      	movs	r3, #17
 8005c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005c4c:	e255      	b.n	80060fa <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d904      	bls.n	8005c66 <f_lseek+0x142>
				ofs = fp->fsize;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8240 	beq.w	80060fa <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7fd fbec 	bl	800345e <clmt_clust>
 8005c86:	4602      	mov	r2, r0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f7fd f85f 	bl	8002d66 <clust2sect>
 8005ca8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <f_lseek+0x19a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	71da      	strb	r2, [r3, #7]
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e21f      	b.n	80060fe <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cce:	8952      	ldrh	r2, [r2, #10]
 8005cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ce0:	7892      	ldrb	r2, [r2, #2]
 8005ce2:	3a01      	subs	r2, #1
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4413      	add	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d00:	8952      	ldrh	r2, [r2, #10]
 8005d02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d06:	fb01 f202 	mul.w	r2, r1, r2
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 81f4 	beq.w	80060fa <f_lseek+0x5d6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	f000 81ec 	beq.w	80060fa <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d28:	799b      	ldrb	r3, [r3, #6]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d023      	beq.n	8005d7a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3e:	7858      	ldrb	r0, [r3, #1]
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f7fc fc54 	bl	80025f8 <disk_write>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	71da      	strb	r2, [r3, #7]
 8005d60:	2301      	movs	r3, #1
 8005d62:	e1cc      	b.n	80060fe <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6a:	799b      	ldrb	r3, [r3, #6]
 8005d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d78:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d86:	7858      	ldrb	r0, [r3, #1]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	f7fc fc13 	bl	80025b8 <disk_read>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9e:	2201      	movs	r2, #1
 8005da0:	71da      	strb	r2, [r3, #7]
 8005da2:	2301      	movs	r3, #1
 8005da4:	e1ab      	b.n	80060fe <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dac:	461a      	mov	r2, r3
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	6193      	str	r3, [r2, #24]
 8005db2:	e1a2      	b.n	80060fa <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d90c      	bls.n	8005ddc <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc8:	799b      	ldrb	r3, [r3, #6]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	461a      	mov	r2, r3
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8100 	beq.w	8005ffe <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0a:	789b      	ldrb	r3, [r3, #2]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1a:	895b      	ldrh	r3, [r3, #10]
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d021      	beq.n	8005e6c <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	1e59      	subs	r1, r3, #1
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d315      	bcc.n	8005e6c <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	1e5a      	subs	r2, r3, #1
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	425b      	negs	r3, r3
 8005e48:	4013      	ands	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e50:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6a:	e031      	b.n	8005ed0 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d123      	bne.n	8005ec4 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fd fa41 	bl	800330e <create_chain>
 8005e8c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d106      	bne.n	8005ea2 <f_lseek+0x37e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	71da      	strb	r2, [r3, #7]
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e12d      	b.n	80060fe <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d106      	bne.n	8005eb8 <f_lseek+0x394>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	71da      	strb	r2, [r3, #7]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e122      	b.n	80060fe <f_lseek+0x5da>
					fp->sclust = clst;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8093 	beq.w	8005ffe <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8005ed8:	e052      	b.n	8005f80 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee0:	799b      	ldrb	r3, [r3, #6]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fd fa0a 	bl	800330e <create_chain>
 8005efa:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <f_lseek+0x3f6>
							ofs = bcs; break;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	e03f      	b.n	8005f88 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fc ff4b 	bl	8002dae <get_fat>
 8005f18:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d106      	bne.n	8005f30 <f_lseek+0x40c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	2201      	movs	r2, #1
 8005f2a:	71da      	strb	r2, [r3, #7]
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0e6      	b.n	80060fe <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d909      	bls.n	8005f4a <f_lseek+0x426>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d306      	bcc.n	8005f58 <f_lseek+0x434>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f50:	2202      	movs	r2, #2
 8005f52:	71da      	strb	r2, [r3, #7]
 8005f54:	2302      	movs	r3, #2
 8005f56:	e0d2      	b.n	80060fe <f_lseek+0x5da>
					fp->clust = clst;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f76:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d8a8      	bhi.n	8005eda <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	4413      	add	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f9a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	895b      	ldrh	r3, [r3, #10]
 8005faa:	461a      	mov	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fb2:	fb01 f202 	mul.w	r2, r1, r2
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d020      	beq.n	8005ffe <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fc fecd 	bl	8002d66 <clust2sect>
 8005fcc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <f_lseek+0x4be>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fda:	2202      	movs	r2, #2
 8005fdc:	71da      	strb	r2, [r3, #7]
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e08d      	b.n	80060fe <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	895b      	ldrh	r3, [r3, #10]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ffa:	4413      	add	r3, r2
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006012:	8952      	ldrh	r2, [r2, #10]
 8006014:	fbb3 f1f2 	udiv	r1, r3, r2
 8006018:	fb01 f202 	mul.w	r2, r1, r2
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d04e      	beq.n	80060c0 <f_lseek+0x59c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602c:	429a      	cmp	r2, r3
 800602e:	d047      	beq.n	80060c0 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006036:	799b      	ldrb	r3, [r3, #6]
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d023      	beq.n	8006088 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604c:	7858      	ldrb	r0, [r3, #1]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	2301      	movs	r3, #1
 800605a:	f7fc facd 	bl	80025f8 <disk_write>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606a:	2201      	movs	r2, #1
 800606c:	71da      	strb	r2, [r3, #7]
 800606e:	2301      	movs	r3, #1
 8006070:	e045      	b.n	80060fe <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006078:	799b      	ldrb	r3, [r3, #6]
 800607a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607e:	b2da      	uxtb	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006086:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006094:	7858      	ldrb	r0, [r3, #1]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	2301      	movs	r3, #1
 800609a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800609c:	f7fc fa8c 	bl	80025b8 <disk_read>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d006      	beq.n	80060b4 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ac:	2201      	movs	r2, #1
 80060ae:	71da      	strb	r2, [r3, #7]
 80060b0:	2301      	movs	r3, #1
 80060b2:	e024      	b.n	80060fe <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ba:	461a      	mov	r2, r3
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d912      	bls.n	80060fa <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060e2:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	799b      	ldrb	r3, [r3, #6]
 80060ec:	f043 0320 	orr.w	r3, r3, #32
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f8:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80060fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3740      	adds	r7, #64	; 0x40
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	2b0a      	cmp	r3, #10
 8006116:	d103      	bne.n	8006120 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006118:	210d      	movs	r1, #13
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fff3 	bl	8006106 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	db25      	blt.n	8006178 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	60fa      	str	r2, [r7, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4413      	add	r3, r2
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b3c      	cmp	r3, #60	; 0x3c
 800613e:	dd12      	ble.n	8006166 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f103 010c 	add.w	r1, r3, #12
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	f107 0308 	add.w	r3, r7, #8
 8006150:	f7ff f9b6 	bl	80054c0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	429a      	cmp	r2, r3
 800615a:	d101      	bne.n	8006160 <putc_bfd+0x5a>
 800615c:	2300      	movs	r3, #0
 800615e:	e001      	b.n	8006164 <putc_bfd+0x5e>
 8006160:	f04f 33ff 	mov.w	r3, #4294967295
 8006164:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	609a      	str	r2, [r3, #8]
 8006176:	e000      	b.n	800617a <putc_bfd+0x74>
	if (i < 0) return;
 8006178:	bf00      	nop
}
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006180:	b590      	push	{r4, r7, lr}
 8006182:	b097      	sub	sp, #92	; 0x5c
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8006196:	e009      	b.n	80061ac <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	f107 030c 	add.w	r3, r7, #12
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff ffad 	bl	8006106 <putc_bfd>
	while (*str)			/* Put the string */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f1      	bne.n	8006198 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	db15      	blt.n	80061e6 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	461c      	mov	r4, r3
 80061c0:	f107 0208 	add.w	r2, r7, #8
 80061c4:	f107 030c 	add.w	r3, r7, #12
 80061c8:	f103 010c 	add.w	r1, r3, #12
 80061cc:	4613      	mov	r3, r2
 80061ce:	4622      	mov	r2, r4
 80061d0:	f7ff f976 	bl	80054c0 <f_write>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d105      	bne.n	80061e6 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	4293      	cmp	r3, r2
 80061e0:	d101      	bne.n	80061e6 <f_puts+0x66>
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	e001      	b.n	80061ea <f_puts+0x6a>
	return EOF;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	375c      	adds	r7, #92	; 0x5c
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd90      	pop	{r4, r7, pc}
	...

080061f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800620a:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 800620c:	7a5b      	ldrb	r3, [r3, #9]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d831      	bhi.n	8006278 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 8006216:	7a5b      	ldrb	r3, [r3, #9]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	4b19      	ldr	r3, [pc, #100]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 800621e:	2100      	movs	r1, #0
 8006220:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006222:	4b18      	ldr	r3, [pc, #96]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 8006224:	7a5b      	ldrb	r3, [r3, #9]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	4a16      	ldr	r2, [pc, #88]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006232:	4b14      	ldr	r3, [pc, #80]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 8006234:	7a5b      	ldrb	r3, [r3, #9]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 800623c:	4413      	add	r3, r2
 800623e:	79fa      	ldrb	r2, [r7, #7]
 8006240:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 8006244:	7a5b      	ldrb	r3, [r3, #9]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	b2d1      	uxtb	r1, r2
 800624c:	4a0d      	ldr	r2, [pc, #52]	; (8006284 <FATFS_LinkDriverEx+0x90>)
 800624e:	7251      	strb	r1, [r2, #9]
 8006250:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006252:	7dbb      	ldrb	r3, [r7, #22]
 8006254:	3330      	adds	r3, #48	; 0x30
 8006256:	b2da      	uxtb	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3301      	adds	r3, #1
 8006260:	223a      	movs	r2, #58	; 0x3a
 8006262:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	3302      	adds	r3, #2
 8006268:	222f      	movs	r2, #47	; 0x2f
 800626a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	3303      	adds	r3, #3
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006278:	7dfb      	ldrb	r3, [r7, #23]
}
 800627a:	4618      	mov	r0, r3
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	20002328 	.word	0x20002328

08006288 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006292:	2200      	movs	r2, #0
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff ffac 	bl	80061f4 <FATFS_LinkDriverEx>
 800629c:	4603      	mov	r3, r0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	6039      	str	r1, [r7, #0]
 80062b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b7f      	cmp	r3, #127	; 0x7f
 80062b8:	d802      	bhi.n	80062c0 <ff_convert+0x18>
		c = chr;
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	81fb      	strh	r3, [r7, #14]
 80062be:	e025      	b.n	800630c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	2bff      	cmp	r3, #255	; 0xff
 80062ca:	d805      	bhi.n	80062d8 <ff_convert+0x30>
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	3b80      	subs	r3, #128	; 0x80
 80062d0:	4a11      	ldr	r2, [pc, #68]	; (8006318 <ff_convert+0x70>)
 80062d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d6:	e000      	b.n	80062da <ff_convert+0x32>
 80062d8:	2300      	movs	r3, #0
 80062da:	81fb      	strh	r3, [r7, #14]
 80062dc:	e016      	b.n	800630c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80062de:	2300      	movs	r3, #0
 80062e0:	81fb      	strh	r3, [r7, #14]
 80062e2:	e009      	b.n	80062f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <ff_convert+0x70>)
 80062e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ec:	88fa      	ldrh	r2, [r7, #6]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d006      	beq.n	8006300 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80062f2:	89fb      	ldrh	r3, [r7, #14]
 80062f4:	3301      	adds	r3, #1
 80062f6:	81fb      	strh	r3, [r7, #14]
 80062f8:	89fb      	ldrh	r3, [r7, #14]
 80062fa:	2b7f      	cmp	r3, #127	; 0x7f
 80062fc:	d9f2      	bls.n	80062e4 <ff_convert+0x3c>
 80062fe:	e000      	b.n	8006302 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006300:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006302:	89fb      	ldrh	r3, [r7, #14]
 8006304:	3380      	adds	r3, #128	; 0x80
 8006306:	b29b      	uxth	r3, r3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800630c:	89fb      	ldrh	r3, [r7, #14]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	08006500 	.word	0x08006500

0800631c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	e002      	b.n	8006332 <ff_wtoupper+0x16>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	4a0f      	ldr	r2, [pc, #60]	; (8006370 <ff_wtoupper+0x54>)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <ff_wtoupper+0x30>
 800633e:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <ff_wtoupper+0x54>)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006346:	88fa      	ldrh	r2, [r7, #6]
 8006348:	429a      	cmp	r2, r3
 800634a:	d1ef      	bne.n	800632c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800634c:	4a08      	ldr	r2, [pc, #32]	; (8006370 <ff_wtoupper+0x54>)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <ff_wtoupper+0x46>
 8006358:	4a06      	ldr	r2, [pc, #24]	; (8006374 <ff_wtoupper+0x58>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006360:	e000      	b.n	8006364 <ff_wtoupper+0x48>
 8006362:	88fb      	ldrh	r3, [r7, #6]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	08006600 	.word	0x08006600
 8006374:	080067e0 	.word	0x080067e0

08006378 <__libc_init_array>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	2600      	movs	r6, #0
 800637c:	4d0c      	ldr	r5, [pc, #48]	; (80063b0 <__libc_init_array+0x38>)
 800637e:	4c0d      	ldr	r4, [pc, #52]	; (80063b4 <__libc_init_array+0x3c>)
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	42a6      	cmp	r6, r4
 8006386:	d109      	bne.n	800639c <__libc_init_array+0x24>
 8006388:	f000 f822 	bl	80063d0 <_init>
 800638c:	2600      	movs	r6, #0
 800638e:	4d0a      	ldr	r5, [pc, #40]	; (80063b8 <__libc_init_array+0x40>)
 8006390:	4c0a      	ldr	r4, [pc, #40]	; (80063bc <__libc_init_array+0x44>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	42a6      	cmp	r6, r4
 8006398:	d105      	bne.n	80063a6 <__libc_init_array+0x2e>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a0:	4798      	blx	r3
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7ee      	b.n	8006384 <__libc_init_array+0xc>
 80063a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063aa:	4798      	blx	r3
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7f2      	b.n	8006396 <__libc_init_array+0x1e>
 80063b0:	080069c0 	.word	0x080069c0
 80063b4:	080069c0 	.word	0x080069c0
 80063b8:	080069c0 	.word	0x080069c0
 80063bc:	080069c4 	.word	0x080069c4

080063c0 <memset>:
 80063c0:	4603      	mov	r3, r0
 80063c2:	4402      	add	r2, r0
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d100      	bne.n	80063ca <memset+0xa>
 80063c8:	4770      	bx	lr
 80063ca:	f803 1b01 	strb.w	r1, [r3], #1
 80063ce:	e7f9      	b.n	80063c4 <memset+0x4>

080063d0 <_init>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr

080063dc <_fini>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr
