
RS-485_Modbus_RTU_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005240  08005240  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08005240  08005240  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005240  08005240  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000104  0800534c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  0800534c  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9c8  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3a  00000000  00000000  0002eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00031730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  000326a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a26a  00000000  00000000  00033488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121fc  00000000  00000000  0004d6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2e9  00000000  00000000  0005f8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edbd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f0  00000000  00000000  000edc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000104 	.word	0x20000104
 8000128:	00000000 	.word	0x00000000
 800012c:	08004df8 	.word	0x08004df8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000108 	.word	0x20000108
 8000148:	08004df8 	.word	0x08004df8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb69 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f837 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8f1 	bl	8000340 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015e:	f000 f879 	bl	8000254 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8c3 	bl	80002ec <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
	MT_PORT_SetTimerModule(&htim3);
 8000166:	4814      	ldr	r0, [pc, #80]	; (80001b8 <main+0x6c>)
 8000168:	f003 fa5c 	bl	8003624 <MT_PORT_SetTimerModule>
	MT_PORT_SetUartModule(&huart1);
 800016c:	4813      	ldr	r0, [pc, #76]	; (80001bc <main+0x70>)
 800016e:	f003 fa67 	bl	8003640 <MT_PORT_SetUartModule>

	eMBErrorCode eStatus;
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 19200, MB_PAR_NONE);
 8000172:	2300      	movs	r3, #0
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800017a:	2200      	movs	r2, #0
 800017c:	210a      	movs	r1, #10
 800017e:	2000      	movs	r0, #0
 8000180:	f003 f8d8 	bl	8003334 <eMBInit>
 8000184:	4603      	mov	r3, r0
 8000186:	71fb      	strb	r3, [r7, #7]
	eStatus = eMBEnable();
 8000188:	f003 f950 	bl	800342c <eMBEnable>
 800018c:	4603      	mov	r3, r0
 800018e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		eMBPoll();
 8000190:	f003 f968 	bl	8003464 <eMBPoll>
		usRegInputBuf[REG_INPUT_NREGS - 2] = HAL_GetTick() / 1000;
 8000194:	f000 fba0 	bl	80008d8 <HAL_GetTick>
 8000198:	4603      	mov	r3, r0
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <main+0x74>)
 800019c:	fba2 2303 	umull	r2, r3, r2, r3
 80001a0:	099b      	lsrs	r3, r3, #6
 80001a2:	b29a      	uxth	r2, r3
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <main+0x78>)
 80001a6:	819a      	strh	r2, [r3, #12]
		usRegInputBuf[REG_INPUT_NREGS - 1] = HAL_GetTick();
 80001a8:	f000 fb96 	bl	80008d8 <HAL_GetTick>
 80001ac:	4603      	mov	r3, r0
 80001ae:	b29a      	uxth	r2, r3
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <main+0x78>)
 80001b2:	81da      	strh	r2, [r3, #14]
		eMBPoll();
 80001b4:	e7ec      	b.n	8000190 <main+0x44>
 80001b6:	bf00      	nop
 80001b8:	20000120 	.word	0x20000120
 80001bc:	20000168 	.word	0x20000168
 80001c0:	10624dd3 	.word	0x10624dd3
 80001c4:	20000004 	.word	0x20000004

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f003 fe3e 	bl	8003e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fc:	2302      	movs	r3, #2
 80001fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000206:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fead 	bl	8000f70 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800021c:	f000 f92a 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f001 f91a 	bl	8001474 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000246:	f000 f915 	bl	8000474 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	; 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800025a:	f107 0308 	add.w	r3, r7, #8
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000268:	463b      	mov	r3, r7
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <MX_TIM3_Init+0x90>)
 8000272:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <MX_TIM3_Init+0x94>)
 8000274:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <MX_TIM3_Init+0x90>)
 8000278:	2247      	movs	r2, #71	; 0x47
 800027a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_TIM3_Init+0x90>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_TIM3_Init+0x90>)
 8000284:	2232      	movs	r2, #50	; 0x32
 8000286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <MX_TIM3_Init+0x90>)
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_TIM3_Init+0x90>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000294:	4813      	ldr	r0, [pc, #76]	; (80002e4 <MX_TIM3_Init+0x90>)
 8000296:	f001 fa85 	bl	80017a4 <HAL_TIM_Base_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80002a0:	f000 f8e8 	bl	8000474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4619      	mov	r1, r3
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <MX_TIM3_Init+0x90>)
 80002b2:	f001 fc4f 	bl	8001b54 <HAL_TIM_ConfigClockSource>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80002bc:	f000 f8da 	bl	8000474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002c0:	2300      	movs	r3, #0
 80002c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80002c8:	463b      	mov	r3, r7
 80002ca:	4619      	mov	r1, r3
 80002cc:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_TIM3_Init+0x90>)
 80002ce:	f001 fe21 	bl	8001f14 <HAL_TIMEx_MasterConfigSynchronization>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80002d8:	f000 f8cc 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000120 	.word	0x20000120
 80002e8:	40000400 	.word	0x40000400

080002ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_USART1_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 80002f8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80002fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000324:	f001 fe66 	bl	8001ff4 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f8a1 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000168 	.word	0x20000168
 800033c:	40013800 	.word	0x40013800

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <MX_GPIO_Init+0x40>)
 800034c:	f043 0320 	orr.w	r3, r3, #32
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0320 	and.w	r3, r3, #32
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_GPIO_Init+0x40>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a07      	ldr	r2, [pc, #28]	; (8000380 <MX_GPIO_Init+0x40>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_GPIO_Init+0x40>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]

}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <eMBRegInputCB>:

/* USER CODE BEGIN 4 */
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegInputCB(UCHAR *pucRegBuffer, USHORT usAddress,
		USHORT usNRegs) {
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	807b      	strh	r3, [r7, #2]
 8000390:	4613      	mov	r3, r2
 8000392:	803b      	strh	r3, [r7, #0]
	eMBErrorCode eStatus = MB_ENOERR;
 8000394:	2300      	movs	r3, #0
 8000396:	73fb      	strb	r3, [r7, #15]
	int iRegIndex;
	if ((usAddress >= REG_INPUT_START)
 8000398:	887b      	ldrh	r3, [r7, #2]
 800039a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800039e:	d329      	bcc.n	80003f4 <eMBRegInputCB+0x70>
			&& (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS)) {
 80003a0:	887a      	ldrh	r2, [r7, #2]
 80003a2:	883b      	ldrh	r3, [r7, #0]
 80003a4:	4413      	add	r3, r2
 80003a6:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80003aa:	dc23      	bgt.n	80003f4 <eMBRegInputCB+0x70>
		iRegIndex = (int) (usAddress - usRegInputStart);
 80003ac:	887b      	ldrh	r3, [r7, #2]
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <eMBRegInputCB+0x80>)
 80003b0:	8812      	ldrh	r2, [r2, #0]
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	60bb      	str	r3, [r7, #8]
		while (usNRegs > 0) {
 80003b6:	e019      	b.n	80003ec <eMBRegInputCB+0x68>
			*pucRegBuffer++ = (unsigned char) (usRegInputBuf[iRegIndex] >> 8);
 80003b8:	4a13      	ldr	r2, [pc, #76]	; (8000408 <eMBRegInputCB+0x84>)
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c0:	0a1b      	lsrs	r3, r3, #8
 80003c2:	b299      	uxth	r1, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	b2ca      	uxtb	r2, r1
 80003cc:	701a      	strb	r2, [r3, #0]
			*pucRegBuffer++ = (unsigned char) (usRegInputBuf[iRegIndex] & 0xFF);
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <eMBRegInputCB+0x84>)
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	607a      	str	r2, [r7, #4]
 80003dc:	b2ca      	uxtb	r2, r1
 80003de:	701a      	strb	r2, [r3, #0]
			iRegIndex++;
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	3301      	adds	r3, #1
 80003e4:	60bb      	str	r3, [r7, #8]
			usNRegs--;
 80003e6:	883b      	ldrh	r3, [r7, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	803b      	strh	r3, [r7, #0]
		while (usNRegs > 0) {
 80003ec:	883b      	ldrh	r3, [r7, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1e2      	bne.n	80003b8 <eMBRegInputCB+0x34>
	if ((usAddress >= REG_INPUT_START)
 80003f2:	e001      	b.n	80003f8 <eMBRegInputCB+0x74>
		}
	} else {
		eStatus = MB_ENOREG;
 80003f4:	2301      	movs	r3, #1
 80003f6:	73fb      	strb	r3, [r7, #15]
	}
	return eStatus;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	20000000 	.word	0x20000000
 8000408:	20000004 	.word	0x20000004

0800040c <eMBRegHoldingCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress,
		USHORT usNRegs, eMBRegisterMode eMode) {
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	4608      	mov	r0, r1
 8000416:	4611      	mov	r1, r2
 8000418:	461a      	mov	r2, r3
 800041a:	4603      	mov	r3, r0
 800041c:	817b      	strh	r3, [r7, #10]
 800041e:	460b      	mov	r3, r1
 8000420:	813b      	strh	r3, [r7, #8]
 8000422:	4613      	mov	r3, r2
 8000424:	71fb      	strb	r3, [r7, #7]
	return MB_ENOREG;
 8000426:	2301      	movs	r3, #1
}
 8000428:	4618      	mov	r0, r3
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <eMBRegCoilsCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegCoilsCB(UCHAR *pucRegBuffer, USHORT usAddress,
		USHORT usNCoils, eMBRegisterMode eMode) {
 8000432:	b480      	push	{r7}
 8000434:	b085      	sub	sp, #20
 8000436:	af00      	add	r7, sp, #0
 8000438:	60f8      	str	r0, [r7, #12]
 800043a:	4608      	mov	r0, r1
 800043c:	4611      	mov	r1, r2
 800043e:	461a      	mov	r2, r3
 8000440:	4603      	mov	r3, r0
 8000442:	817b      	strh	r3, [r7, #10]
 8000444:	460b      	mov	r3, r1
 8000446:	813b      	strh	r3, [r7, #8]
 8000448:	4613      	mov	r3, r2
 800044a:	71fb      	strb	r3, [r7, #7]
	return MB_ENOREG;
 800044c:	2301      	movs	r3, #1
}
 800044e:	4618      	mov	r0, r3
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <eMBRegDiscreteCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegDiscreteCB(UCHAR *pucRegBuffer, USHORT usAddress,
		USHORT usNDiscrete) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	807b      	strh	r3, [r7, #2]
 8000464:	4613      	mov	r3, r2
 8000466:	803b      	strh	r3, [r7, #0]
	return MB_ENOREG;
 8000468:	2301      	movs	r3, #1
}
 800046a:	4618      	mov	r0, r3
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <Error_Handler+0x8>
	...

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <HAL_MspInit+0x5c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x5c>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_MspInit+0x60>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_MspInit+0x60>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000

080004e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_TIM_Base_MspInit+0x44>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d113      	bne.n	800051e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_TIM_Base_MspInit+0x48>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <HAL_TIM_Base_MspInit+0x48>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_TIM_Base_MspInit+0x48>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	201d      	movs	r0, #29
 8000514:	f000 fac1 	bl	8000a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000518:	201d      	movs	r0, #29
 800051a:	f000 fada 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40000400 	.word	0x40000400
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <HAL_UART_MspInit+0x9c>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d139      	bne.n	80005c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <HAL_UART_MspInit+0xa0>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <HAL_UART_MspInit+0xa0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_UART_MspInit+0xa0>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <HAL_UART_MspInit+0xa0>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_UART_MspInit+0xa0>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <HAL_UART_MspInit+0xa0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000586:	2302      	movs	r3, #2
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <HAL_UART_MspInit+0xa4>)
 8000596:	f000 fb67 	bl	8000c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <HAL_UART_MspInit+0xa4>)
 80005b0:	f000 fb5a 	bl	8000c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2025      	movs	r0, #37	; 0x25
 80005ba:	f000 fa6e 	bl	8000a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005be:	2025      	movs	r0, #37	; 0x25
 80005c0:	f000 fa87 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40013800 	.word	0x40013800
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <NMI_Handler+0x4>

080005de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <MemManage_Handler+0x4>

080005ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061e:	f000 f949 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <TIM3_IRQHandler+0x10>)
 800062e:	f001 f989 	bl	8001944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000120 	.word	0x20000120

0800063c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <USART1_IRQHandler+0x10>)
 8000642:	f001 fe53 	bl	80022ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000168 	.word	0x20000168

08000650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	return 1;
 8000654:	2301      	movs	r3, #1
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <_kill>:

int _kill(int pid, int sig)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000668:	f003 fbac 	bl	8003dc4 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	2216      	movs	r2, #22
 8000670:	601a      	str	r2, [r3, #0]
	return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_exit>:

void _exit (int status)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000686:	f04f 31ff 	mov.w	r1, #4294967295
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ffe7 	bl	800065e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000690:	e7fe      	b.n	8000690 <_exit+0x12>

08000692 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e00a      	b.n	80006ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006a4:	f3af 8000 	nop.w
 80006a8:	4601      	mov	r1, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	60ba      	str	r2, [r7, #8]
 80006b0:	b2ca      	uxtb	r2, r1
 80006b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3301      	adds	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbf0      	blt.n	80006a4 <_read+0x12>
	}

return len;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	e009      	b.n	80006f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	60ba      	str	r2, [r7, #8]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	3301      	adds	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dbf1      	blt.n	80006de <_write+0x12>
	}
	return len;
 80006fa:	687b      	ldr	r3, [r7, #4]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <_close>:

int _close(int file)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	return -1;
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800072a:	605a      	str	r2, [r3, #4]
	return 0;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <_isatty>:

int _isatty(int file)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	return 1;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	return 0;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <_sbrk+0x5c>)
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <_sbrk+0x60>)
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d102      	bne.n	8000786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <_sbrk+0x64>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <_sbrk+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	429a      	cmp	r2, r3
 8000792:	d207      	bcs.n	80007a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000794:	f003 fb16 	bl	8003dc4 <__errno>
 8000798:	4603      	mov	r3, r0
 800079a:	220c      	movs	r2, #12
 800079c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	e009      	b.n	80007b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <_sbrk+0x64>)
 80007b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20005000 	.word	0x20005000
 80007c4:	00000400 	.word	0x00000400
 80007c8:	200001ac 	.word	0x200001ac
 80007cc:	20000338 	.word	0x20000338

080007d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000802:	f7ff ffe5 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f003 faf5 	bl	8003df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fc9f 	bl	800014c <main>
  bx lr
 800080e:	4770      	bx	lr
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000818:	08005248 	.word	0x08005248
  ldr r2, =_sbss
 800081c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000820:	20000334 	.word	0x20000334

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_Init+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_Init+0x28>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 f923 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083e:	200f      	movs	r0, #15
 8000840:	f000 f808 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff fe1c 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x54>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x58>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f93b 	bl	8000aee <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e00e      	b.n	80008a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d80a      	bhi.n	800089e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f000 f903 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_InitTick+0x5c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000014 	.word	0x20000014
 80008ac:	2000001c 	.word	0x2000001c
 80008b0:	20000018 	.word	0x20000018

080008b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x1c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x20>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <HAL_IncTick+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	2000001c 	.word	0x2000001c
 80008d4:	200001b0 	.word	0x200001b0

080008d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_GetTick+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	200001b0 	.word	0x200001b0

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4906      	ldr	r1, [pc, #24]	; (8000984 <__NVIC_EnableIRQ+0x34>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db0a      	blt.n	80009b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <__NVIC_SetPriority+0x4c>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b0:	e00a      	b.n	80009c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <__NVIC_SetPriority+0x50>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	3b04      	subs	r3, #4
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	761a      	strb	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f1c3 0307 	rsb	r3, r3, #7
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	bf28      	it	cs
 80009fa:	2304      	movcs	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d902      	bls.n	8000a0c <NVIC_EncodePriority+0x30>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3b03      	subs	r3, #3
 8000a0a:	e000      	b.n	8000a0e <NVIC_EncodePriority+0x32>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43d9      	mvns	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	4313      	orrs	r3, r2
         );
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	; 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f7ff ff90 	bl	8000988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff2d 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff42 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff90 	bl	80009dc <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5f 	bl	8000988 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff35 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffa2 	bl	8000a40 <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d008      	beq.n	8000b2e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2204      	movs	r2, #4
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e020      	b.n	8000b70 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 020e 	bic.w	r2, r2, #14
 8000b3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f022 0201 	bic.w	r2, r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b56:	2101      	movs	r1, #1
 8000b58:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2201      	movs	r2, #1
 8000b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d005      	beq.n	8000b9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2204      	movs	r2, #4
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e051      	b.n	8000c42 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 020e 	bic.w	r2, r2, #14
 8000bac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <HAL_DMA_Abort_IT+0xd0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d029      	beq.n	8000c1c <HAL_DMA_Abort_IT+0xa0>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <HAL_DMA_Abort_IT+0xd4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d022      	beq.n	8000c18 <HAL_DMA_Abort_IT+0x9c>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <HAL_DMA_Abort_IT+0xd8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d01a      	beq.n	8000c12 <HAL_DMA_Abort_IT+0x96>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <HAL_DMA_Abort_IT+0xdc>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d012      	beq.n	8000c0c <HAL_DMA_Abort_IT+0x90>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <HAL_DMA_Abort_IT+0xe0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00a      	beq.n	8000c06 <HAL_DMA_Abort_IT+0x8a>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <HAL_DMA_Abort_IT+0xe4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d102      	bne.n	8000c00 <HAL_DMA_Abort_IT+0x84>
 8000bfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bfe:	e00e      	b.n	8000c1e <HAL_DMA_Abort_IT+0xa2>
 8000c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c04:	e00b      	b.n	8000c1e <HAL_DMA_Abort_IT+0xa2>
 8000c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0a:	e008      	b.n	8000c1e <HAL_DMA_Abort_IT+0xa2>
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	e005      	b.n	8000c1e <HAL_DMA_Abort_IT+0xa2>
 8000c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c16:	e002      	b.n	8000c1e <HAL_DMA_Abort_IT+0xa2>
 8000c18:	2310      	movs	r3, #16
 8000c1a:	e000      	b.n	8000c1e <HAL_DMA_Abort_IT+0xa2>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_DMA_Abort_IT+0xe8>)
 8000c20:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	4798      	blx	r3
    } 
  }
  return status;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40020008 	.word	0x40020008
 8000c50:	4002001c 	.word	0x4002001c
 8000c54:	40020030 	.word	0x40020030
 8000c58:	40020044 	.word	0x40020044
 8000c5c:	40020058 	.word	0x40020058
 8000c60:	4002006c 	.word	0x4002006c
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b08b      	sub	sp, #44	; 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e169      	b.n	8000f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8158 	bne.w	8000f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a9a      	ldr	r2, [pc, #616]	; (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d05e      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000ca4:	4a98      	ldr	r2, [pc, #608]	; (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d875      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000caa:	4a98      	ldr	r2, [pc, #608]	; (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d058      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cb0:	4a96      	ldr	r2, [pc, #600]	; (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d86f      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a96      	ldr	r2, [pc, #600]	; (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d052      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cbc:	4a94      	ldr	r2, [pc, #592]	; (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d869      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a94      	ldr	r2, [pc, #592]	; (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d04c      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a92      	ldr	r2, [pc, #584]	; (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d863      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cce:	4a92      	ldr	r2, [pc, #584]	; (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d046      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a90      	ldr	r2, [pc, #576]	; (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d85d      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d82a      	bhi.n	8000d34 <HAL_GPIO_Init+0xcc>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d859      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000ce2:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <HAL_GPIO_Init+0x80>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d3d 	.word	0x08000d3d
 8000cf0:	08000d4f 	.word	0x08000d4f
 8000cf4:	08000d91 	.word	0x08000d91
 8000cf8:	08000d97 	.word	0x08000d97
 8000cfc:	08000d97 	.word	0x08000d97
 8000d00:	08000d97 	.word	0x08000d97
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000d97 	.word	0x08000d97
 8000d0c:	08000d97 	.word	0x08000d97
 8000d10:	08000d97 	.word	0x08000d97
 8000d14:	08000d97 	.word	0x08000d97
 8000d18:	08000d97 	.word	0x08000d97
 8000d1c:	08000d97 	.word	0x08000d97
 8000d20:	08000d97 	.word	0x08000d97
 8000d24:	08000d97 	.word	0x08000d97
 8000d28:	08000d97 	.word	0x08000d97
 8000d2c:	08000d45 	.word	0x08000d45
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	4a79      	ldr	r2, [pc, #484]	; (8000f1c <HAL_GPIO_Init+0x2b4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3a:	e02c      	b.n	8000d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e029      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e024      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	3308      	adds	r3, #8
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e01f      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	330c      	adds	r3, #12
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e01a      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e013      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	611a      	str	r2, [r3, #16]
          break;
 8000d82:	e009      	b.n	8000d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	615a      	str	r2, [r3, #20]
          break;
 8000d8e:	e003      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          break;
 8000d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d801      	bhi.n	8000da2 <HAL_GPIO_Init+0x13a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e001      	b.n	8000da6 <HAL_GPIO_Init+0x13e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3304      	adds	r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2bff      	cmp	r3, #255	; 0xff
 8000dac:	d802      	bhi.n	8000db4 <HAL_GPIO_Init+0x14c>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x152>
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	3b08      	subs	r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	6a39      	ldr	r1, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e00:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a40      	ldr	r2, [pc, #256]	; (8000f28 <HAL_GPIO_Init+0x2c0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d013      	beq.n	8000e54 <HAL_GPIO_Init+0x1ec>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00d      	beq.n	8000e50 <HAL_GPIO_Init+0x1e8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3e      	ldr	r2, [pc, #248]	; (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3d      	ldr	r2, [pc, #244]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <HAL_GPIO_Init+0x1e0>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e006      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e004      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e54:	2300      	movs	r3, #0
 8000e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e66:	492f      	ldr	r1, [pc, #188]	; (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	492c      	ldr	r1, [pc, #176]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4928      	ldr	r1, [pc, #160]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4922      	ldr	r1, [pc, #136]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	491e      	ldr	r1, [pc, #120]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	4918      	ldr	r1, [pc, #96]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	608b      	str	r3, [r1, #8]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4914      	ldr	r1, [pc, #80]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d021      	beq.n	8000f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	490e      	ldr	r1, [pc, #56]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60cb      	str	r3, [r1, #12]
 8000f04:	e021      	b.n	8000f4a <HAL_GPIO_Init+0x2e2>
 8000f06:	bf00      	nop
 8000f08:	10320000 	.word	0x10320000
 8000f0c:	10310000 	.word	0x10310000
 8000f10:	10220000 	.word	0x10220000
 8000f14:	10210000 	.word	0x10210000
 8000f18:	10120000 	.word	0x10120000
 8000f1c:	10110000 	.word	0x10110000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	40010c00 	.word	0x40010c00
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40011400 	.word	0x40011400
 8000f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4909      	ldr	r1, [pc, #36]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f ae8e 	bne.w	8000c7c <HAL_GPIO_Init+0x14>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	372c      	adds	r7, #44	; 0x2c
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e272      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8087 	beq.w	800109e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f90:	4b92      	ldr	r3, [pc, #584]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f9c:	4b8f      	ldr	r3, [pc, #572]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d112      	bne.n	8000fce <HAL_RCC_OscConfig+0x5e>
 8000fa8:	4b8c      	ldr	r3, [pc, #560]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb4:	d10b      	bne.n	8000fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb6:	4b89      	ldr	r3, [pc, #548]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d06c      	beq.n	800109c <HAL_RCC_OscConfig+0x12c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d168      	bne.n	800109c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e24c      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x76>
 8000fd8:	4b80      	ldr	r3, [pc, #512]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a7f      	ldr	r2, [pc, #508]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e02e      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x98>
 8000fee:	4b7b      	ldr	r3, [pc, #492]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7a      	ldr	r2, [pc, #488]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b78      	ldr	r3, [pc, #480]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a77      	ldr	r2, [pc, #476]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0xbc>
 8001012:	4b72      	ldr	r3, [pc, #456]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a71      	ldr	r2, [pc, #452]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b6f      	ldr	r3, [pc, #444]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6e      	ldr	r2, [pc, #440]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 800102c:	4b6b      	ldr	r3, [pc, #428]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a6a      	ldr	r2, [pc, #424]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b68      	ldr	r3, [pc, #416]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a67      	ldr	r2, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fc44 	bl	80008d8 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fc40 	bl	80008d8 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e200      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0xe4>
 8001072:	e014      	b.n	800109e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc30 	bl	80008d8 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fc2c 	bl	80008d8 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1ec      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	4b53      	ldr	r3, [pc, #332]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x10c>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010aa:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d11c      	bne.n	80010fc <HAL_RCC_OscConfig+0x18c>
 80010c2:	4b46      	ldr	r3, [pc, #280]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b43      	ldr	r3, [pc, #268]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x176>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e1c0      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4939      	ldr	r1, [pc, #228]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e03a      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fbe5 	bl	80008d8 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fbe1 	bl	80008d8 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1a1      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4927      	ldr	r1, [pc, #156]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e015      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fbc4 	bl	80008d8 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fbc0 	bl	80008d8 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e180      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d03a      	beq.n	80011f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d019      	beq.n	80011ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_RCC_OscConfig+0x274>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fba4 	bl	80008d8 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fba0 	bl	80008d8 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e160      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 fad8 	bl	8001768 <RCC_Delay>
 80011b8:	e01c      	b.n	80011f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_RCC_OscConfig+0x274>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fb8a 	bl	80008d8 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c6:	e00f      	b.n	80011e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fb86 	bl	80008d8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d908      	bls.n	80011e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e146      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	42420000 	.word	0x42420000
 80011e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	4b92      	ldr	r3, [pc, #584]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e9      	bne.n	80011c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80a6 	beq.w	800134e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001206:	4b8b      	ldr	r3, [pc, #556]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a87      	ldr	r2, [pc, #540]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b85      	ldr	r3, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b82      	ldr	r3, [pc, #520]	; (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x4c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7e      	ldr	r2, [pc, #504]	; (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001246:	f7ff fb47 	bl	80008d8 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124e:	f7ff fb43 	bl	80008d8 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b64      	cmp	r3, #100	; 0x64
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e103      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b75      	ldr	r3, [pc, #468]	; (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x312>
 8001274:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4a6e      	ldr	r2, [pc, #440]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6213      	str	r3, [r2, #32]
 8001280:	e02d      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x334>
 800128a:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a69      	ldr	r2, [pc, #420]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4a66      	ldr	r2, [pc, #408]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6213      	str	r3, [r2, #32]
 80012a2:	e01c      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x356>
 80012ac:	4b61      	ldr	r3, [pc, #388]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a60      	ldr	r2, [pc, #384]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	4b5e      	ldr	r3, [pc, #376]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a5d      	ldr	r2, [pc, #372]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6213      	str	r3, [r2, #32]
 80012c4:	e00b      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a5a      	ldr	r2, [pc, #360]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 0304 	bic.w	r3, r3, #4
 80012dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d015      	beq.n	8001312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff faf7 	bl	80008d8 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff faf3 	bl	80008d8 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0b1      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0ee      	beq.n	80012ee <HAL_RCC_OscConfig+0x37e>
 8001310:	e014      	b.n	800133c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fae1 	bl	80008d8 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff fadd 	bl	80008d8 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	; 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e09b      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001330:	4b40      	ldr	r3, [pc, #256]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ee      	bne.n	800131a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d105      	bne.n	800134e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001342:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a3b      	ldr	r2, [pc, #236]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001358:	4b36      	ldr	r3, [pc, #216]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d061      	beq.n	8001428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d146      	bne.n	80013fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <HAL_RCC_OscConfig+0x4cc>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fab1 	bl	80008d8 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff faad 	bl	80008d8 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e06d      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d108      	bne.n	80013b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4921      	ldr	r1, [pc, #132]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a19      	ldr	r1, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	430b      	orrs	r3, r1
 80013c6:	491b      	ldr	r1, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x4cc>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fa81 	bl	80008d8 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fa7d 	bl	80008d8 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e03d      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x46a>
 80013f8:	e035      	b.n	8001466 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_RCC_OscConfig+0x4cc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fa6a 	bl	80008d8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fa66 	bl	80008d8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e026      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x498>
 8001426:	e01e      	b.n	8001466 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e019      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
 800143c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x500>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0d0      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0207 	bic.w	r2, r3, #7
 800149e:	4965      	ldr	r1, [pc, #404]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d040      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06b      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4936      	ldr	r1, [pc, #216]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff f9b8 	bl	80008d8 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff f9b4 	bl	80008d8 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e053      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d210      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4922      	ldr	r1, [pc, #136]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	490a      	ldr	r1, [pc, #40]	; (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1cc>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f916 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	08004f04 	.word	0x08004f04
 8001640:	20000014 	.word	0x20000014
 8001644:	20000018 	.word	0x20000018

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b490      	push	{r4, r7}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001650:	1d3c      	adds	r4, r7, #4
 8001652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001658:	f240 2301 	movw	r3, #513	; 0x201
 800165c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b04      	cmp	r3, #4
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x40>
 8001682:	2b08      	cmp	r3, #8
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x46>
 8001686:	e02b      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800168a:	623b      	str	r3, [r7, #32]
      break;
 800168c:	e02b      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	0c9b      	lsrs	r3, r3, #18
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3328      	adds	r3, #40	; 0x28
 8001698:	443b      	add	r3, r7
 800169a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800169e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d012      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0c5b      	lsrs	r3, r3, #17
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	3328      	adds	r3, #40	; 0x28
 80016b6:	443b      	add	r3, r7
 80016b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80016c2:	fb03 f202 	mul.w	r2, r3, r2
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	e004      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	623b      	str	r3, [r7, #32]
      break;
 80016de:	e002      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80016e2:	623b      	str	r3, [r7, #32]
      break;
 80016e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e6:	6a3b      	ldr	r3, [r7, #32]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc90      	pop	{r4, r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	08004e10 	.word	0x08004e10
 80016f8:	40021000 	.word	0x40021000
 80016fc:	007a1200 	.word	0x007a1200
 8001700:	003d0900 	.word	0x003d0900

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_RCC_GetHCLKFreq+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000014 	.word	0x20000014

08001718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800171c:	f7ff fff2 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001720:	4602      	mov	r2, r0
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	4903      	ldr	r1, [pc, #12]	; (800173c <HAL_RCC_GetPCLK1Freq+0x24>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	08004f14 	.word	0x08004f14

08001740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001744:	f7ff ffde 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001748:	4602      	mov	r2, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	0adb      	lsrs	r3, r3, #11
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4903      	ldr	r1, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001756:	5ccb      	ldrb	r3, [r1, r3]
 8001758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	08004f14 	.word	0x08004f14

08001768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <RCC_Delay+0x34>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <RCC_Delay+0x38>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a5b      	lsrs	r3, r3, #9
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001784:	bf00      	nop
  }
  while (Delay --);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1e5a      	subs	r2, r3, #1
 800178a:	60fa      	str	r2, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f9      	bne.n	8001784 <RCC_Delay+0x1c>
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000014 	.word	0x20000014
 80017a0:	10624dd3 	.word	0x10624dd3

080017a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e041      	b.n	800183a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7fe fe8a 	bl	80004e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3304      	adds	r3, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f000 fa9e 	bl	8001d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d001      	beq.n	800185c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e03a      	b.n	80018d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <HAL_TIM_Base_Start_IT+0x98>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00e      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x58>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001886:	d009      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x58>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x58>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d111      	bne.n	80018c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d010      	beq.n	80018d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018be:	e007      	b.n	80018d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	40000400 	.word	0x40000400
 80018e4:	40000800 	.word	0x40000800

080018e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	f241 1311 	movw	r3, #4369	; 0x1111
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10f      	bne.n	8001930 <HAL_TIM_Base_Stop_IT+0x48>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	f240 4344 	movw	r3, #1092	; 0x444
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d107      	bne.n	8001930 <HAL_TIM_Base_Stop_IT+0x48>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d122      	bne.n	80019a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b02      	cmp	r3, #2
 8001966:	d11b      	bne.n	80019a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0202 	mvn.w	r2, #2
 8001970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f9b1 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 800198c:	e005      	b.n	800199a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f9a4 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f9b3 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d122      	bne.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d11b      	bne.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0204 	mvn.w	r2, #4
 80019c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f987 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 80019e0:	e005      	b.n	80019ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f97a 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f989 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d122      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d11b      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0208 	mvn.w	r2, #8
 8001a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f95d 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 8001a34:	e005      	b.n	8001a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f950 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f95f 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d122      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b10      	cmp	r3, #16
 8001a62:	d11b      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0210 	mvn.w	r2, #16
 8001a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2208      	movs	r2, #8
 8001a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f933 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 8001a88:	e005      	b.n	8001a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f926 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f935 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0201 	mvn.w	r2, #1
 8001ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f001 fef0 	bl	80038a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	2b80      	cmp	r3, #128	; 0x80
 8001ad4:	d10e      	bne.n	8001af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	d107      	bne.n	8001af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fa77 	bl	8001fe2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afe:	2b40      	cmp	r3, #64	; 0x40
 8001b00:	d10e      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	2b40      	cmp	r3, #64	; 0x40
 8001b0e:	d107      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8f9 	bl	8001d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d10e      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d107      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0220 	mvn.w	r2, #32
 8001b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fa42 	bl	8001fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_TIM_ConfigClockSource+0x18>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0b3      	b.n	8001cd4 <HAL_TIM_ConfigClockSource+0x180>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba4:	d03e      	beq.n	8001c24 <HAL_TIM_ConfigClockSource+0xd0>
 8001ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001baa:	f200 8087 	bhi.w	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb2:	f000 8085 	beq.w	8001cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bba:	d87f      	bhi.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001bbc:	2b70      	cmp	r3, #112	; 0x70
 8001bbe:	d01a      	beq.n	8001bf6 <HAL_TIM_ConfigClockSource+0xa2>
 8001bc0:	2b70      	cmp	r3, #112	; 0x70
 8001bc2:	d87b      	bhi.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001bc4:	2b60      	cmp	r3, #96	; 0x60
 8001bc6:	d050      	beq.n	8001c6a <HAL_TIM_ConfigClockSource+0x116>
 8001bc8:	2b60      	cmp	r3, #96	; 0x60
 8001bca:	d877      	bhi.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001bcc:	2b50      	cmp	r3, #80	; 0x50
 8001bce:	d03c      	beq.n	8001c4a <HAL_TIM_ConfigClockSource+0xf6>
 8001bd0:	2b50      	cmp	r3, #80	; 0x50
 8001bd2:	d873      	bhi.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001bd4:	2b40      	cmp	r3, #64	; 0x40
 8001bd6:	d058      	beq.n	8001c8a <HAL_TIM_ConfigClockSource+0x136>
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d86f      	bhi.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001bdc:	2b30      	cmp	r3, #48	; 0x30
 8001bde:	d064      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0x156>
 8001be0:	2b30      	cmp	r3, #48	; 0x30
 8001be2:	d86b      	bhi.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d060      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0x156>
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d867      	bhi.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d05c      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0x156>
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	d05a      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bf4:	e062      	b.n	8001cbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f000 f966 	bl	8001ed6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	609a      	str	r2, [r3, #8]
      break;
 8001c22:	e04e      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6899      	ldr	r1, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f000 f94f 	bl	8001ed6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c46:	609a      	str	r2, [r3, #8]
      break;
 8001c48:	e03b      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f000 f8c6 	bl	8001de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2150      	movs	r1, #80	; 0x50
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f91d 	bl	8001ea2 <TIM_ITRx_SetConfig>
      break;
 8001c68:	e02b      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6859      	ldr	r1, [r3, #4]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f000 f8e4 	bl	8001e44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2160      	movs	r1, #96	; 0x60
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f90d 	bl	8001ea2 <TIM_ITRx_SetConfig>
      break;
 8001c88:	e01b      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6859      	ldr	r1, [r3, #4]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f000 f8a6 	bl	8001de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2140      	movs	r1, #64	; 0x40
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f8fd 	bl	8001ea2 <TIM_ITRx_SetConfig>
      break;
 8001ca8:	e00b      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f000 f8f4 	bl	8001ea2 <TIM_ITRx_SetConfig>
        break;
 8001cba:	e002      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cbc:	bf00      	nop
 8001cbe:	e000      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <TIM_Base_SetConfig+0xb8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00b      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d42:	d007      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <TIM_Base_SetConfig+0xbc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <TIM_Base_SetConfig+0xc0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <TIM_Base_SetConfig+0xb8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00b      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <TIM_Base_SetConfig+0xbc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <TIM_Base_SetConfig+0xc0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <TIM_Base_SetConfig+0xb8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d103      	bne.n	8001dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800

08001de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	f023 0201 	bic.w	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f023 030a 	bic.w	r3, r3, #10
 8001e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	621a      	str	r2, [r3, #32]
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f023 0210 	bic.w	r2, r3, #16
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	621a      	str	r2, [r3, #32]
}
 8001e98:	bf00      	nop
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f043 0307 	orr.w	r3, r3, #7
 8001ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	609a      	str	r2, [r3, #8]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b087      	sub	sp, #28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	021a      	lsls	r2, r3, #8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	609a      	str	r2, [r3, #8]
}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e046      	b.n	8001fba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00e      	beq.n	8001f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f78:	d009      	beq.n	8001f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d004      	beq.n	8001f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800

08001fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e03f      	b.n	8002086 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fa88 	bl	8000530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fcdd 	bl	80029f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800204c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800205c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800206c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	4613      	mov	r3, r2
 800209a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d130      	bne.n	800210a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_UART_Transmit_IT+0x26>
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e029      	b.n	800210c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_Transmit_IT+0x38>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e022      	b.n	800210c <HAL_UART_Transmit_IT+0x7e>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	88fa      	ldrh	r2, [r7, #6]
 80020d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002104:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	4613      	mov	r3, r2
 8002122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	d11d      	bne.n	800216c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_UART_Receive_IT+0x26>
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e016      	b.n	800216e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_UART_Receive_IT+0x38>
 800214a:	2302      	movs	r3, #2
 800214c:	e00f      	b.n	800216e <HAL_UART_Receive_IT+0x58>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	461a      	mov	r2, r3
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fa92 	bl	800268c <UART_Start_Receive_IT>
 8002168:	4603      	mov	r3, r0
 800216a:	e000      	b.n	800216e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800218e:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d02a      	beq.n	80021f4 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ac:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d013      	beq.n	80021de <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_UART_AbortTransmit_IT+0x9c>)
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fcda 	bl	8000b7c <HAL_DMA_Abort_IT>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d01c      	beq.n	8002208 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d8:	4610      	mov	r0, r2
 80021da:	4798      	blx	r3
 80021dc:	e014      	b.n	8002208 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fa30 	bl	8002652 <HAL_UART_AbortTransmitCpltCallback>
 80021f2:	e009      	b.n	8002208 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fa25 	bl	8002652 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	0800277f 	.word	0x0800277f

08002218 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800222e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0210 	bic.w	r2, r2, #16
 8002256:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02d      	beq.n	80022c2 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002274:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	2b00      	cmp	r3, #0
 800227c:	d013      	beq.n	80022a6 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_UART_AbortReceive_IT+0xd0>)
 8002284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fc76 	bl	8000b7c <HAL_DMA_Abort_IT>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d022      	beq.n	80022dc <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a0:	4610      	mov	r0, r2
 80022a2:	4798      	blx	r3
 80022a4:	e01a      	b.n	80022dc <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f9d2 	bl	8002664 <HAL_UART_AbortReceiveCpltCallback>
 80022c0:	e00c      	b.n	80022dc <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f9c4 	bl	8002664 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	080027a9 	.word	0x080027a9

080022ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_UART_IRQHandler+0x52>
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fab5 	bl	80028a6 <UART_Receive_IT>
      return;
 800233c:	e17b      	b.n	8002636 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80b1 	beq.w	80024a8 <HAL_UART_IRQHandler+0x1bc>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_UART_IRQHandler+0x70>
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80a6 	beq.w	80024a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_UART_IRQHandler+0x90>
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_UART_IRQHandler+0xb0>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0202 	orr.w	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_UART_IRQHandler+0xd0>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f043 0204 	orr.w	r2, r3, #4
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00f      	beq.n	80023e6 <HAL_UART_IRQHandler+0xfa>
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_UART_IRQHandler+0xee>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f043 0208 	orr.w	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 811e 	beq.w	800262c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_UART_IRQHandler+0x11e>
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa4e 	bl	80028a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <HAL_UART_IRQHandler+0x146>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d031      	beq.n	8002496 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f963 	bl	80026fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d023      	beq.n	800248e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002454:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	2b00      	cmp	r3, #0
 800245c:	d013      	beq.n	8002486 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	4a76      	ldr	r2, [pc, #472]	; (800263c <HAL_UART_IRQHandler+0x350>)
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fb86 	bl	8000b7c <HAL_DMA_Abort_IT>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002480:	4610      	mov	r0, r2
 8002482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	e00e      	b.n	80024a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8da 	bl	8002640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	e00a      	b.n	80024a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8d6 	bl	8002640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002494:	e006      	b.n	80024a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f8d2 	bl	8002640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024a2:	e0c3      	b.n	800262c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a4:	bf00      	nop
    return;
 80024a6:	e0c1      	b.n	800262c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f040 80a1 	bne.w	80025f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 809b 	beq.w	80025f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8095 	beq.w	80025f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d04e      	beq.n	800258c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80024f8:	8a3b      	ldrh	r3, [r7, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8098 	beq.w	8002630 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002504:	8a3a      	ldrh	r2, [r7, #16]
 8002506:	429a      	cmp	r2, r3
 8002508:	f080 8092 	bcs.w	8002630 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8a3a      	ldrh	r2, [r7, #16]
 8002510:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b20      	cmp	r3, #32
 800251a:	d02b      	beq.n	8002574 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800252a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0210 	bic.w	r2, r2, #16
 8002568:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fac9 	bl	8000b06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800257c:	b29b      	uxth	r3, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f876 	bl	8002676 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800258a:	e051      	b.n	8002630 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002594:	b29b      	uxth	r3, r3
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d047      	beq.n	8002634 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80025a4:	8a7b      	ldrh	r3, [r7, #18]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d044      	beq.n	8002634 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0210 	bic.w	r2, r2, #16
 80025e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025e8:	8a7b      	ldrh	r3, [r7, #18]
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f842 	bl	8002676 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80025f2:	e01f      	b.n	8002634 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_UART_IRQHandler+0x324>
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8e5 	bl	80027d8 <UART_Transmit_IT>
    return;
 800260e:	e012      	b.n	8002636 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_UART_IRQHandler+0x34a>
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f926 	bl	8002876 <UART_EndTransmit_IT>
    return;
 800262a:	e004      	b.n	8002636 <HAL_UART_IRQHandler+0x34a>
    return;
 800262c:	bf00      	nop
 800262e:	e002      	b.n	8002636 <HAL_UART_IRQHandler+0x34a>
      return;
 8002630:	bf00      	nop
 8002632:	e000      	b.n	8002636 <HAL_UART_IRQHandler+0x34a>
      return;
 8002634:	bf00      	nop
  }
}
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	08002757 	.word	0x08002757

08002640 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2222      	movs	r2, #34	; 0x22
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0220 	orr.w	r2, r2, #32
 80026f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002714:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0210 	bic.w	r2, r2, #16
 800273c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff65 	bl	8002640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff59 	bl	8002652 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff ff4a 	bl	8002664 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b21      	cmp	r3, #33	; 0x21
 80027ea:	d13e      	bne.n	800286a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f4:	d114      	bne.n	8002820 <UART_Transmit_IT+0x48>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d110      	bne.n	8002820 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002812:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	1c9a      	adds	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	621a      	str	r2, [r3, #32]
 800281e:	e008      	b.n	8002832 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	1c59      	adds	r1, r3, #1
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6211      	str	r1, [r2, #32]
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4619      	mov	r1, r3
 8002840:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002854:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002864:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 ffa8 	bl	80037ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b22      	cmp	r3, #34	; 0x22
 80028b8:	f040 8099 	bne.w	80029ee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d117      	bne.n	80028f6 <UART_Receive_IT+0x50>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d113      	bne.n	80028f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
 80028f4:	e026      	b.n	8002944 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002908:	d007      	beq.n	800291a <UART_Receive_IT+0x74>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <UART_Receive_IT+0x82>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e008      	b.n	800293a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002934:	b2da      	uxtb	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29b      	uxth	r3, r3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4619      	mov	r1, r3
 8002952:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002954:	2b00      	cmp	r3, #0
 8002956:	d148      	bne.n	80029ea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0220 	bic.w	r2, r2, #32
 8002966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	2b01      	cmp	r3, #1
 8002996:	d123      	bne.n	80029e0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0210 	bic.w	r2, r2, #16
 80029ac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d10a      	bne.n	80029d2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fe4c 	bl	8002676 <HAL_UARTEx_RxEventCallback>
 80029de:	e002      	b.n	80029e6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 ff17 	bl	8003814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e002      	b.n	80029f0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a32:	f023 030c 	bic.w	r3, r3, #12
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <UART_SetConfig+0x114>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7fe fe6e 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	e002      	b.n	8002a6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7fe fe56 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <UART_SetConfig+0x118>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	0119      	lsls	r1, r3, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <UART_SetConfig+0x118>)
 8002aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2064      	movs	r0, #100	; 0x64
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac4:	4419      	add	r1, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <UART_SetConfig+0x118>)
 8002ade:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2064      	movs	r0, #100	; 0x64
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	3332      	adds	r3, #50	; 0x32
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <UART_SetConfig+0x118>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	f003 020f 	and.w	r2, r3, #15
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	440a      	add	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	51eb851f 	.word	0x51eb851f

08002b14 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d16c      	bne.n	8002c04 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3302      	adds	r3, #2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	8abb      	ldrh	r3, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002b44:	8abb      	ldrh	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3303      	adds	r3, #3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	8a7b      	ldrh	r3, [r7, #18]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002b64:	8a7b      	ldrh	r3, [r7, #18]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d049      	beq.n	8002bfe <eMBFuncReadCoils+0xea>
 8002b6a:	8a7b      	ldrh	r3, [r7, #18]
 8002b6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b70:	d245      	bcs.n	8002bfe <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	60fa      	str	r2, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002b92:	8a7b      	ldrh	r3, [r7, #18]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002b9c:	8a7b      	ldrh	r3, [r7, #18]
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	75fb      	strb	r3, [r7, #23]
 8002ba8:	e003      	b.n	8002bb2 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002baa:	8a7b      	ldrh	r3, [r7, #18]
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	7dfa      	ldrb	r2, [r7, #23]
 8002bba:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8002bc8:	8a7a      	ldrh	r2, [r7, #18]
 8002bca:	8ab9      	ldrh	r1, [r7, #20]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7fd fc2f 	bl	8000432 <eMBRegCoilsCB>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fb85 	bl	80032f0 <prveMBError2Exception>
 8002be6:	4603      	mov	r3, r0
 8002be8:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002bea:	e00d      	b.n	8002c08 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	881a      	ldrh	r2, [r3, #0]
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002bfc:	e004      	b.n	8002c08 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	75bb      	strb	r3, [r7, #22]
 8002c02:	e001      	b.n	8002c08 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c04:	2303      	movs	r3, #3
 8002c06:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002c08:	7dbb      	ldrb	r3, [r7, #22]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d140      	bne.n	8002caa <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3302      	adds	r3, #2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	89bb      	ldrh	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002c42:	89bb      	ldrh	r3, [r7, #12]
 8002c44:	3301      	adds	r3, #1
 8002c46:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d128      	bne.n	8002ca4 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3303      	adds	r3, #3
 8002c56:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002c58:	2bff      	cmp	r3, #255	; 0xff
 8002c5a:	d004      	beq.n	8002c66 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3303      	adds	r3, #3
 8002c60:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11e      	bne.n	8002ca4 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3303      	adds	r3, #3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2bff      	cmp	r3, #255	; 0xff
 8002c72:	d102      	bne.n	8002c7a <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	723b      	strb	r3, [r7, #8]
 8002c78:	e001      	b.n	8002c7e <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8002c7e:	89b9      	ldrh	r1, [r7, #12]
 8002c80:	f107 0008 	add.w	r0, r7, #8
 8002c84:	2301      	movs	r3, #1
 8002c86:	2201      	movs	r2, #1
 8002c88:	f7fd fbd3 	bl	8000432 <eMBRegCoilsCB>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002c90:	7afb      	ldrb	r3, [r7, #11]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb29 	bl	80032f0 <prveMBError2Exception>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002ca2:	e004      	b.n	8002cae <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e001      	b.n	8002cae <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d954      	bls.n	8002d78 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	89bb      	ldrh	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002ce8:	89bb      	ldrh	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	795b      	ldrb	r3, [r3, #5]
 8002d0c:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002d18:	897b      	ldrh	r3, [r7, #10]
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e003      	b.n	8002d2e <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002d26:	897b      	ldrh	r3, [r7, #10]
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01e      	beq.n	8002d72 <eMBFuncWriteMultipleCoils+0xba>
 8002d34:	897b      	ldrh	r3, [r7, #10]
 8002d36:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8002d3a:	d81a      	bhi.n	8002d72 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	7a7b      	ldrb	r3, [r7, #9]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d116      	bne.n	8002d72 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1d98      	adds	r0, r3, #6
 8002d48:	897a      	ldrh	r2, [r7, #10]
 8002d4a:	89b9      	ldrh	r1, [r7, #12]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f7fd fb70 	bl	8000432 <eMBRegCoilsCB>
 8002d52:	4603      	mov	r3, r0
 8002d54:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002d56:	7a3b      	ldrb	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002d5c:	7a3b      	ldrb	r3, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fac6 	bl	80032f0 <prveMBError2Exception>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8002d68:	e008      	b.n	8002d7c <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002d70:	e004      	b.n	8002d7c <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d72:	2303      	movs	r3, #3
 8002d74:	73bb      	strb	r3, [r7, #14]
 8002d76:	e001      	b.n	8002d7c <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d16c      	bne.n	8002e76 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3302      	adds	r3, #2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	8abb      	ldrh	r3, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002db6:	8abb      	ldrh	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	8a7b      	ldrh	r3, [r7, #18]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002dd6:	8a7b      	ldrh	r3, [r7, #18]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d049      	beq.n	8002e70 <eMBFuncReadDiscreteInputs+0xea>
 8002ddc:	8a7b      	ldrh	r3, [r7, #18]
 8002dde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002de2:	d245      	bcs.n	8002e70 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	60fa      	str	r2, [r7, #12]
 8002df4:	2202      	movs	r2, #2
 8002df6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002e04:	8a7b      	ldrh	r3, [r7, #18]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002e0e:	8a7b      	ldrh	r3, [r7, #18]
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
 8002e1a:	e003      	b.n	8002e24 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002e1c:	8a7b      	ldrh	r3, [r7, #18]
 8002e1e:	08db      	lsrs	r3, r3, #3
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	60fa      	str	r2, [r7, #12]
 8002e2a:	7dfa      	ldrb	r2, [r7, #23]
 8002e2c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8002e3a:	8a7a      	ldrh	r2, [r7, #18]
 8002e3c:	8abb      	ldrh	r3, [r7, #20]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7fd fb09 	bl	8000458 <eMBRegDiscreteCB>
 8002e46:	4603      	mov	r3, r0
 8002e48:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fa4c 	bl	80032f0 <prveMBError2Exception>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002e5c:	e00d      	b.n	8002e7a <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002e6e:	e004      	b.n	8002e7a <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e70:	2303      	movs	r3, #3
 8002e72:	75bb      	strb	r3, [r7, #22]
 8002e74:	e001      	b.n	8002e7a <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e76:	2303      	movs	r3, #3
 8002e78:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002e7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d122      	bne.n	8002ee0 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	89bb      	ldrh	r3, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002eb4:	89bb      	ldrh	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	1cd8      	adds	r0, r3, #3
 8002ebe:	89b9      	ldrh	r1, [r7, #12]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f7fd faa2 	bl	800040c <eMBRegHoldingCB>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8002ed2:	7afb      	ldrb	r3, [r7, #11]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fa0b 	bl	80032f0 <prveMBError2Exception>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	e001      	b.n	8002ee4 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d946      	bls.n	8002f92 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3301      	adds	r3, #1
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3302      	adds	r3, #2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	89bb      	ldrh	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002f1e:	89bb      	ldrh	r3, [r7, #12]
 8002f20:	3301      	adds	r3, #1
 8002f22:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3303      	adds	r3, #3
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	897b      	ldrh	r3, [r7, #10]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	795b      	ldrb	r3, [r3, #5]
 8002f42:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8002f44:	897b      	ldrh	r3, [r7, #10]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	2b78      	cmp	r3, #120	; 0x78
 8002f4e:	d81d      	bhi.n	8002f8c <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002f50:	897b      	ldrh	r3, [r7, #10]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002f58:	7a7a      	ldrb	r2, [r7, #9]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d116      	bne.n	8002f8c <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1d98      	adds	r0, r3, #6
 8002f62:	897a      	ldrh	r2, [r7, #10]
 8002f64:	89b9      	ldrh	r1, [r7, #12]
 8002f66:	2301      	movs	r3, #1
 8002f68:	f7fd fa50 	bl	800040c <eMBRegHoldingCB>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002f70:	7a3b      	ldrb	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002f76:	7a3b      	ldrb	r3, [r7, #8]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f9b9 	bl	80032f0 <prveMBError2Exception>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002f82:	e008      	b.n	8002f96 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2205      	movs	r2, #5
 8002f88:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002f8a:	e004      	b.n	8002f96 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f92:	2303      	movs	r3, #3
 8002f94:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d15c      	bne.n	8003070 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	8abb      	ldrh	r3, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002fd0:	8abb      	ldrh	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3303      	adds	r3, #3
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002fea:	8a7b      	ldrh	r3, [r7, #18]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d03c      	beq.n	800306a <eMBFuncReadHoldingRegister+0xca>
 8002ff0:	8a7b      	ldrh	r3, [r7, #18]
 8002ff2:	2b7d      	cmp	r3, #125	; 0x7d
 8002ff4:	d839      	bhi.n	800306a <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	60fa      	str	r2, [r7, #12]
 8003006:	2203      	movs	r2, #3
 8003008:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003016:	8a7b      	ldrh	r3, [r7, #18]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1c59      	adds	r1, r3, #1
 800301e:	60f9      	str	r1, [r7, #12]
 8003020:	0052      	lsls	r2, r2, #1
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8003032:	8a7a      	ldrh	r2, [r7, #18]
 8003034:	8ab9      	ldrh	r1, [r7, #20]
 8003036:	2300      	movs	r3, #0
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7fd f9e7 	bl	800040c <eMBRegHoldingCB>
 800303e:	4603      	mov	r3, r0
 8003040:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003042:	7afb      	ldrb	r3, [r7, #11]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f950 	bl	80032f0 <prveMBError2Exception>
 8003050:	4603      	mov	r3, r0
 8003052:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003054:	e00e      	b.n	8003074 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	8a7b      	ldrh	r3, [r7, #18]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	b29b      	uxth	r3, r3
 8003060:	4413      	add	r3, r2
 8003062:	b29a      	uxth	r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003068:	e004      	b.n	8003074 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800306a:	2303      	movs	r3, #3
 800306c:	75fb      	strb	r3, [r7, #23]
 800306e:	e001      	b.n	8003074 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003070:	2303      	movs	r3, #3
 8003072:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	2b09      	cmp	r3, #9
 8003092:	f240 8099 	bls.w	80031c8 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3301      	adds	r3, #1
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3302      	adds	r3, #2
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	8abb      	ldrh	r3, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 80030b0:	8abb      	ldrh	r3, [r7, #20]
 80030b2:	3301      	adds	r3, #1
 80030b4:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3303      	adds	r3, #3
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	8a7b      	ldrh	r3, [r7, #18]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3305      	adds	r3, #5
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3306      	adds	r3, #6
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	8a3b      	ldrh	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 80030ea:	8a3b      	ldrh	r3, [r7, #16]
 80030ec:	3301      	adds	r3, #1
 80030ee:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3307      	adds	r3, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3308      	adds	r3, #8
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b29a      	uxth	r2, r3
 8003104:	89fb      	ldrh	r3, [r7, #14]
 8003106:	4313      	orrs	r3, r2
 8003108:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7a5b      	ldrb	r3, [r3, #9]
 800310e:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003110:	8a7b      	ldrh	r3, [r7, #18]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d056      	beq.n	80031c4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8003116:	8a7b      	ldrh	r3, [r7, #18]
 8003118:	2b7d      	cmp	r3, #125	; 0x7d
 800311a:	d853      	bhi.n	80031c4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800311c:	89fb      	ldrh	r3, [r7, #14]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d050      	beq.n	80031c4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8003122:	89fb      	ldrh	r3, [r7, #14]
 8003124:	2b79      	cmp	r3, #121	; 0x79
 8003126:	d84d      	bhi.n	80031c4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	005a      	lsls	r2, r3, #1
 800312c:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800312e:	429a      	cmp	r2, r3
 8003130:	d148      	bne.n	80031c4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f103 000a 	add.w	r0, r3, #10
 8003138:	89fa      	ldrh	r2, [r7, #14]
 800313a:	8a39      	ldrh	r1, [r7, #16]
 800313c:	2301      	movs	r3, #1
 800313e:	f7fd f965 	bl	800040c <eMBRegHoldingCB>
 8003142:	4603      	mov	r3, r0
 8003144:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8003146:	7dbb      	ldrb	r3, [r7, #22]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d131      	bne.n	80031b0 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	2217      	movs	r2, #23
 800315e:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800316c:	8a7b      	ldrh	r3, [r7, #18]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	0052      	lsls	r2, r2, #1
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8003188:	8a7a      	ldrh	r2, [r7, #18]
 800318a:	8ab9      	ldrh	r1, [r7, #20]
 800318c:	2300      	movs	r3, #0
 800318e:	68b8      	ldr	r0, [r7, #8]
 8003190:	f7fd f93c 	bl	800040c <eMBRegHoldingCB>
 8003194:	4603      	mov	r3, r0
 8003196:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8003198:	7dbb      	ldrb	r3, [r7, #22]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	8a7b      	ldrh	r3, [r7, #18]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 80031b0:	7dbb      	ldrb	r3, [r7, #22]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80031b6:	7dbb      	ldrb	r3, [r7, #22]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f899 	bl	80032f0 <prveMBError2Exception>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80031c2:	e001      	b.n	80031c8 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031c4:	2303      	movs	r3, #3
 80031c6:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80031dc:	2300      	movs	r3, #0
 80031de:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d15f      	bne.n	80032a8 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3302      	adds	r3, #2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	8abb      	ldrh	r3, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003202:	8abb      	ldrh	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3303      	adds	r3, #3
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b29a      	uxth	r2, r3
 800321c:	8a7b      	ldrh	r3, [r7, #18]
 800321e:	4313      	orrs	r3, r2
 8003220:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8003222:	8a7b      	ldrh	r3, [r7, #18]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03c      	beq.n	80032a2 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8003228:	8a7b      	ldrh	r3, [r7, #18]
 800322a:	2b7c      	cmp	r3, #124	; 0x7c
 800322c:	d839      	bhi.n	80032a2 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	60fa      	str	r2, [r7, #12]
 800323e:	2204      	movs	r2, #4
 8003240:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800324e:	8a7b      	ldrh	r3, [r7, #18]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1c59      	adds	r1, r3, #1
 8003256:	60f9      	str	r1, [r7, #12]
 8003258:	0052      	lsls	r2, r2, #1
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800326a:	8a7a      	ldrh	r2, [r7, #18]
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	4619      	mov	r1, r3
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7fd f887 	bl	8000384 <eMBRegInputCB>
 8003276:	4603      	mov	r3, r0
 8003278:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800327a:	7afb      	ldrb	r3, [r7, #11]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003280:	7afb      	ldrb	r3, [r7, #11]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f834 	bl	80032f0 <prveMBError2Exception>
 8003288:	4603      	mov	r3, r0
 800328a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800328c:	e00e      	b.n	80032ac <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	8a7b      	ldrh	r3, [r7, #18]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	b29b      	uxth	r3, r3
 8003298:	4413      	add	r3, r2
 800329a:	b29a      	uxth	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80032a0:	e004      	b.n	80032ac <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80032a2:	2303      	movs	r3, #3
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	e001      	b.n	80032ac <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80032a8:	2303      	movs	r3, #3
 80032aa:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <eMBFuncReportSlaveID+0x30>)
 80032c8:	8812      	ldrh	r2, [r2, #0]
 80032ca:	4908      	ldr	r1, [pc, #32]	; (80032ec <eMBFuncReportSlaveID+0x34>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fdb5 	bl	8003e3c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <eMBFuncReportSlaveID+0x30>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	200001d4 	.word	0x200001d4
 80032ec:	200001b4 	.word	0x200001b4

080032f0 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	2b07      	cmp	r3, #7
 80032fe:	d00c      	beq.n	800331a <prveMBError2Exception+0x2a>
 8003300:	2b07      	cmp	r3, #7
 8003302:	dc0d      	bgt.n	8003320 <prveMBError2Exception+0x30>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <prveMBError2Exception+0x1e>
 8003308:	2b01      	cmp	r3, #1
 800330a:	d003      	beq.n	8003314 <prveMBError2Exception+0x24>
 800330c:	e008      	b.n	8003320 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
            break;
 8003312:	e008      	b.n	8003326 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8003314:	2302      	movs	r3, #2
 8003316:	73fb      	strb	r3, [r7, #15]
            break;
 8003318:	e005      	b.n	8003326 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800331a:	2306      	movs	r3, #6
 800331c:	73fb      	strb	r3, [r7, #15]
            break;
 800331e:	e002      	b.n	8003326 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8003320:	2304      	movs	r3, #4
 8003322:	73fb      	strb	r3, [r7, #15]
            break;
 8003324:	bf00      	nop
    }

    return eStatus;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
	...

08003334 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4603      	mov	r3, r0
 800333e:	71fb      	strb	r3, [r7, #7]
 8003340:	460b      	mov	r3, r1
 8003342:	71bb      	strb	r3, [r7, #6]
 8003344:	4613      	mov	r3, r2
 8003346:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 800334c:	79bb      	ldrb	r3, [r7, #6]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <eMBInit+0x2a>
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8003358:	79bb      	ldrb	r3, [r7, #6]
 800335a:	2bf7      	cmp	r3, #247	; 0xf7
 800335c:	d902      	bls.n	8003364 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 800335e:	2302      	movs	r3, #2
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e03a      	b.n	80033da <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <eMBInit+0xb0>)
 8003366:	79bb      	ldrb	r3, [r7, #6]
 8003368:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d121      	bne.n	80033b4 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <eMBInit+0xb4>)
 8003372:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <eMBInit+0xb8>)
 8003374:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <eMBInit+0xbc>)
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <eMBInit+0xc0>)
 800337a:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800337c:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <eMBInit+0xc4>)
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <eMBInit+0xc8>)
 8003380:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <eMBInit+0xcc>)
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <eMBInit+0xd0>)
 8003386:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8003388:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <eMBInit+0xd4>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800338e:	4b1f      	ldr	r3, [pc, #124]	; (800340c <eMBInit+0xd8>)
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <eMBInit+0xdc>)
 8003392:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <eMBInit+0xe0>)
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <eMBInit+0xe4>)
 8003398:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <eMBInit+0xe8>)
 800339c:	4a20      	ldr	r2, [pc, #128]	; (8003420 <eMBInit+0xec>)
 800339e:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <eMBInit+0xb0>)
 80033a2:	7818      	ldrb	r0, [r3, #0]
 80033a4:	7e3b      	ldrb	r3, [r7, #24]
 80033a6:	7979      	ldrb	r1, [r7, #5]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	f000 fad7 	bl	800395c <eMBRTUInit>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]
            break;
 80033b2:	e001      	b.n	80033b8 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80033b4:	2302      	movs	r3, #2
 80033b6:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 80033be:	f000 f94d 	bl	800365c <xMBPortEventInit>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80033c8:	2303      	movs	r3, #3
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e005      	b.n	80033da <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 80033ce:	4a15      	ldr	r2, [pc, #84]	; (8003424 <eMBInit+0xf0>)
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <eMBInit+0xf4>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200001d6 	.word	0x200001d6
 80033e8:	200001dc 	.word	0x200001dc
 80033ec:	080039d5 	.word	0x080039d5
 80033f0:	200001e0 	.word	0x200001e0
 80033f4:	080039fd 	.word	0x080039fd
 80033f8:	200001d8 	.word	0x200001d8
 80033fc:	08003ab5 	.word	0x08003ab5
 8003400:	200001e4 	.word	0x200001e4
 8003404:	08003a19 	.word	0x08003a19
 8003408:	200001e8 	.word	0x200001e8
 800340c:	200001ec 	.word	0x200001ec
 8003410:	08003b7d 	.word	0x08003b7d
 8003414:	200001f0 	.word	0x200001f0
 8003418:	08003c4d 	.word	0x08003c4d
 800341c:	200001f4 	.word	0x200001f4
 8003420:	08003cfd 	.word	0x08003cfd
 8003424:	200001d7 	.word	0x200001d7
 8003428:	2000001d 	.word	0x2000001d

0800342c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8003432:	2300      	movs	r3, #0
 8003434:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <eMBEnable+0x30>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d106      	bne.n	800344c <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <eMBEnable+0x34>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <eMBEnable+0x30>)
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e001      	b.n	8003450 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800344c:	2306      	movs	r3, #6
 800344e:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8003450:	79fb      	ldrb	r3, [r7, #7]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000001d 	.word	0x2000001d
 8003460:	200001dc 	.word	0x200001dc

08003464 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800346a:	2300      	movs	r3, #0
 800346c:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <eMBPoll+0x150>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8003476:	2306      	movs	r3, #6
 8003478:	e097      	b.n	80035aa <eMBPoll+0x146>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800347a:	1cbb      	adds	r3, r7, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f90f 	bl	80036a0 <xMBPortEventGet>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 808a 	bne.w	800359e <eMBPoll+0x13a>
    {
        switch ( eEvent )
 800348a:	78bb      	ldrb	r3, [r7, #2]
 800348c:	2b03      	cmp	r3, #3
 800348e:	f200 808b 	bhi.w	80035a8 <eMBPoll+0x144>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <eMBPoll+0x34>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080035a9 	.word	0x080035a9
 800349c:	080034a9 	.word	0x080034a9
 80034a0:	080034db 	.word	0x080034db
 80034a4:	080035a9 	.word	0x080035a9
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80034a8:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <eMBPoll+0x154>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a43      	ldr	r2, [pc, #268]	; (80035bc <eMBPoll+0x158>)
 80034ae:	4944      	ldr	r1, [pc, #272]	; (80035c0 <eMBPoll+0x15c>)
 80034b0:	4844      	ldr	r0, [pc, #272]	; (80035c4 <eMBPoll+0x160>)
 80034b2:	4798      	blx	r3
 80034b4:	4603      	mov	r3, r0
 80034b6:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d171      	bne.n	80035a2 <eMBPoll+0x13e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <eMBPoll+0x160>)
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <eMBPoll+0x164>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d003      	beq.n	80034d2 <eMBPoll+0x6e>
 80034ca:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <eMBPoll+0x160>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d167      	bne.n	80035a2 <eMBPoll+0x13e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80034d2:	2002      	movs	r0, #2
 80034d4:	f000 f8ce 	bl	8003674 <xMBPortEventPost>
                }
            }
            break;
 80034d8:	e063      	b.n	80035a2 <eMBPoll+0x13e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <eMBPoll+0x15c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <eMBPoll+0x168>)
 80034e2:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <eMBPoll+0x16c>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	e01f      	b.n	8003530 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80034f0:	4a38      	ldr	r2, [pc, #224]	; (80035d4 <eMBPoll+0x170>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01d      	beq.n	8003538 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80034fc:	4a35      	ldr	r2, [pc, #212]	; (80035d4 <eMBPoll+0x170>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8003504:	4b31      	ldr	r3, [pc, #196]	; (80035cc <eMBPoll+0x168>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d10e      	bne.n	800352a <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800350c:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <eMBPoll+0x170>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a2a      	ldr	r2, [pc, #168]	; (80035c0 <eMBPoll+0x15c>)
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	4928      	ldr	r1, [pc, #160]	; (80035bc <eMBPoll+0x158>)
 800351c:	4610      	mov	r0, r2
 800351e:	4798      	blx	r3
 8003520:	4603      	mov	r3, r0
 8003522:	461a      	mov	r2, r3
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <eMBPoll+0x16c>)
 8003526:	701a      	strb	r2, [r3, #0]
                    break;
 8003528:	e007      	b.n	800353a <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3301      	adds	r3, #1
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b0f      	cmp	r3, #15
 8003534:	dddc      	ble.n	80034f0 <eMBPoll+0x8c>
 8003536:	e000      	b.n	800353a <eMBPoll+0xd6>
                    break;
 8003538:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <eMBPoll+0x160>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d031      	beq.n	80035a6 <eMBPoll+0x142>
            {
                if( eException != MB_EX_NONE )
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <eMBPoll+0x16c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01d      	beq.n	8003586 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <eMBPoll+0x158>)
 800354c:	2200      	movs	r2, #0
 800354e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <eMBPoll+0x168>)
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <eMBPoll+0x15c>)
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <eMBPoll+0x158>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	1c58      	adds	r0, r3, #1
 800355e:	b284      	uxth	r4, r0
 8003560:	4816      	ldr	r0, [pc, #88]	; (80035bc <eMBPoll+0x158>)
 8003562:	8004      	strh	r4, [r0, #0]
 8003564:	440b      	add	r3, r1
 8003566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <eMBPoll+0x15c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <eMBPoll+0x158>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	b288      	uxth	r0, r1
 800357a:	4910      	ldr	r1, [pc, #64]	; (80035bc <eMBPoll+0x158>)
 800357c:	8008      	strh	r0, [r1, #0]
 800357e:	4413      	add	r3, r2
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <eMBPoll+0x16c>)
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <eMBPoll+0x174>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a0f      	ldr	r2, [pc, #60]	; (80035c8 <eMBPoll+0x164>)
 800358c:	7810      	ldrb	r0, [r2, #0]
 800358e:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <eMBPoll+0x15c>)
 8003590:	6811      	ldr	r1, [r2, #0]
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <eMBPoll+0x158>)
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	4798      	blx	r3
 8003598:	4603      	mov	r3, r0
 800359a:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800359c:	e003      	b.n	80035a6 <eMBPoll+0x142>

        case EV_FRAME_SENT:
            break;
        }
    }
 800359e:	bf00      	nop
 80035a0:	e002      	b.n	80035a8 <eMBPoll+0x144>
            break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <eMBPoll+0x144>
            break;
 80035a6:	bf00      	nop
    return MB_ENOERR;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000001d 	.word	0x2000001d
 80035b8:	200001e4 	.word	0x200001e4
 80035bc:	20000200 	.word	0x20000200
 80035c0:	200001fc 	.word	0x200001fc
 80035c4:	200001f8 	.word	0x200001f8
 80035c8:	200001d6 	.word	0x200001d6
 80035cc:	20000202 	.word	0x20000202
 80035d0:	20000203 	.word	0x20000203
 80035d4:	20000020 	.word	0x20000020
 80035d8:	200001d8 	.word	0x200001d8

080035dc <EnterCriticalSection>:
UART_HandleTypeDef* modbusUart;
TIM_HandleTypeDef* modbusTimer;
/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035e0:	b672      	cpsid	i
}
 80035e2:	bf00      	nop
  __disable_irq();
  lockCounter++;
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <EnterCriticalSection+0x1c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <EnterCriticalSection+0x1c>)
 80035ec:	6013      	str	r3, [r2, #0]
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000204 	.word	0x20000204

080035fc <ExitCriticalSection>:
/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  lockCounter--;
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <ExitCriticalSection+0x24>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	4a06      	ldr	r2, [pc, #24]	; (8003620 <ExitCriticalSection+0x24>)
 8003608:	6013      	str	r3, [r2, #0]
  if (lockCounter == 0)
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <ExitCriticalSection+0x24>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <ExitCriticalSection+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8003612:	b662      	cpsie	i
}
 8003614:	bf00      	nop
  {
    __enable_irq();
  }
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000204 	.word	0x20000204

08003624 <MT_PORT_SetTimerModule>:
/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  modbusTimer = timer;
 800362c:	4a03      	ldr	r2, [pc, #12]	; (800363c <MT_PORT_SetTimerModule+0x18>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	2000020c 	.word	0x2000020c

08003640 <MT_PORT_SetUartModule>:
/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  modbusUart = uart;
 8003648:	4a03      	ldr	r2, [pc, #12]	; (8003658 <MT_PORT_SetUartModule+0x18>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6013      	str	r3, [r2, #0]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	20000208 	.word	0x20000208

0800365c <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <xMBPortEventInit+0x14>)
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8003666:	2301      	movs	r3, #1
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	20000211 	.word	0x20000211

08003674 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <xMBPortEventPost+0x24>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8003684:	4a05      	ldr	r2, [pc, #20]	; (800369c <xMBPortEventPost+0x28>)
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000211 	.word	0x20000211
 800369c:	20000210 	.word	0x20000210

080036a0 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <xMBPortEventGet+0x34>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <xMBPortEventGet+0x38>)
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <xMBPortEventGet+0x34>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000211 	.word	0x20000211
 80036d8:	20000210 	.word	0x20000210

080036dc <vMBPortSerialEnable>:


/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	460a      	mov	r2, r1
 80036e6:	71fb      	strb	r3, [r7, #7]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable == FALSE) {
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d105      	bne.n	80036fe <vMBPortSerialEnable+0x22>
		HAL_UART_AbortReceive_IT(modbusUart);
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <vMBPortSerialEnable+0x5c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fd8e 	bl	8002218 <HAL_UART_AbortReceive_IT>
 80036fc:	e006      	b.n	800370c <vMBPortSerialEnable+0x30>
	} else {
		HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <vMBPortSerialEnable+0x5c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2201      	movs	r2, #1
 8003704:	490d      	ldr	r1, [pc, #52]	; (800373c <vMBPortSerialEnable+0x60>)
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fd05 	bl	8002116 <HAL_UART_Receive_IT>
	}
	if (xTxEnable == FALSE) {
 800370c:	79bb      	ldrb	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <vMBPortSerialEnable+0x42>
		HAL_UART_AbortTransmit_IT(modbusUart);
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <vMBPortSerialEnable+0x5c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fd2e 	bl	8002178 <HAL_UART_AbortTransmit_IT>
	} else {
		if (modbusUart->gState == HAL_UART_STATE_READY) {
			prvvUARTTxReadyISR();
		}
	}
}
 800371c:	e008      	b.n	8003730 <vMBPortSerialEnable+0x54>
		if (modbusUart->gState == HAL_UART_STATE_READY) {
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <vMBPortSerialEnable+0x5c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	d101      	bne.n	8003730 <vMBPortSerialEnable+0x54>
			prvvUARTTxReadyISR();
 800372c:	f000 f84a 	bl	80037c4 <prvvUARTTxReadyISR>
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000208 	.word	0x20000208
 800373c:	20000213 	.word	0x20000213

08003740 <xMBPortSerialInit>:

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6039      	str	r1, [r7, #0]
 8003748:	4611      	mov	r1, r2
 800374a:	461a      	mov	r2, r3
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
 8003750:	460b      	mov	r3, r1
 8003752:	71bb      	strb	r3, [r7, #6]
 8003754:	4613      	mov	r3, r2
 8003756:	717b      	strb	r3, [r7, #5]
    //return FALSE;
	  return TRUE;
 8003758:	2301      	movs	r3, #1
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	txByte = ucByte;
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <xMBPortSerialPutByte+0x28>)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <xMBPortSerialPutByte+0x2c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2201      	movs	r2, #1
 800377a:	4904      	ldr	r1, [pc, #16]	; (800378c <xMBPortSerialPutByte+0x28>)
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fc86 	bl	800208e <HAL_UART_Transmit_IT>

    return TRUE;
 8003782:	2301      	movs	r3, #1
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000212 	.word	0x20000212
 8003790:	20000208 	.word	0x20000208

08003794 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
	*pucByte = rxByte;
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <xMBPortSerialGetByte+0x28>)
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <xMBPortSerialGetByte+0x2c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	4904      	ldr	r1, [pc, #16]	; (80037bc <xMBPortSerialGetByte+0x28>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fcb2 	bl	8002116 <HAL_UART_Receive_IT>

    return TRUE;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000213 	.word	0x20000213
 80037c0:	20000208 	.word	0x20000208

080037c4 <prvvUARTTxReadyISR>:
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call 
 * xMBPortSerialPutByte( ) to send the character.
 */
static void prvvUARTTxReadyISR( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
    pxMBFrameCBTransmitterEmpty(  );
 80037c8:	4b02      	ldr	r3, [pc, #8]	; (80037d4 <prvvUARTTxReadyISR+0x10>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4798      	blx	r3
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200001f0 	.word	0x200001f0

080037d8 <prvvUARTRxISR>:
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
static void prvvUARTRxISR( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
    pxMBFrameCBByteReceived(  );
 80037dc:	4b02      	ldr	r3, [pc, #8]	; (80037e8 <prvvUARTRxISR+0x10>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4798      	blx	r3
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200001ec 	.word	0x200001ec

080037ec <HAL_UART_TxCpltCallback>:

/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_UART_TxCpltCallback+0x24>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d101      	bne.n	8003806 <HAL_UART_TxCpltCallback+0x1a>
  {
    prvvUARTTxReadyISR();
 8003802:	f7ff ffdf 	bl	80037c4 <prvvUARTTxReadyISR>
  }
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000208 	.word	0x20000208

08003814 <HAL_UART_RxCpltCallback>:

/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_UART_RxCpltCallback+0x24>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d101      	bne.n	800382e <HAL_UART_RxCpltCallback+0x1a>
  {
    prvvUARTRxISR();
 800382a:	f7ff ffd5 	bl	80037d8 <prvvUARTRxISR>
  }
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000208 	.word	0x20000208

0800383c <xMBPortTimersInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
	timerPeriod = usTim1Timerout50us;
 8003846:	4a04      	ldr	r2, [pc, #16]	; (8003858 <xMBPortTimersInit+0x1c>)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	8013      	strh	r3, [r2, #0]
	return TRUE;
 800384c:	2301      	movs	r3, #1
	//return FALSE;
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	20000214 	.word	0x20000214

0800385c <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	timerCounter = 0;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <vMBPortTimersEnable+0x18>)
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(modbusTimer);
 8003866:	4b04      	ldr	r3, [pc, #16]	; (8003878 <vMBPortTimersEnable+0x1c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd ffea 	bl	8001844 <HAL_TIM_Base_Start_IT>
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000216 	.word	0x20000216
 8003878:	2000020c 	.word	0x2000020c

0800387c <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(modbusTimer);
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <vMBPortTimersDisable+0x14>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe f82f 	bl	80018e8 <HAL_TIM_Base_Stop_IT>
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	2000020c 	.word	0x2000020c

08003894 <prvvTIMERExpiredISR>:
/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
static void prvvTIMERExpiredISR( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
    ( void )pxMBPortCBTimerExpired(  );
 8003898:	4b02      	ldr	r3, [pc, #8]	; (80038a4 <prvvTIMERExpiredISR+0x10>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4798      	blx	r3
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200001f4 	.word	0x200001f4

080038a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if (htim->Instance == modbusTimer->Instance)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d10d      	bne.n	80038da <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    timerCounter++;
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80038c8:	801a      	strh	r2, [r3, #0]
    if (timerCounter == timerPeriod)
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d101      	bne.n	80038da <HAL_TIM_PeriodElapsedCallback+0x32>
    {
      prvvTIMERExpiredISR();
 80038d6:	f7ff ffdd 	bl	8003894 <prvvTIMERExpiredISR>
    }
  }
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000020c 	.word	0x2000020c
 80038e8:	20000216 	.word	0x20000216
 80038ec:	20000214 	.word	0x20000214

080038f0 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 80038fc:	23ff      	movs	r3, #255	; 0xff
 80038fe:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8003900:	23ff      	movs	r3, #255	; 0xff
 8003902:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8003904:	e013      	b.n	800392e <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	7bbb      	ldrb	r3, [r7, #14]
 8003910:	4053      	eors	r3, r2
 8003912:	b2db      	uxtb	r3, r3
 8003914:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003916:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <usMBCRC16+0x64>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4413      	add	r3, r2
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	4053      	eors	r3, r2
 8003922:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8003924:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <usMBCRC16+0x68>)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	1e5a      	subs	r2, r3, #1
 8003932:	807a      	strh	r2, [r7, #2]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e6      	bne.n	8003906 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b21a      	sxth	r2, r3
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	b21b      	sxth	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	b21b      	sxth	r3, r3
 8003946:	b29b      	uxth	r3, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	08004f1c 	.word	0x08004f1c
 8003958:	0800501c 	.word	0x0800501c

0800395c <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	603a      	str	r2, [r7, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
 800396a:	460b      	mov	r3, r1
 800396c:	71bb      	strb	r3, [r7, #6]
 800396e:	4613      	mov	r3, r2
 8003970:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8003976:	f7ff fe31 	bl	80035dc <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800397a:	797b      	ldrb	r3, [r7, #5]
 800397c:	79b8      	ldrb	r0, [r7, #6]
 800397e:	2208      	movs	r2, #8
 8003980:	6839      	ldr	r1, [r7, #0]
 8003982:	f7ff fedd 	bl	8003740 <xMBPortSerialInit>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 800398c:	2303      	movs	r3, #3
 800398e:	73fb      	strb	r3, [r7, #15]
 8003990:	e016      	b.n	80039c0 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8003998:	d902      	bls.n	80039a0 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800399a:	2323      	movs	r3, #35	; 0x23
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	e005      	b.n	80039ac <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <eMBRTUInit+0x74>)
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff43 	bl	800383c <xMBPortTimersInit>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 80039bc:	2303      	movs	r3, #3
 80039be:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80039c0:	f7ff fe1c 	bl	80035fc <ExitCriticalSection>

    return eStatus;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	00177fa0 	.word	0x00177fa0

080039d4 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80039d8:	f7ff fe00 	bl	80035dc <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <eMBRTUStart+0x24>)
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80039e2:	2100      	movs	r1, #0
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7ff fe79 	bl	80036dc <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80039ea:	f7ff ff37 	bl	800385c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 80039ee:	f7ff fe05 	bl	80035fc <ExitCriticalSection>
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000219 	.word	0x20000219

080039fc <eMBRTUStop>:

void
eMBRTUStop( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8003a00:	f7ff fdec 	bl	80035dc <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8003a04:	2100      	movs	r1, #0
 8003a06:	2000      	movs	r0, #0
 8003a08:	f7ff fe68 	bl	80036dc <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8003a0c:	f7ff ff36 	bl	800387c <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8003a10:	f7ff fdf4 	bl	80035fc <ExitCriticalSection>
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8003a2c:	f7ff fdd6 	bl	80035dc <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <eMBRTUReceive+0x84>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2bff      	cmp	r3, #255	; 0xff
 8003a38:	d905      	bls.n	8003a46 <eMBRTUReceive+0x2e>
 8003a3a:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <eMBRTUReceive+0x88>)
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <eMBRTUReceive+0x8c>)
 8003a3e:	219c      	movs	r1, #156	; 0x9c
 8003a40:	4819      	ldr	r0, [pc, #100]	; (8003aa8 <eMBRTUReceive+0x90>)
 8003a42:	f000 f9a1 	bl	8003d88 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <eMBRTUReceive+0x84>)
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d91b      	bls.n	8003a88 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <eMBRTUReceive+0x84>)
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4619      	mov	r1, r3
 8003a58:	4814      	ldr	r0, [pc, #80]	; (8003aac <eMBRTUReceive+0x94>)
 8003a5a:	f7ff ff49 	bl	80038f0 <usMBCRC16>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d111      	bne.n	8003a88 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <eMBRTUReceive+0x94>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <eMBRTUReceive+0x84>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b03      	subs	r3, #3
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <eMBRTUReceive+0x98>)
 8003a80:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75bb      	strb	r3, [r7, #22]
 8003a86:	e001      	b.n	8003a8c <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8003a88:	2305      	movs	r3, #5
 8003a8a:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8003a8c:	f7ff fdb6 	bl	80035fc <ExitCriticalSection>
    return eStatus;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000322 	.word	0x20000322
 8003aa0:	08004e20 	.word	0x08004e20
 8003aa4:	0800511c 	.word	0x0800511c
 8003aa8:	08004e48 	.word	0x08004e48
 8003aac:	2000021c 	.word	0x2000021c
 8003ab0:	2000021d 	.word	0x2000021d

08003ab4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8003ac8:	f7ff fd88 	bl	80035dc <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <eMBRTUSend+0xb4>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d13f      	bne.n	8003b56 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <eMBRTUSend+0xb8>)
 8003adc:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <eMBRTUSend+0xbc>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <eMBRTUSend+0xb8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	79fa      	ldrb	r2, [r7, #7]
 8003aea:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <eMBRTUSend+0xbc>)
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	88bb      	ldrh	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <eMBRTUSend+0xbc>)
 8003afa:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <eMBRTUSend+0xb8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <eMBRTUSend+0xbc>)
 8003b02:	8812      	ldrh	r2, [r2, #0]
 8003b04:	b292      	uxth	r2, r2
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fef1 	bl	80038f0 <usMBCRC16>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <eMBRTUSend+0xbc>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	b291      	uxth	r1, r2
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <eMBRTUSend+0xbc>)
 8003b1e:	8011      	strh	r1, [r2, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	89bb      	ldrh	r3, [r7, #12]
 8003b24:	b2d9      	uxtb	r1, r3
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <eMBRTUSend+0xc0>)
 8003b28:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003b2a:	89bb      	ldrh	r3, [r7, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <eMBRTUSend+0xbc>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	b290      	uxth	r0, r2
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <eMBRTUSend+0xbc>)
 8003b3c:	8010      	strh	r0, [r2, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	b2c9      	uxtb	r1, r1
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <eMBRTUSend+0xc0>)
 8003b44:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <eMBRTUSend+0xc4>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7ff fdc4 	bl	80036dc <vMBPortSerialEnable>
 8003b54:	e001      	b.n	8003b5a <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8003b56:	2305      	movs	r3, #5
 8003b58:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8003b5a:	f7ff fd4f 	bl	80035fc <ExitCriticalSection>
    return eStatus;
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000219 	.word	0x20000219
 8003b6c:	2000031c 	.word	0x2000031c
 8003b70:	20000320 	.word	0x20000320
 8003b74:	2000021c 	.word	0x2000021c
 8003b78:	20000218 	.word	0x20000218

08003b7c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <xMBRTUReceiveFSM+0xb4>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <xMBRTUReceiveFSM+0x20>
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <xMBRTUReceiveFSM+0xb8>)
 8003b92:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <xMBRTUReceiveFSM+0xbc>)
 8003b94:	21e6      	movs	r1, #230	; 0xe6
 8003b96:	4829      	ldr	r0, [pc, #164]	; (8003c3c <xMBRTUReceiveFSM+0xc0>)
 8003b98:	f000 f8f6 	bl	8003d88 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8003b9c:	1dbb      	adds	r3, r7, #6
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fdf8 	bl	8003794 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <xMBRTUReceiveFSM+0xc4>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d83b      	bhi.n	8003c26 <xMBRTUReceiveFSM+0xaa>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <xMBRTUReceiveFSM+0x38>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bd1 	.word	0x08003bd1
 8003bbc:	08003bf9 	.word	0x08003bf9
 8003bc0:	08003bcb 	.word	0x08003bcb
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8003bc4:	f7ff fe4a 	bl	800385c <vMBPortTimersEnable>
        break;
 8003bc8:	e02d      	b.n	8003c26 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8003bca:	f7ff fe47 	bl	800385c <vMBPortTimersEnable>
        break;
 8003bce:	e02a      	b.n	8003c26 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8003bd0:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <xMBRTUReceiveFSM+0xc8>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <xMBRTUReceiveFSM+0xc8>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	b291      	uxth	r1, r2
 8003be0:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <xMBRTUReceiveFSM+0xc8>)
 8003be2:	8011      	strh	r1, [r2, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	79b9      	ldrb	r1, [r7, #6]
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <xMBRTUReceiveFSM+0xcc>)
 8003bea:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <xMBRTUReceiveFSM+0xc4>)
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8003bf2:	f7ff fe33 	bl	800385c <vMBPortTimersEnable>
        break;
 8003bf6:	e016      	b.n	8003c26 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <xMBRTUReceiveFSM+0xc8>)
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2bff      	cmp	r3, #255	; 0xff
 8003c00:	d80b      	bhi.n	8003c1a <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <xMBRTUReceiveFSM+0xc8>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	b291      	uxth	r1, r2
 8003c0c:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <xMBRTUReceiveFSM+0xc8>)
 8003c0e:	8011      	strh	r1, [r2, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	79b9      	ldrb	r1, [r7, #6]
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <xMBRTUReceiveFSM+0xcc>)
 8003c16:	5499      	strb	r1, [r3, r2]
 8003c18:	e002      	b.n	8003c20 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <xMBRTUReceiveFSM+0xc4>)
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8003c20:	f7ff fe1c 	bl	800385c <vMBPortTimersEnable>
        break;
 8003c24:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8003c26:	79fb      	ldrb	r3, [r7, #7]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000218 	.word	0x20000218
 8003c34:	08004e68 	.word	0x08004e68
 8003c38:	0800512c 	.word	0x0800512c
 8003c3c:	08004e48 	.word	0x08004e48
 8003c40:	20000219 	.word	0x20000219
 8003c44:	20000322 	.word	0x20000322
 8003c48:	2000021c 	.word	0x2000021c

08003c4c <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8003c56:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <xMBRTUTransmitFSM+0x94>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d006      	beq.n	8003c6e <xMBRTUTransmitFSM+0x22>
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <xMBRTUTransmitFSM+0x98>)
 8003c62:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <xMBRTUTransmitFSM+0x9c>)
 8003c64:	f240 1121 	movw	r1, #289	; 0x121
 8003c68:	4820      	ldr	r0, [pc, #128]	; (8003cec <xMBRTUTransmitFSM+0xa0>)
 8003c6a:	f000 f88d 	bl	8003d88 <__assert_func>

    switch ( eSndState )
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <xMBRTUTransmitFSM+0xa4>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <xMBRTUTransmitFSM+0x32>
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d005      	beq.n	8003c88 <xMBRTUTransmitFSM+0x3c>
 8003c7c:	e02a      	b.n	8003cd4 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8003c7e:	2100      	movs	r1, #0
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7ff fd2b 	bl	80036dc <vMBPortSerialEnable>
        break;
 8003c86:	e025      	b.n	8003cd4 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <xMBRTUTransmitFSM+0xa8>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d013      	beq.n	8003cba <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8003c92:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <xMBRTUTransmitFSM+0xac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fd62 	bl	8003764 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <xMBRTUTransmitFSM+0xac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <xMBRTUTransmitFSM+0xac>)
 8003ca8:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <xMBRTUTransmitFSM+0xa8>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <xMBRTUTransmitFSM+0xa8>)
 8003cb6:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8003cb8:	e00b      	b.n	8003cd2 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f7ff fcda 	bl	8003674 <xMBPortEventPost>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f7ff fd08 	bl	80036dc <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <xMBRTUTransmitFSM+0xa4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
        break;
 8003cd2:	bf00      	nop
    }

    return xNeedPoll;
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000219 	.word	0x20000219
 8003ce4:	08004e84 	.word	0x08004e84
 8003ce8:	08005140 	.word	0x08005140
 8003cec:	08004e48 	.word	0x08004e48
 8003cf0:	20000218 	.word	0x20000218
 8003cf4:	20000320 	.word	0x20000320
 8003cf8:	2000031c 	.word	0x2000031c

08003cfc <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <xMBRTUTimerT35Expired+0x7c>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d028      	beq.n	8003d62 <xMBRTUTimerT35Expired+0x66>
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	dc10      	bgt.n	8003d36 <xMBRTUTimerT35Expired+0x3a>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <xMBRTUTimerT35Expired+0x22>
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d006      	beq.n	8003d2a <xMBRTUTimerT35Expired+0x2e>
 8003d1c:	e00b      	b.n	8003d36 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f7ff fca8 	bl	8003674 <xMBPortEventPost>
 8003d24:	4603      	mov	r3, r0
 8003d26:	71fb      	strb	r3, [r7, #7]
        break;
 8003d28:	e01c      	b.n	8003d64 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f7ff fca2 	bl	8003674 <xMBPortEventPost>
 8003d30:	4603      	mov	r3, r0
 8003d32:	71fb      	strb	r3, [r7, #7]
        break;
 8003d34:	e016      	b.n	8003d64 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <xMBRTUTimerT35Expired+0x7c>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d011      	beq.n	8003d64 <xMBRTUTimerT35Expired+0x68>
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <xMBRTUTimerT35Expired+0x7c>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d00c      	beq.n	8003d64 <xMBRTUTimerT35Expired+0x68>
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <xMBRTUTimerT35Expired+0x7c>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d007      	beq.n	8003d64 <xMBRTUTimerT35Expired+0x68>
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <xMBRTUTimerT35Expired+0x80>)
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <xMBRTUTimerT35Expired+0x84>)
 8003d58:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003d5c:	4809      	ldr	r0, [pc, #36]	; (8003d84 <xMBRTUTimerT35Expired+0x88>)
 8003d5e:	f000 f813 	bl	8003d88 <__assert_func>
        break;
 8003d62:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8003d64:	f7ff fd8a 	bl	800387c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <xMBRTUTimerT35Expired+0x7c>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000219 	.word	0x20000219
 8003d7c:	08004ea0 	.word	0x08004ea0
 8003d80:	08005154 	.word	0x08005154
 8003d84:	08004e48 	.word	0x08004e48

08003d88 <__assert_func>:
 8003d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d8a:	4614      	mov	r4, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <__assert_func+0x2c>)
 8003d90:	4605      	mov	r5, r0
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68d8      	ldr	r0, [r3, #12]
 8003d96:	b14c      	cbz	r4, 8003dac <__assert_func+0x24>
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <__assert_func+0x30>)
 8003d9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d9e:	9100      	str	r1, [sp, #0]
 8003da0:	462b      	mov	r3, r5
 8003da2:	4906      	ldr	r1, [pc, #24]	; (8003dbc <__assert_func+0x34>)
 8003da4:	f000 f814 	bl	8003dd0 <fiprintf>
 8003da8:	f000 fc0c 	bl	80045c4 <abort>
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <__assert_func+0x38>)
 8003dae:	461c      	mov	r4, r3
 8003db0:	e7f3      	b.n	8003d9a <__assert_func+0x12>
 8003db2:	bf00      	nop
 8003db4:	200000a0 	.word	0x200000a0
 8003db8:	0800516a 	.word	0x0800516a
 8003dbc:	08005177 	.word	0x08005177
 8003dc0:	080051a5 	.word	0x080051a5

08003dc4 <__errno>:
 8003dc4:	4b01      	ldr	r3, [pc, #4]	; (8003dcc <__errno+0x8>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	200000a0 	.word	0x200000a0

08003dd0 <fiprintf>:
 8003dd0:	b40e      	push	{r1, r2, r3}
 8003dd2:	b503      	push	{r0, r1, lr}
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	ab03      	add	r3, sp, #12
 8003dd8:	4805      	ldr	r0, [pc, #20]	; (8003df0 <fiprintf+0x20>)
 8003dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	f000 f869 	bl	8003eb8 <_vfiprintf_r>
 8003de6:	b002      	add	sp, #8
 8003de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dec:	b003      	add	sp, #12
 8003dee:	4770      	bx	lr
 8003df0:	200000a0 	.word	0x200000a0

08003df4 <__libc_init_array>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	2600      	movs	r6, #0
 8003df8:	4d0c      	ldr	r5, [pc, #48]	; (8003e2c <__libc_init_array+0x38>)
 8003dfa:	4c0d      	ldr	r4, [pc, #52]	; (8003e30 <__libc_init_array+0x3c>)
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	42a6      	cmp	r6, r4
 8003e02:	d109      	bne.n	8003e18 <__libc_init_array+0x24>
 8003e04:	f000 fff8 	bl	8004df8 <_init>
 8003e08:	2600      	movs	r6, #0
 8003e0a:	4d0a      	ldr	r5, [pc, #40]	; (8003e34 <__libc_init_array+0x40>)
 8003e0c:	4c0a      	ldr	r4, [pc, #40]	; (8003e38 <__libc_init_array+0x44>)
 8003e0e:	1b64      	subs	r4, r4, r5
 8003e10:	10a4      	asrs	r4, r4, #2
 8003e12:	42a6      	cmp	r6, r4
 8003e14:	d105      	bne.n	8003e22 <__libc_init_array+0x2e>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1c:	4798      	blx	r3
 8003e1e:	3601      	adds	r6, #1
 8003e20:	e7ee      	b.n	8003e00 <__libc_init_array+0xc>
 8003e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e26:	4798      	blx	r3
 8003e28:	3601      	adds	r6, #1
 8003e2a:	e7f2      	b.n	8003e12 <__libc_init_array+0x1e>
 8003e2c:	08005240 	.word	0x08005240
 8003e30:	08005240 	.word	0x08005240
 8003e34:	08005240 	.word	0x08005240
 8003e38:	08005244 	.word	0x08005244

08003e3c <memcpy>:
 8003e3c:	440a      	add	r2, r1
 8003e3e:	4291      	cmp	r1, r2
 8003e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e44:	d100      	bne.n	8003e48 <memcpy+0xc>
 8003e46:	4770      	bx	lr
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e4e:	4291      	cmp	r1, r2
 8003e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e54:	d1f9      	bne.n	8003e4a <memcpy+0xe>
 8003e56:	bd10      	pop	{r4, pc}

08003e58 <memset>:
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4402      	add	r2, r0
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d100      	bne.n	8003e62 <memset+0xa>
 8003e60:	4770      	bx	lr
 8003e62:	f803 1b01 	strb.w	r1, [r3], #1
 8003e66:	e7f9      	b.n	8003e5c <memset+0x4>

08003e68 <__sfputc_r>:
 8003e68:	6893      	ldr	r3, [r2, #8]
 8003e6a:	b410      	push	{r4}
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	6093      	str	r3, [r2, #8]
 8003e72:	da07      	bge.n	8003e84 <__sfputc_r+0x1c>
 8003e74:	6994      	ldr	r4, [r2, #24]
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	db01      	blt.n	8003e7e <__sfputc_r+0x16>
 8003e7a:	290a      	cmp	r1, #10
 8003e7c:	d102      	bne.n	8003e84 <__sfputc_r+0x1c>
 8003e7e:	bc10      	pop	{r4}
 8003e80:	f000 bae0 	b.w	8004444 <__swbuf_r>
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	1c58      	adds	r0, r3, #1
 8003e88:	6010      	str	r0, [r2, #0]
 8003e8a:	7019      	strb	r1, [r3, #0]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	bc10      	pop	{r4}
 8003e90:	4770      	bx	lr

08003e92 <__sfputs_r>:
 8003e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e94:	4606      	mov	r6, r0
 8003e96:	460f      	mov	r7, r1
 8003e98:	4614      	mov	r4, r2
 8003e9a:	18d5      	adds	r5, r2, r3
 8003e9c:	42ac      	cmp	r4, r5
 8003e9e:	d101      	bne.n	8003ea4 <__sfputs_r+0x12>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e007      	b.n	8003eb4 <__sfputs_r+0x22>
 8003ea4:	463a      	mov	r2, r7
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eac:	f7ff ffdc 	bl	8003e68 <__sfputc_r>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d1f3      	bne.n	8003e9c <__sfputs_r+0xa>
 8003eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eb8 <_vfiprintf_r>:
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ebc:	460d      	mov	r5, r1
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	b09d      	sub	sp, #116	; 0x74
 8003ec6:	b118      	cbz	r0, 8003ed0 <_vfiprintf_r+0x18>
 8003ec8:	6983      	ldr	r3, [r0, #24]
 8003eca:	b90b      	cbnz	r3, 8003ed0 <_vfiprintf_r+0x18>
 8003ecc:	f000 fc98 	bl	8004800 <__sinit>
 8003ed0:	4b89      	ldr	r3, [pc, #548]	; (80040f8 <_vfiprintf_r+0x240>)
 8003ed2:	429d      	cmp	r5, r3
 8003ed4:	d11b      	bne.n	8003f0e <_vfiprintf_r+0x56>
 8003ed6:	6875      	ldr	r5, [r6, #4]
 8003ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eda:	07d9      	lsls	r1, r3, #31
 8003edc:	d405      	bmi.n	8003eea <_vfiprintf_r+0x32>
 8003ede:	89ab      	ldrh	r3, [r5, #12]
 8003ee0:	059a      	lsls	r2, r3, #22
 8003ee2:	d402      	bmi.n	8003eea <_vfiprintf_r+0x32>
 8003ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ee6:	f000 fd29 	bl	800493c <__retarget_lock_acquire_recursive>
 8003eea:	89ab      	ldrh	r3, [r5, #12]
 8003eec:	071b      	lsls	r3, r3, #28
 8003eee:	d501      	bpl.n	8003ef4 <_vfiprintf_r+0x3c>
 8003ef0:	692b      	ldr	r3, [r5, #16]
 8003ef2:	b9eb      	cbnz	r3, 8003f30 <_vfiprintf_r+0x78>
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f000 faf6 	bl	80044e8 <__swsetup_r>
 8003efc:	b1c0      	cbz	r0, 8003f30 <_vfiprintf_r+0x78>
 8003efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f00:	07dc      	lsls	r4, r3, #31
 8003f02:	d50e      	bpl.n	8003f22 <_vfiprintf_r+0x6a>
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	b01d      	add	sp, #116	; 0x74
 8003f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0e:	4b7b      	ldr	r3, [pc, #492]	; (80040fc <_vfiprintf_r+0x244>)
 8003f10:	429d      	cmp	r5, r3
 8003f12:	d101      	bne.n	8003f18 <_vfiprintf_r+0x60>
 8003f14:	68b5      	ldr	r5, [r6, #8]
 8003f16:	e7df      	b.n	8003ed8 <_vfiprintf_r+0x20>
 8003f18:	4b79      	ldr	r3, [pc, #484]	; (8004100 <_vfiprintf_r+0x248>)
 8003f1a:	429d      	cmp	r5, r3
 8003f1c:	bf08      	it	eq
 8003f1e:	68f5      	ldreq	r5, [r6, #12]
 8003f20:	e7da      	b.n	8003ed8 <_vfiprintf_r+0x20>
 8003f22:	89ab      	ldrh	r3, [r5, #12]
 8003f24:	0598      	lsls	r0, r3, #22
 8003f26:	d4ed      	bmi.n	8003f04 <_vfiprintf_r+0x4c>
 8003f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f2a:	f000 fd08 	bl	800493e <__retarget_lock_release_recursive>
 8003f2e:	e7e9      	b.n	8003f04 <_vfiprintf_r+0x4c>
 8003f30:	2300      	movs	r3, #0
 8003f32:	9309      	str	r3, [sp, #36]	; 0x24
 8003f34:	2320      	movs	r3, #32
 8003f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f3a:	2330      	movs	r3, #48	; 0x30
 8003f3c:	f04f 0901 	mov.w	r9, #1
 8003f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f44:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004104 <_vfiprintf_r+0x24c>
 8003f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	469a      	mov	sl, r3
 8003f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f54:	b10a      	cbz	r2, 8003f5a <_vfiprintf_r+0xa2>
 8003f56:	2a25      	cmp	r2, #37	; 0x25
 8003f58:	d1f9      	bne.n	8003f4e <_vfiprintf_r+0x96>
 8003f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f5e:	d00b      	beq.n	8003f78 <_vfiprintf_r+0xc0>
 8003f60:	465b      	mov	r3, fp
 8003f62:	4622      	mov	r2, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	4630      	mov	r0, r6
 8003f68:	f7ff ff93 	bl	8003e92 <__sfputs_r>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	f000 80aa 	beq.w	80040c6 <_vfiprintf_r+0x20e>
 8003f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f74:	445a      	add	r2, fp
 8003f76:	9209      	str	r2, [sp, #36]	; 0x24
 8003f78:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80a2 	beq.w	80040c6 <_vfiprintf_r+0x20e>
 8003f82:	2300      	movs	r3, #0
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f8c:	f10a 0a01 	add.w	sl, sl, #1
 8003f90:	9304      	str	r3, [sp, #16]
 8003f92:	9307      	str	r3, [sp, #28]
 8003f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f98:	931a      	str	r3, [sp, #104]	; 0x68
 8003f9a:	4654      	mov	r4, sl
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa2:	4858      	ldr	r0, [pc, #352]	; (8004104 <_vfiprintf_r+0x24c>)
 8003fa4:	f000 fd32 	bl	8004a0c <memchr>
 8003fa8:	9a04      	ldr	r2, [sp, #16]
 8003faa:	b9d8      	cbnz	r0, 8003fe4 <_vfiprintf_r+0x12c>
 8003fac:	06d1      	lsls	r1, r2, #27
 8003fae:	bf44      	itt	mi
 8003fb0:	2320      	movmi	r3, #32
 8003fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb6:	0713      	lsls	r3, r2, #28
 8003fb8:	bf44      	itt	mi
 8003fba:	232b      	movmi	r3, #43	; 0x2b
 8003fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc6:	d015      	beq.n	8003ff4 <_vfiprintf_r+0x13c>
 8003fc8:	4654      	mov	r4, sl
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f04f 0c0a 	mov.w	ip, #10
 8003fd0:	9a07      	ldr	r2, [sp, #28]
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd8:	3b30      	subs	r3, #48	; 0x30
 8003fda:	2b09      	cmp	r3, #9
 8003fdc:	d94e      	bls.n	800407c <_vfiprintf_r+0x1c4>
 8003fde:	b1b0      	cbz	r0, 800400e <_vfiprintf_r+0x156>
 8003fe0:	9207      	str	r2, [sp, #28]
 8003fe2:	e014      	b.n	800400e <_vfiprintf_r+0x156>
 8003fe4:	eba0 0308 	sub.w	r3, r0, r8
 8003fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8003fec:	4313      	orrs	r3, r2
 8003fee:	46a2      	mov	sl, r4
 8003ff0:	9304      	str	r3, [sp, #16]
 8003ff2:	e7d2      	b.n	8003f9a <_vfiprintf_r+0xe2>
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	1d19      	adds	r1, r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	9103      	str	r1, [sp, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bfbb      	ittet	lt
 8004000:	425b      	neglt	r3, r3
 8004002:	f042 0202 	orrlt.w	r2, r2, #2
 8004006:	9307      	strge	r3, [sp, #28]
 8004008:	9307      	strlt	r3, [sp, #28]
 800400a:	bfb8      	it	lt
 800400c:	9204      	strlt	r2, [sp, #16]
 800400e:	7823      	ldrb	r3, [r4, #0]
 8004010:	2b2e      	cmp	r3, #46	; 0x2e
 8004012:	d10c      	bne.n	800402e <_vfiprintf_r+0x176>
 8004014:	7863      	ldrb	r3, [r4, #1]
 8004016:	2b2a      	cmp	r3, #42	; 0x2a
 8004018:	d135      	bne.n	8004086 <_vfiprintf_r+0x1ce>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	3402      	adds	r4, #2
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	9203      	str	r2, [sp, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	bfb8      	it	lt
 8004028:	f04f 33ff 	movlt.w	r3, #4294967295
 800402c:	9305      	str	r3, [sp, #20]
 800402e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004108 <_vfiprintf_r+0x250>
 8004032:	2203      	movs	r2, #3
 8004034:	4650      	mov	r0, sl
 8004036:	7821      	ldrb	r1, [r4, #0]
 8004038:	f000 fce8 	bl	8004a0c <memchr>
 800403c:	b140      	cbz	r0, 8004050 <_vfiprintf_r+0x198>
 800403e:	2340      	movs	r3, #64	; 0x40
 8004040:	eba0 000a 	sub.w	r0, r0, sl
 8004044:	fa03 f000 	lsl.w	r0, r3, r0
 8004048:	9b04      	ldr	r3, [sp, #16]
 800404a:	3401      	adds	r4, #1
 800404c:	4303      	orrs	r3, r0
 800404e:	9304      	str	r3, [sp, #16]
 8004050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004054:	2206      	movs	r2, #6
 8004056:	482d      	ldr	r0, [pc, #180]	; (800410c <_vfiprintf_r+0x254>)
 8004058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800405c:	f000 fcd6 	bl	8004a0c <memchr>
 8004060:	2800      	cmp	r0, #0
 8004062:	d03f      	beq.n	80040e4 <_vfiprintf_r+0x22c>
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <_vfiprintf_r+0x258>)
 8004066:	bb1b      	cbnz	r3, 80040b0 <_vfiprintf_r+0x1f8>
 8004068:	9b03      	ldr	r3, [sp, #12]
 800406a:	3307      	adds	r3, #7
 800406c:	f023 0307 	bic.w	r3, r3, #7
 8004070:	3308      	adds	r3, #8
 8004072:	9303      	str	r3, [sp, #12]
 8004074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004076:	443b      	add	r3, r7
 8004078:	9309      	str	r3, [sp, #36]	; 0x24
 800407a:	e767      	b.n	8003f4c <_vfiprintf_r+0x94>
 800407c:	460c      	mov	r4, r1
 800407e:	2001      	movs	r0, #1
 8004080:	fb0c 3202 	mla	r2, ip, r2, r3
 8004084:	e7a5      	b.n	8003fd2 <_vfiprintf_r+0x11a>
 8004086:	2300      	movs	r3, #0
 8004088:	f04f 0c0a 	mov.w	ip, #10
 800408c:	4619      	mov	r1, r3
 800408e:	3401      	adds	r4, #1
 8004090:	9305      	str	r3, [sp, #20]
 8004092:	4620      	mov	r0, r4
 8004094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004098:	3a30      	subs	r2, #48	; 0x30
 800409a:	2a09      	cmp	r2, #9
 800409c:	d903      	bls.n	80040a6 <_vfiprintf_r+0x1ee>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0c5      	beq.n	800402e <_vfiprintf_r+0x176>
 80040a2:	9105      	str	r1, [sp, #20]
 80040a4:	e7c3      	b.n	800402e <_vfiprintf_r+0x176>
 80040a6:	4604      	mov	r4, r0
 80040a8:	2301      	movs	r3, #1
 80040aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ae:	e7f0      	b.n	8004092 <_vfiprintf_r+0x1da>
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	462a      	mov	r2, r5
 80040b6:	4630      	mov	r0, r6
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <_vfiprintf_r+0x25c>)
 80040ba:	a904      	add	r1, sp, #16
 80040bc:	f3af 8000 	nop.w
 80040c0:	4607      	mov	r7, r0
 80040c2:	1c78      	adds	r0, r7, #1
 80040c4:	d1d6      	bne.n	8004074 <_vfiprintf_r+0x1bc>
 80040c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c8:	07d9      	lsls	r1, r3, #31
 80040ca:	d405      	bmi.n	80040d8 <_vfiprintf_r+0x220>
 80040cc:	89ab      	ldrh	r3, [r5, #12]
 80040ce:	059a      	lsls	r2, r3, #22
 80040d0:	d402      	bmi.n	80040d8 <_vfiprintf_r+0x220>
 80040d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040d4:	f000 fc33 	bl	800493e <__retarget_lock_release_recursive>
 80040d8:	89ab      	ldrh	r3, [r5, #12]
 80040da:	065b      	lsls	r3, r3, #25
 80040dc:	f53f af12 	bmi.w	8003f04 <_vfiprintf_r+0x4c>
 80040e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040e2:	e711      	b.n	8003f08 <_vfiprintf_r+0x50>
 80040e4:	ab03      	add	r3, sp, #12
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	462a      	mov	r2, r5
 80040ea:	4630      	mov	r0, r6
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <_vfiprintf_r+0x25c>)
 80040ee:	a904      	add	r1, sp, #16
 80040f0:	f000 f882 	bl	80041f8 <_printf_i>
 80040f4:	e7e4      	b.n	80040c0 <_vfiprintf_r+0x208>
 80040f6:	bf00      	nop
 80040f8:	08005200 	.word	0x08005200
 80040fc:	08005220 	.word	0x08005220
 8004100:	080051e0 	.word	0x080051e0
 8004104:	080051ac 	.word	0x080051ac
 8004108:	080051b2 	.word	0x080051b2
 800410c:	080051b6 	.word	0x080051b6
 8004110:	00000000 	.word	0x00000000
 8004114:	08003e93 	.word	0x08003e93

08004118 <_printf_common>:
 8004118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411c:	4616      	mov	r6, r2
 800411e:	4699      	mov	r9, r3
 8004120:	688a      	ldr	r2, [r1, #8]
 8004122:	690b      	ldr	r3, [r1, #16]
 8004124:	4607      	mov	r7, r0
 8004126:	4293      	cmp	r3, r2
 8004128:	bfb8      	it	lt
 800412a:	4613      	movlt	r3, r2
 800412c:	6033      	str	r3, [r6, #0]
 800412e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004132:	460c      	mov	r4, r1
 8004134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004138:	b10a      	cbz	r2, 800413e <_printf_common+0x26>
 800413a:	3301      	adds	r3, #1
 800413c:	6033      	str	r3, [r6, #0]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	0699      	lsls	r1, r3, #26
 8004142:	bf42      	ittt	mi
 8004144:	6833      	ldrmi	r3, [r6, #0]
 8004146:	3302      	addmi	r3, #2
 8004148:	6033      	strmi	r3, [r6, #0]
 800414a:	6825      	ldr	r5, [r4, #0]
 800414c:	f015 0506 	ands.w	r5, r5, #6
 8004150:	d106      	bne.n	8004160 <_printf_common+0x48>
 8004152:	f104 0a19 	add.w	sl, r4, #25
 8004156:	68e3      	ldr	r3, [r4, #12]
 8004158:	6832      	ldr	r2, [r6, #0]
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	42ab      	cmp	r3, r5
 800415e:	dc28      	bgt.n	80041b2 <_printf_common+0x9a>
 8004160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004164:	1e13      	subs	r3, r2, #0
 8004166:	6822      	ldr	r2, [r4, #0]
 8004168:	bf18      	it	ne
 800416a:	2301      	movne	r3, #1
 800416c:	0692      	lsls	r2, r2, #26
 800416e:	d42d      	bmi.n	80041cc <_printf_common+0xb4>
 8004170:	4649      	mov	r1, r9
 8004172:	4638      	mov	r0, r7
 8004174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004178:	47c0      	blx	r8
 800417a:	3001      	adds	r0, #1
 800417c:	d020      	beq.n	80041c0 <_printf_common+0xa8>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	68e5      	ldr	r5, [r4, #12]
 8004182:	f003 0306 	and.w	r3, r3, #6
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf18      	it	ne
 800418a:	2500      	movne	r5, #0
 800418c:	6832      	ldr	r2, [r6, #0]
 800418e:	f04f 0600 	mov.w	r6, #0
 8004192:	68a3      	ldr	r3, [r4, #8]
 8004194:	bf08      	it	eq
 8004196:	1aad      	subeq	r5, r5, r2
 8004198:	6922      	ldr	r2, [r4, #16]
 800419a:	bf08      	it	eq
 800419c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bfc4      	itt	gt
 80041a4:	1a9b      	subgt	r3, r3, r2
 80041a6:	18ed      	addgt	r5, r5, r3
 80041a8:	341a      	adds	r4, #26
 80041aa:	42b5      	cmp	r5, r6
 80041ac:	d11a      	bne.n	80041e4 <_printf_common+0xcc>
 80041ae:	2000      	movs	r0, #0
 80041b0:	e008      	b.n	80041c4 <_printf_common+0xac>
 80041b2:	2301      	movs	r3, #1
 80041b4:	4652      	mov	r2, sl
 80041b6:	4649      	mov	r1, r9
 80041b8:	4638      	mov	r0, r7
 80041ba:	47c0      	blx	r8
 80041bc:	3001      	adds	r0, #1
 80041be:	d103      	bne.n	80041c8 <_printf_common+0xb0>
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c8:	3501      	adds	r5, #1
 80041ca:	e7c4      	b.n	8004156 <_printf_common+0x3e>
 80041cc:	2030      	movs	r0, #48	; 0x30
 80041ce:	18e1      	adds	r1, r4, r3
 80041d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041da:	4422      	add	r2, r4
 80041dc:	3302      	adds	r3, #2
 80041de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041e2:	e7c5      	b.n	8004170 <_printf_common+0x58>
 80041e4:	2301      	movs	r3, #1
 80041e6:	4622      	mov	r2, r4
 80041e8:	4649      	mov	r1, r9
 80041ea:	4638      	mov	r0, r7
 80041ec:	47c0      	blx	r8
 80041ee:	3001      	adds	r0, #1
 80041f0:	d0e6      	beq.n	80041c0 <_printf_common+0xa8>
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7d9      	b.n	80041aa <_printf_common+0x92>
	...

080041f8 <_printf_i>:
 80041f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041fc:	7e0f      	ldrb	r7, [r1, #24]
 80041fe:	4691      	mov	r9, r2
 8004200:	2f78      	cmp	r7, #120	; 0x78
 8004202:	4680      	mov	r8, r0
 8004204:	460c      	mov	r4, r1
 8004206:	469a      	mov	sl, r3
 8004208:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800420a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800420e:	d807      	bhi.n	8004220 <_printf_i+0x28>
 8004210:	2f62      	cmp	r7, #98	; 0x62
 8004212:	d80a      	bhi.n	800422a <_printf_i+0x32>
 8004214:	2f00      	cmp	r7, #0
 8004216:	f000 80d9 	beq.w	80043cc <_printf_i+0x1d4>
 800421a:	2f58      	cmp	r7, #88	; 0x58
 800421c:	f000 80a4 	beq.w	8004368 <_printf_i+0x170>
 8004220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004228:	e03a      	b.n	80042a0 <_printf_i+0xa8>
 800422a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800422e:	2b15      	cmp	r3, #21
 8004230:	d8f6      	bhi.n	8004220 <_printf_i+0x28>
 8004232:	a101      	add	r1, pc, #4	; (adr r1, 8004238 <_printf_i+0x40>)
 8004234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004238:	08004291 	.word	0x08004291
 800423c:	080042a5 	.word	0x080042a5
 8004240:	08004221 	.word	0x08004221
 8004244:	08004221 	.word	0x08004221
 8004248:	08004221 	.word	0x08004221
 800424c:	08004221 	.word	0x08004221
 8004250:	080042a5 	.word	0x080042a5
 8004254:	08004221 	.word	0x08004221
 8004258:	08004221 	.word	0x08004221
 800425c:	08004221 	.word	0x08004221
 8004260:	08004221 	.word	0x08004221
 8004264:	080043b3 	.word	0x080043b3
 8004268:	080042d5 	.word	0x080042d5
 800426c:	08004395 	.word	0x08004395
 8004270:	08004221 	.word	0x08004221
 8004274:	08004221 	.word	0x08004221
 8004278:	080043d5 	.word	0x080043d5
 800427c:	08004221 	.word	0x08004221
 8004280:	080042d5 	.word	0x080042d5
 8004284:	08004221 	.word	0x08004221
 8004288:	08004221 	.word	0x08004221
 800428c:	0800439d 	.word	0x0800439d
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	1d1a      	adds	r2, r3, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	602a      	str	r2, [r5, #0]
 8004298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800429c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0a4      	b.n	80043ee <_printf_i+0x1f6>
 80042a4:	6820      	ldr	r0, [r4, #0]
 80042a6:	6829      	ldr	r1, [r5, #0]
 80042a8:	0606      	lsls	r6, r0, #24
 80042aa:	f101 0304 	add.w	r3, r1, #4
 80042ae:	d50a      	bpl.n	80042c6 <_printf_i+0xce>
 80042b0:	680e      	ldr	r6, [r1, #0]
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	2e00      	cmp	r6, #0
 80042b6:	da03      	bge.n	80042c0 <_printf_i+0xc8>
 80042b8:	232d      	movs	r3, #45	; 0x2d
 80042ba:	4276      	negs	r6, r6
 80042bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c0:	230a      	movs	r3, #10
 80042c2:	485e      	ldr	r0, [pc, #376]	; (800443c <_printf_i+0x244>)
 80042c4:	e019      	b.n	80042fa <_printf_i+0x102>
 80042c6:	680e      	ldr	r6, [r1, #0]
 80042c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	bf18      	it	ne
 80042d0:	b236      	sxthne	r6, r6
 80042d2:	e7ef      	b.n	80042b4 <_printf_i+0xbc>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	1d19      	adds	r1, r3, #4
 80042da:	6029      	str	r1, [r5, #0]
 80042dc:	0601      	lsls	r1, r0, #24
 80042de:	d501      	bpl.n	80042e4 <_printf_i+0xec>
 80042e0:	681e      	ldr	r6, [r3, #0]
 80042e2:	e002      	b.n	80042ea <_printf_i+0xf2>
 80042e4:	0646      	lsls	r6, r0, #25
 80042e6:	d5fb      	bpl.n	80042e0 <_printf_i+0xe8>
 80042e8:	881e      	ldrh	r6, [r3, #0]
 80042ea:	2f6f      	cmp	r7, #111	; 0x6f
 80042ec:	bf0c      	ite	eq
 80042ee:	2308      	moveq	r3, #8
 80042f0:	230a      	movne	r3, #10
 80042f2:	4852      	ldr	r0, [pc, #328]	; (800443c <_printf_i+0x244>)
 80042f4:	2100      	movs	r1, #0
 80042f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042fa:	6865      	ldr	r5, [r4, #4]
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	bfa8      	it	ge
 8004300:	6821      	ldrge	r1, [r4, #0]
 8004302:	60a5      	str	r5, [r4, #8]
 8004304:	bfa4      	itt	ge
 8004306:	f021 0104 	bicge.w	r1, r1, #4
 800430a:	6021      	strge	r1, [r4, #0]
 800430c:	b90e      	cbnz	r6, 8004312 <_printf_i+0x11a>
 800430e:	2d00      	cmp	r5, #0
 8004310:	d04d      	beq.n	80043ae <_printf_i+0x1b6>
 8004312:	4615      	mov	r5, r2
 8004314:	fbb6 f1f3 	udiv	r1, r6, r3
 8004318:	fb03 6711 	mls	r7, r3, r1, r6
 800431c:	5dc7      	ldrb	r7, [r0, r7]
 800431e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004322:	4637      	mov	r7, r6
 8004324:	42bb      	cmp	r3, r7
 8004326:	460e      	mov	r6, r1
 8004328:	d9f4      	bls.n	8004314 <_printf_i+0x11c>
 800432a:	2b08      	cmp	r3, #8
 800432c:	d10b      	bne.n	8004346 <_printf_i+0x14e>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	07de      	lsls	r6, r3, #31
 8004332:	d508      	bpl.n	8004346 <_printf_i+0x14e>
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	6861      	ldr	r1, [r4, #4]
 8004338:	4299      	cmp	r1, r3
 800433a:	bfde      	ittt	le
 800433c:	2330      	movle	r3, #48	; 0x30
 800433e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004342:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004346:	1b52      	subs	r2, r2, r5
 8004348:	6122      	str	r2, [r4, #16]
 800434a:	464b      	mov	r3, r9
 800434c:	4621      	mov	r1, r4
 800434e:	4640      	mov	r0, r8
 8004350:	f8cd a000 	str.w	sl, [sp]
 8004354:	aa03      	add	r2, sp, #12
 8004356:	f7ff fedf 	bl	8004118 <_printf_common>
 800435a:	3001      	adds	r0, #1
 800435c:	d14c      	bne.n	80043f8 <_printf_i+0x200>
 800435e:	f04f 30ff 	mov.w	r0, #4294967295
 8004362:	b004      	add	sp, #16
 8004364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004368:	4834      	ldr	r0, [pc, #208]	; (800443c <_printf_i+0x244>)
 800436a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800436e:	6829      	ldr	r1, [r5, #0]
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	f851 6b04 	ldr.w	r6, [r1], #4
 8004376:	6029      	str	r1, [r5, #0]
 8004378:	061d      	lsls	r5, r3, #24
 800437a:	d514      	bpl.n	80043a6 <_printf_i+0x1ae>
 800437c:	07df      	lsls	r7, r3, #31
 800437e:	bf44      	itt	mi
 8004380:	f043 0320 	orrmi.w	r3, r3, #32
 8004384:	6023      	strmi	r3, [r4, #0]
 8004386:	b91e      	cbnz	r6, 8004390 <_printf_i+0x198>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f023 0320 	bic.w	r3, r3, #32
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	2310      	movs	r3, #16
 8004392:	e7af      	b.n	80042f4 <_printf_i+0xfc>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	f043 0320 	orr.w	r3, r3, #32
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	2378      	movs	r3, #120	; 0x78
 800439e:	4828      	ldr	r0, [pc, #160]	; (8004440 <_printf_i+0x248>)
 80043a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043a4:	e7e3      	b.n	800436e <_printf_i+0x176>
 80043a6:	0659      	lsls	r1, r3, #25
 80043a8:	bf48      	it	mi
 80043aa:	b2b6      	uxthmi	r6, r6
 80043ac:	e7e6      	b.n	800437c <_printf_i+0x184>
 80043ae:	4615      	mov	r5, r2
 80043b0:	e7bb      	b.n	800432a <_printf_i+0x132>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	6826      	ldr	r6, [r4, #0]
 80043b6:	1d18      	adds	r0, r3, #4
 80043b8:	6961      	ldr	r1, [r4, #20]
 80043ba:	6028      	str	r0, [r5, #0]
 80043bc:	0635      	lsls	r5, r6, #24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	d501      	bpl.n	80043c6 <_printf_i+0x1ce>
 80043c2:	6019      	str	r1, [r3, #0]
 80043c4:	e002      	b.n	80043cc <_printf_i+0x1d4>
 80043c6:	0670      	lsls	r0, r6, #25
 80043c8:	d5fb      	bpl.n	80043c2 <_printf_i+0x1ca>
 80043ca:	8019      	strh	r1, [r3, #0]
 80043cc:	2300      	movs	r3, #0
 80043ce:	4615      	mov	r5, r2
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	e7ba      	b.n	800434a <_printf_i+0x152>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	2100      	movs	r1, #0
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	602a      	str	r2, [r5, #0]
 80043dc:	681d      	ldr	r5, [r3, #0]
 80043de:	6862      	ldr	r2, [r4, #4]
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 fb13 	bl	8004a0c <memchr>
 80043e6:	b108      	cbz	r0, 80043ec <_printf_i+0x1f4>
 80043e8:	1b40      	subs	r0, r0, r5
 80043ea:	6060      	str	r0, [r4, #4]
 80043ec:	6863      	ldr	r3, [r4, #4]
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	2300      	movs	r3, #0
 80043f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f6:	e7a8      	b.n	800434a <_printf_i+0x152>
 80043f8:	462a      	mov	r2, r5
 80043fa:	4649      	mov	r1, r9
 80043fc:	4640      	mov	r0, r8
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	47d0      	blx	sl
 8004402:	3001      	adds	r0, #1
 8004404:	d0ab      	beq.n	800435e <_printf_i+0x166>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	079b      	lsls	r3, r3, #30
 800440a:	d413      	bmi.n	8004434 <_printf_i+0x23c>
 800440c:	68e0      	ldr	r0, [r4, #12]
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	4298      	cmp	r0, r3
 8004412:	bfb8      	it	lt
 8004414:	4618      	movlt	r0, r3
 8004416:	e7a4      	b.n	8004362 <_printf_i+0x16a>
 8004418:	2301      	movs	r3, #1
 800441a:	4632      	mov	r2, r6
 800441c:	4649      	mov	r1, r9
 800441e:	4640      	mov	r0, r8
 8004420:	47d0      	blx	sl
 8004422:	3001      	adds	r0, #1
 8004424:	d09b      	beq.n	800435e <_printf_i+0x166>
 8004426:	3501      	adds	r5, #1
 8004428:	68e3      	ldr	r3, [r4, #12]
 800442a:	9903      	ldr	r1, [sp, #12]
 800442c:	1a5b      	subs	r3, r3, r1
 800442e:	42ab      	cmp	r3, r5
 8004430:	dcf2      	bgt.n	8004418 <_printf_i+0x220>
 8004432:	e7eb      	b.n	800440c <_printf_i+0x214>
 8004434:	2500      	movs	r5, #0
 8004436:	f104 0619 	add.w	r6, r4, #25
 800443a:	e7f5      	b.n	8004428 <_printf_i+0x230>
 800443c:	080051bd 	.word	0x080051bd
 8004440:	080051ce 	.word	0x080051ce

08004444 <__swbuf_r>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	460e      	mov	r6, r1
 8004448:	4614      	mov	r4, r2
 800444a:	4605      	mov	r5, r0
 800444c:	b118      	cbz	r0, 8004456 <__swbuf_r+0x12>
 800444e:	6983      	ldr	r3, [r0, #24]
 8004450:	b90b      	cbnz	r3, 8004456 <__swbuf_r+0x12>
 8004452:	f000 f9d5 	bl	8004800 <__sinit>
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <__swbuf_r+0x98>)
 8004458:	429c      	cmp	r4, r3
 800445a:	d12b      	bne.n	80044b4 <__swbuf_r+0x70>
 800445c:	686c      	ldr	r4, [r5, #4]
 800445e:	69a3      	ldr	r3, [r4, #24]
 8004460:	60a3      	str	r3, [r4, #8]
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	071a      	lsls	r2, r3, #28
 8004466:	d52f      	bpl.n	80044c8 <__swbuf_r+0x84>
 8004468:	6923      	ldr	r3, [r4, #16]
 800446a:	b36b      	cbz	r3, 80044c8 <__swbuf_r+0x84>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	6820      	ldr	r0, [r4, #0]
 8004470:	b2f6      	uxtb	r6, r6
 8004472:	1ac0      	subs	r0, r0, r3
 8004474:	6963      	ldr	r3, [r4, #20]
 8004476:	4637      	mov	r7, r6
 8004478:	4283      	cmp	r3, r0
 800447a:	dc04      	bgt.n	8004486 <__swbuf_r+0x42>
 800447c:	4621      	mov	r1, r4
 800447e:	4628      	mov	r0, r5
 8004480:	f000 f92a 	bl	80046d8 <_fflush_r>
 8004484:	bb30      	cbnz	r0, 80044d4 <__swbuf_r+0x90>
 8004486:	68a3      	ldr	r3, [r4, #8]
 8004488:	3001      	adds	r0, #1
 800448a:	3b01      	subs	r3, #1
 800448c:	60a3      	str	r3, [r4, #8]
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	6022      	str	r2, [r4, #0]
 8004494:	701e      	strb	r6, [r3, #0]
 8004496:	6963      	ldr	r3, [r4, #20]
 8004498:	4283      	cmp	r3, r0
 800449a:	d004      	beq.n	80044a6 <__swbuf_r+0x62>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	07db      	lsls	r3, r3, #31
 80044a0:	d506      	bpl.n	80044b0 <__swbuf_r+0x6c>
 80044a2:	2e0a      	cmp	r6, #10
 80044a4:	d104      	bne.n	80044b0 <__swbuf_r+0x6c>
 80044a6:	4621      	mov	r1, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 f915 	bl	80046d8 <_fflush_r>
 80044ae:	b988      	cbnz	r0, 80044d4 <__swbuf_r+0x90>
 80044b0:	4638      	mov	r0, r7
 80044b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <__swbuf_r+0x9c>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d101      	bne.n	80044be <__swbuf_r+0x7a>
 80044ba:	68ac      	ldr	r4, [r5, #8]
 80044bc:	e7cf      	b.n	800445e <__swbuf_r+0x1a>
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <__swbuf_r+0xa0>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	bf08      	it	eq
 80044c4:	68ec      	ldreq	r4, [r5, #12]
 80044c6:	e7ca      	b.n	800445e <__swbuf_r+0x1a>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f80c 	bl	80044e8 <__swsetup_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d0cb      	beq.n	800446c <__swbuf_r+0x28>
 80044d4:	f04f 37ff 	mov.w	r7, #4294967295
 80044d8:	e7ea      	b.n	80044b0 <__swbuf_r+0x6c>
 80044da:	bf00      	nop
 80044dc:	08005200 	.word	0x08005200
 80044e0:	08005220 	.word	0x08005220
 80044e4:	080051e0 	.word	0x080051e0

080044e8 <__swsetup_r>:
 80044e8:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <__swsetup_r+0xcc>)
 80044ea:	b570      	push	{r4, r5, r6, lr}
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	4606      	mov	r6, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	b125      	cbz	r5, 80044fe <__swsetup_r+0x16>
 80044f4:	69ab      	ldr	r3, [r5, #24]
 80044f6:	b913      	cbnz	r3, 80044fe <__swsetup_r+0x16>
 80044f8:	4628      	mov	r0, r5
 80044fa:	f000 f981 	bl	8004800 <__sinit>
 80044fe:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <__swsetup_r+0xd0>)
 8004500:	429c      	cmp	r4, r3
 8004502:	d10f      	bne.n	8004524 <__swsetup_r+0x3c>
 8004504:	686c      	ldr	r4, [r5, #4]
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800450c:	0719      	lsls	r1, r3, #28
 800450e:	d42c      	bmi.n	800456a <__swsetup_r+0x82>
 8004510:	06dd      	lsls	r5, r3, #27
 8004512:	d411      	bmi.n	8004538 <__swsetup_r+0x50>
 8004514:	2309      	movs	r3, #9
 8004516:	6033      	str	r3, [r6, #0]
 8004518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	e03e      	b.n	80045a2 <__swsetup_r+0xba>
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <__swsetup_r+0xd4>)
 8004526:	429c      	cmp	r4, r3
 8004528:	d101      	bne.n	800452e <__swsetup_r+0x46>
 800452a:	68ac      	ldr	r4, [r5, #8]
 800452c:	e7eb      	b.n	8004506 <__swsetup_r+0x1e>
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <__swsetup_r+0xd8>)
 8004530:	429c      	cmp	r4, r3
 8004532:	bf08      	it	eq
 8004534:	68ec      	ldreq	r4, [r5, #12]
 8004536:	e7e6      	b.n	8004506 <__swsetup_r+0x1e>
 8004538:	0758      	lsls	r0, r3, #29
 800453a:	d512      	bpl.n	8004562 <__swsetup_r+0x7a>
 800453c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800453e:	b141      	cbz	r1, 8004552 <__swsetup_r+0x6a>
 8004540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004544:	4299      	cmp	r1, r3
 8004546:	d002      	beq.n	800454e <__swsetup_r+0x66>
 8004548:	4630      	mov	r0, r6
 800454a:	f000 fa6d 	bl	8004a28 <_free_r>
 800454e:	2300      	movs	r3, #0
 8004550:	6363      	str	r3, [r4, #52]	; 0x34
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	2300      	movs	r3, #0
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f043 0308 	orr.w	r3, r3, #8
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	6923      	ldr	r3, [r4, #16]
 800456c:	b94b      	cbnz	r3, 8004582 <__swsetup_r+0x9a>
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004578:	d003      	beq.n	8004582 <__swsetup_r+0x9a>
 800457a:	4621      	mov	r1, r4
 800457c:	4630      	mov	r0, r6
 800457e:	f000 fa05 	bl	800498c <__smakebuf_r>
 8004582:	89a0      	ldrh	r0, [r4, #12]
 8004584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004588:	f010 0301 	ands.w	r3, r0, #1
 800458c:	d00a      	beq.n	80045a4 <__swsetup_r+0xbc>
 800458e:	2300      	movs	r3, #0
 8004590:	60a3      	str	r3, [r4, #8]
 8004592:	6963      	ldr	r3, [r4, #20]
 8004594:	425b      	negs	r3, r3
 8004596:	61a3      	str	r3, [r4, #24]
 8004598:	6923      	ldr	r3, [r4, #16]
 800459a:	b943      	cbnz	r3, 80045ae <__swsetup_r+0xc6>
 800459c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045a0:	d1ba      	bne.n	8004518 <__swsetup_r+0x30>
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	0781      	lsls	r1, r0, #30
 80045a6:	bf58      	it	pl
 80045a8:	6963      	ldrpl	r3, [r4, #20]
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	e7f4      	b.n	8004598 <__swsetup_r+0xb0>
 80045ae:	2000      	movs	r0, #0
 80045b0:	e7f7      	b.n	80045a2 <__swsetup_r+0xba>
 80045b2:	bf00      	nop
 80045b4:	200000a0 	.word	0x200000a0
 80045b8:	08005200 	.word	0x08005200
 80045bc:	08005220 	.word	0x08005220
 80045c0:	080051e0 	.word	0x080051e0

080045c4 <abort>:
 80045c4:	2006      	movs	r0, #6
 80045c6:	b508      	push	{r3, lr}
 80045c8:	f000 fb42 	bl	8004c50 <raise>
 80045cc:	2001      	movs	r0, #1
 80045ce:	f7fc f856 	bl	800067e <_exit>
	...

080045d4 <__sflush_r>:
 80045d4:	898a      	ldrh	r2, [r1, #12]
 80045d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d8:	4605      	mov	r5, r0
 80045da:	0710      	lsls	r0, r2, #28
 80045dc:	460c      	mov	r4, r1
 80045de:	d457      	bmi.n	8004690 <__sflush_r+0xbc>
 80045e0:	684b      	ldr	r3, [r1, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	dc04      	bgt.n	80045f0 <__sflush_r+0x1c>
 80045e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dc01      	bgt.n	80045f0 <__sflush_r+0x1c>
 80045ec:	2000      	movs	r0, #0
 80045ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	d0fa      	beq.n	80045ec <__sflush_r+0x18>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045fc:	682f      	ldr	r7, [r5, #0]
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	d032      	beq.n	8004668 <__sflush_r+0x94>
 8004602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	075a      	lsls	r2, r3, #29
 8004608:	d505      	bpl.n	8004616 <__sflush_r+0x42>
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004610:	b10b      	cbz	r3, 8004616 <__sflush_r+0x42>
 8004612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004614:	1ac0      	subs	r0, r0, r3
 8004616:	2300      	movs	r3, #0
 8004618:	4602      	mov	r2, r0
 800461a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800461c:	4628      	mov	r0, r5
 800461e:	6a21      	ldr	r1, [r4, #32]
 8004620:	47b0      	blx	r6
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	d106      	bne.n	8004636 <__sflush_r+0x62>
 8004628:	6829      	ldr	r1, [r5, #0]
 800462a:	291d      	cmp	r1, #29
 800462c:	d82c      	bhi.n	8004688 <__sflush_r+0xb4>
 800462e:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <__sflush_r+0x100>)
 8004630:	40ca      	lsrs	r2, r1
 8004632:	07d6      	lsls	r6, r2, #31
 8004634:	d528      	bpl.n	8004688 <__sflush_r+0xb4>
 8004636:	2200      	movs	r2, #0
 8004638:	6062      	str	r2, [r4, #4]
 800463a:	6922      	ldr	r2, [r4, #16]
 800463c:	04d9      	lsls	r1, r3, #19
 800463e:	6022      	str	r2, [r4, #0]
 8004640:	d504      	bpl.n	800464c <__sflush_r+0x78>
 8004642:	1c42      	adds	r2, r0, #1
 8004644:	d101      	bne.n	800464a <__sflush_r+0x76>
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	b903      	cbnz	r3, 800464c <__sflush_r+0x78>
 800464a:	6560      	str	r0, [r4, #84]	; 0x54
 800464c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800464e:	602f      	str	r7, [r5, #0]
 8004650:	2900      	cmp	r1, #0
 8004652:	d0cb      	beq.n	80045ec <__sflush_r+0x18>
 8004654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004658:	4299      	cmp	r1, r3
 800465a:	d002      	beq.n	8004662 <__sflush_r+0x8e>
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f9e3 	bl	8004a28 <_free_r>
 8004662:	2000      	movs	r0, #0
 8004664:	6360      	str	r0, [r4, #52]	; 0x34
 8004666:	e7c2      	b.n	80045ee <__sflush_r+0x1a>
 8004668:	6a21      	ldr	r1, [r4, #32]
 800466a:	2301      	movs	r3, #1
 800466c:	4628      	mov	r0, r5
 800466e:	47b0      	blx	r6
 8004670:	1c41      	adds	r1, r0, #1
 8004672:	d1c7      	bne.n	8004604 <__sflush_r+0x30>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0c4      	beq.n	8004604 <__sflush_r+0x30>
 800467a:	2b1d      	cmp	r3, #29
 800467c:	d001      	beq.n	8004682 <__sflush_r+0xae>
 800467e:	2b16      	cmp	r3, #22
 8004680:	d101      	bne.n	8004686 <__sflush_r+0xb2>
 8004682:	602f      	str	r7, [r5, #0]
 8004684:	e7b2      	b.n	80045ec <__sflush_r+0x18>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	e7ae      	b.n	80045ee <__sflush_r+0x1a>
 8004690:	690f      	ldr	r7, [r1, #16]
 8004692:	2f00      	cmp	r7, #0
 8004694:	d0aa      	beq.n	80045ec <__sflush_r+0x18>
 8004696:	0793      	lsls	r3, r2, #30
 8004698:	bf18      	it	ne
 800469a:	2300      	movne	r3, #0
 800469c:	680e      	ldr	r6, [r1, #0]
 800469e:	bf08      	it	eq
 80046a0:	694b      	ldreq	r3, [r1, #20]
 80046a2:	1bf6      	subs	r6, r6, r7
 80046a4:	600f      	str	r7, [r1, #0]
 80046a6:	608b      	str	r3, [r1, #8]
 80046a8:	2e00      	cmp	r6, #0
 80046aa:	dd9f      	ble.n	80045ec <__sflush_r+0x18>
 80046ac:	4633      	mov	r3, r6
 80046ae:	463a      	mov	r2, r7
 80046b0:	4628      	mov	r0, r5
 80046b2:	6a21      	ldr	r1, [r4, #32]
 80046b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80046b8:	47e0      	blx	ip
 80046ba:	2800      	cmp	r0, #0
 80046bc:	dc06      	bgt.n	80046cc <__sflush_r+0xf8>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	e790      	b.n	80045ee <__sflush_r+0x1a>
 80046cc:	4407      	add	r7, r0
 80046ce:	1a36      	subs	r6, r6, r0
 80046d0:	e7ea      	b.n	80046a8 <__sflush_r+0xd4>
 80046d2:	bf00      	nop
 80046d4:	20400001 	.word	0x20400001

080046d8 <_fflush_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	690b      	ldr	r3, [r1, #16]
 80046dc:	4605      	mov	r5, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	b913      	cbnz	r3, 80046e8 <_fflush_r+0x10>
 80046e2:	2500      	movs	r5, #0
 80046e4:	4628      	mov	r0, r5
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	b118      	cbz	r0, 80046f2 <_fflush_r+0x1a>
 80046ea:	6983      	ldr	r3, [r0, #24]
 80046ec:	b90b      	cbnz	r3, 80046f2 <_fflush_r+0x1a>
 80046ee:	f000 f887 	bl	8004800 <__sinit>
 80046f2:	4b14      	ldr	r3, [pc, #80]	; (8004744 <_fflush_r+0x6c>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	d11b      	bne.n	8004730 <_fflush_r+0x58>
 80046f8:	686c      	ldr	r4, [r5, #4]
 80046fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ef      	beq.n	80046e2 <_fflush_r+0xa>
 8004702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004704:	07d0      	lsls	r0, r2, #31
 8004706:	d404      	bmi.n	8004712 <_fflush_r+0x3a>
 8004708:	0599      	lsls	r1, r3, #22
 800470a:	d402      	bmi.n	8004712 <_fflush_r+0x3a>
 800470c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470e:	f000 f915 	bl	800493c <__retarget_lock_acquire_recursive>
 8004712:	4628      	mov	r0, r5
 8004714:	4621      	mov	r1, r4
 8004716:	f7ff ff5d 	bl	80045d4 <__sflush_r>
 800471a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800471c:	4605      	mov	r5, r0
 800471e:	07da      	lsls	r2, r3, #31
 8004720:	d4e0      	bmi.n	80046e4 <_fflush_r+0xc>
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	059b      	lsls	r3, r3, #22
 8004726:	d4dd      	bmi.n	80046e4 <_fflush_r+0xc>
 8004728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800472a:	f000 f908 	bl	800493e <__retarget_lock_release_recursive>
 800472e:	e7d9      	b.n	80046e4 <_fflush_r+0xc>
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <_fflush_r+0x70>)
 8004732:	429c      	cmp	r4, r3
 8004734:	d101      	bne.n	800473a <_fflush_r+0x62>
 8004736:	68ac      	ldr	r4, [r5, #8]
 8004738:	e7df      	b.n	80046fa <_fflush_r+0x22>
 800473a:	4b04      	ldr	r3, [pc, #16]	; (800474c <_fflush_r+0x74>)
 800473c:	429c      	cmp	r4, r3
 800473e:	bf08      	it	eq
 8004740:	68ec      	ldreq	r4, [r5, #12]
 8004742:	e7da      	b.n	80046fa <_fflush_r+0x22>
 8004744:	08005200 	.word	0x08005200
 8004748:	08005220 	.word	0x08005220
 800474c:	080051e0 	.word	0x080051e0

08004750 <std>:
 8004750:	2300      	movs	r3, #0
 8004752:	b510      	push	{r4, lr}
 8004754:	4604      	mov	r4, r0
 8004756:	e9c0 3300 	strd	r3, r3, [r0]
 800475a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800475e:	6083      	str	r3, [r0, #8]
 8004760:	8181      	strh	r1, [r0, #12]
 8004762:	6643      	str	r3, [r0, #100]	; 0x64
 8004764:	81c2      	strh	r2, [r0, #14]
 8004766:	6183      	str	r3, [r0, #24]
 8004768:	4619      	mov	r1, r3
 800476a:	2208      	movs	r2, #8
 800476c:	305c      	adds	r0, #92	; 0x5c
 800476e:	f7ff fb73 	bl	8003e58 <memset>
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <std+0x38>)
 8004774:	6224      	str	r4, [r4, #32]
 8004776:	6263      	str	r3, [r4, #36]	; 0x24
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <std+0x3c>)
 800477a:	62a3      	str	r3, [r4, #40]	; 0x28
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <std+0x40>)
 800477e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <std+0x44>)
 8004782:	6323      	str	r3, [r4, #48]	; 0x30
 8004784:	bd10      	pop	{r4, pc}
 8004786:	bf00      	nop
 8004788:	08004c89 	.word	0x08004c89
 800478c:	08004cab 	.word	0x08004cab
 8004790:	08004ce3 	.word	0x08004ce3
 8004794:	08004d07 	.word	0x08004d07

08004798 <_cleanup_r>:
 8004798:	4901      	ldr	r1, [pc, #4]	; (80047a0 <_cleanup_r+0x8>)
 800479a:	f000 b8af 	b.w	80048fc <_fwalk_reent>
 800479e:	bf00      	nop
 80047a0:	080046d9 	.word	0x080046d9

080047a4 <__sfmoreglue>:
 80047a4:	2268      	movs	r2, #104	; 0x68
 80047a6:	b570      	push	{r4, r5, r6, lr}
 80047a8:	1e4d      	subs	r5, r1, #1
 80047aa:	4355      	muls	r5, r2
 80047ac:	460e      	mov	r6, r1
 80047ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047b2:	f000 f9a1 	bl	8004af8 <_malloc_r>
 80047b6:	4604      	mov	r4, r0
 80047b8:	b140      	cbz	r0, 80047cc <__sfmoreglue+0x28>
 80047ba:	2100      	movs	r1, #0
 80047bc:	e9c0 1600 	strd	r1, r6, [r0]
 80047c0:	300c      	adds	r0, #12
 80047c2:	60a0      	str	r0, [r4, #8]
 80047c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047c8:	f7ff fb46 	bl	8003e58 <memset>
 80047cc:	4620      	mov	r0, r4
 80047ce:	bd70      	pop	{r4, r5, r6, pc}

080047d0 <__sfp_lock_acquire>:
 80047d0:	4801      	ldr	r0, [pc, #4]	; (80047d8 <__sfp_lock_acquire+0x8>)
 80047d2:	f000 b8b3 	b.w	800493c <__retarget_lock_acquire_recursive>
 80047d6:	bf00      	nop
 80047d8:	20000325 	.word	0x20000325

080047dc <__sfp_lock_release>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__sfp_lock_release+0x8>)
 80047de:	f000 b8ae 	b.w	800493e <__retarget_lock_release_recursive>
 80047e2:	bf00      	nop
 80047e4:	20000325 	.word	0x20000325

080047e8 <__sinit_lock_acquire>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__sinit_lock_acquire+0x8>)
 80047ea:	f000 b8a7 	b.w	800493c <__retarget_lock_acquire_recursive>
 80047ee:	bf00      	nop
 80047f0:	20000326 	.word	0x20000326

080047f4 <__sinit_lock_release>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sinit_lock_release+0x8>)
 80047f6:	f000 b8a2 	b.w	800493e <__retarget_lock_release_recursive>
 80047fa:	bf00      	nop
 80047fc:	20000326 	.word	0x20000326

08004800 <__sinit>:
 8004800:	b510      	push	{r4, lr}
 8004802:	4604      	mov	r4, r0
 8004804:	f7ff fff0 	bl	80047e8 <__sinit_lock_acquire>
 8004808:	69a3      	ldr	r3, [r4, #24]
 800480a:	b11b      	cbz	r3, 8004814 <__sinit+0x14>
 800480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004810:	f7ff bff0 	b.w	80047f4 <__sinit_lock_release>
 8004814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004818:	6523      	str	r3, [r4, #80]	; 0x50
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <__sinit+0x68>)
 800481c:	4a13      	ldr	r2, [pc, #76]	; (800486c <__sinit+0x6c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	62a2      	str	r2, [r4, #40]	; 0x28
 8004822:	42a3      	cmp	r3, r4
 8004824:	bf08      	it	eq
 8004826:	2301      	moveq	r3, #1
 8004828:	4620      	mov	r0, r4
 800482a:	bf08      	it	eq
 800482c:	61a3      	streq	r3, [r4, #24]
 800482e:	f000 f81f 	bl	8004870 <__sfp>
 8004832:	6060      	str	r0, [r4, #4]
 8004834:	4620      	mov	r0, r4
 8004836:	f000 f81b 	bl	8004870 <__sfp>
 800483a:	60a0      	str	r0, [r4, #8]
 800483c:	4620      	mov	r0, r4
 800483e:	f000 f817 	bl	8004870 <__sfp>
 8004842:	2200      	movs	r2, #0
 8004844:	2104      	movs	r1, #4
 8004846:	60e0      	str	r0, [r4, #12]
 8004848:	6860      	ldr	r0, [r4, #4]
 800484a:	f7ff ff81 	bl	8004750 <std>
 800484e:	2201      	movs	r2, #1
 8004850:	2109      	movs	r1, #9
 8004852:	68a0      	ldr	r0, [r4, #8]
 8004854:	f7ff ff7c 	bl	8004750 <std>
 8004858:	2202      	movs	r2, #2
 800485a:	2112      	movs	r1, #18
 800485c:	68e0      	ldr	r0, [r4, #12]
 800485e:	f7ff ff77 	bl	8004750 <std>
 8004862:	2301      	movs	r3, #1
 8004864:	61a3      	str	r3, [r4, #24]
 8004866:	e7d1      	b.n	800480c <__sinit+0xc>
 8004868:	080051a8 	.word	0x080051a8
 800486c:	08004799 	.word	0x08004799

08004870 <__sfp>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	4607      	mov	r7, r0
 8004874:	f7ff ffac 	bl	80047d0 <__sfp_lock_acquire>
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <__sfp+0x84>)
 800487a:	681e      	ldr	r6, [r3, #0]
 800487c:	69b3      	ldr	r3, [r6, #24]
 800487e:	b913      	cbnz	r3, 8004886 <__sfp+0x16>
 8004880:	4630      	mov	r0, r6
 8004882:	f7ff ffbd 	bl	8004800 <__sinit>
 8004886:	3648      	adds	r6, #72	; 0x48
 8004888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800488c:	3b01      	subs	r3, #1
 800488e:	d503      	bpl.n	8004898 <__sfp+0x28>
 8004890:	6833      	ldr	r3, [r6, #0]
 8004892:	b30b      	cbz	r3, 80048d8 <__sfp+0x68>
 8004894:	6836      	ldr	r6, [r6, #0]
 8004896:	e7f7      	b.n	8004888 <__sfp+0x18>
 8004898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800489c:	b9d5      	cbnz	r5, 80048d4 <__sfp+0x64>
 800489e:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <__sfp+0x88>)
 80048a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048a4:	60e3      	str	r3, [r4, #12]
 80048a6:	6665      	str	r5, [r4, #100]	; 0x64
 80048a8:	f000 f847 	bl	800493a <__retarget_lock_init_recursive>
 80048ac:	f7ff ff96 	bl	80047dc <__sfp_lock_release>
 80048b0:	2208      	movs	r2, #8
 80048b2:	4629      	mov	r1, r5
 80048b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048bc:	6025      	str	r5, [r4, #0]
 80048be:	61a5      	str	r5, [r4, #24]
 80048c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048c4:	f7ff fac8 	bl	8003e58 <memset>
 80048c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048d0:	4620      	mov	r0, r4
 80048d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d4:	3468      	adds	r4, #104	; 0x68
 80048d6:	e7d9      	b.n	800488c <__sfp+0x1c>
 80048d8:	2104      	movs	r1, #4
 80048da:	4638      	mov	r0, r7
 80048dc:	f7ff ff62 	bl	80047a4 <__sfmoreglue>
 80048e0:	4604      	mov	r4, r0
 80048e2:	6030      	str	r0, [r6, #0]
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d1d5      	bne.n	8004894 <__sfp+0x24>
 80048e8:	f7ff ff78 	bl	80047dc <__sfp_lock_release>
 80048ec:	230c      	movs	r3, #12
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	e7ee      	b.n	80048d0 <__sfp+0x60>
 80048f2:	bf00      	nop
 80048f4:	080051a8 	.word	0x080051a8
 80048f8:	ffff0001 	.word	0xffff0001

080048fc <_fwalk_reent>:
 80048fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004900:	4606      	mov	r6, r0
 8004902:	4688      	mov	r8, r1
 8004904:	2700      	movs	r7, #0
 8004906:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800490a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800490e:	f1b9 0901 	subs.w	r9, r9, #1
 8004912:	d505      	bpl.n	8004920 <_fwalk_reent+0x24>
 8004914:	6824      	ldr	r4, [r4, #0]
 8004916:	2c00      	cmp	r4, #0
 8004918:	d1f7      	bne.n	800490a <_fwalk_reent+0xe>
 800491a:	4638      	mov	r0, r7
 800491c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004920:	89ab      	ldrh	r3, [r5, #12]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d907      	bls.n	8004936 <_fwalk_reent+0x3a>
 8004926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800492a:	3301      	adds	r3, #1
 800492c:	d003      	beq.n	8004936 <_fwalk_reent+0x3a>
 800492e:	4629      	mov	r1, r5
 8004930:	4630      	mov	r0, r6
 8004932:	47c0      	blx	r8
 8004934:	4307      	orrs	r7, r0
 8004936:	3568      	adds	r5, #104	; 0x68
 8004938:	e7e9      	b.n	800490e <_fwalk_reent+0x12>

0800493a <__retarget_lock_init_recursive>:
 800493a:	4770      	bx	lr

0800493c <__retarget_lock_acquire_recursive>:
 800493c:	4770      	bx	lr

0800493e <__retarget_lock_release_recursive>:
 800493e:	4770      	bx	lr

08004940 <__swhatbuf_r>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	460e      	mov	r6, r1
 8004944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004948:	4614      	mov	r4, r2
 800494a:	2900      	cmp	r1, #0
 800494c:	461d      	mov	r5, r3
 800494e:	b096      	sub	sp, #88	; 0x58
 8004950:	da08      	bge.n	8004964 <__swhatbuf_r+0x24>
 8004952:	2200      	movs	r2, #0
 8004954:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004958:	602a      	str	r2, [r5, #0]
 800495a:	061a      	lsls	r2, r3, #24
 800495c:	d410      	bmi.n	8004980 <__swhatbuf_r+0x40>
 800495e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004962:	e00e      	b.n	8004982 <__swhatbuf_r+0x42>
 8004964:	466a      	mov	r2, sp
 8004966:	f000 f9f5 	bl	8004d54 <_fstat_r>
 800496a:	2800      	cmp	r0, #0
 800496c:	dbf1      	blt.n	8004952 <__swhatbuf_r+0x12>
 800496e:	9a01      	ldr	r2, [sp, #4]
 8004970:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004974:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004978:	425a      	negs	r2, r3
 800497a:	415a      	adcs	r2, r3
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	e7ee      	b.n	800495e <__swhatbuf_r+0x1e>
 8004980:	2340      	movs	r3, #64	; 0x40
 8004982:	2000      	movs	r0, #0
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	b016      	add	sp, #88	; 0x58
 8004988:	bd70      	pop	{r4, r5, r6, pc}
	...

0800498c <__smakebuf_r>:
 800498c:	898b      	ldrh	r3, [r1, #12]
 800498e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004990:	079d      	lsls	r5, r3, #30
 8004992:	4606      	mov	r6, r0
 8004994:	460c      	mov	r4, r1
 8004996:	d507      	bpl.n	80049a8 <__smakebuf_r+0x1c>
 8004998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	6123      	str	r3, [r4, #16]
 80049a0:	2301      	movs	r3, #1
 80049a2:	6163      	str	r3, [r4, #20]
 80049a4:	b002      	add	sp, #8
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	466a      	mov	r2, sp
 80049aa:	ab01      	add	r3, sp, #4
 80049ac:	f7ff ffc8 	bl	8004940 <__swhatbuf_r>
 80049b0:	9900      	ldr	r1, [sp, #0]
 80049b2:	4605      	mov	r5, r0
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 f89f 	bl	8004af8 <_malloc_r>
 80049ba:	b948      	cbnz	r0, 80049d0 <__smakebuf_r+0x44>
 80049bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c0:	059a      	lsls	r2, r3, #22
 80049c2:	d4ef      	bmi.n	80049a4 <__smakebuf_r+0x18>
 80049c4:	f023 0303 	bic.w	r3, r3, #3
 80049c8:	f043 0302 	orr.w	r3, r3, #2
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	e7e3      	b.n	8004998 <__smakebuf_r+0xc>
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <__smakebuf_r+0x7c>)
 80049d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	6020      	str	r0, [r4, #0]
 80049d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	9b00      	ldr	r3, [sp, #0]
 80049e0:	6120      	str	r0, [r4, #16]
 80049e2:	6163      	str	r3, [r4, #20]
 80049e4:	9b01      	ldr	r3, [sp, #4]
 80049e6:	b15b      	cbz	r3, 8004a00 <__smakebuf_r+0x74>
 80049e8:	4630      	mov	r0, r6
 80049ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ee:	f000 f9c3 	bl	8004d78 <_isatty_r>
 80049f2:	b128      	cbz	r0, 8004a00 <__smakebuf_r+0x74>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	89a0      	ldrh	r0, [r4, #12]
 8004a02:	4305      	orrs	r5, r0
 8004a04:	81a5      	strh	r5, [r4, #12]
 8004a06:	e7cd      	b.n	80049a4 <__smakebuf_r+0x18>
 8004a08:	08004799 	.word	0x08004799

08004a0c <memchr>:
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	b2c9      	uxtb	r1, r1
 8004a12:	4402      	add	r2, r0
 8004a14:	4293      	cmp	r3, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	d101      	bne.n	8004a1e <memchr+0x12>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e003      	b.n	8004a26 <memchr+0x1a>
 8004a1e:	7804      	ldrb	r4, [r0, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	428c      	cmp	r4, r1
 8004a24:	d1f6      	bne.n	8004a14 <memchr+0x8>
 8004a26:	bd10      	pop	{r4, pc}

08004a28 <_free_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	d040      	beq.n	8004ab2 <_free_r+0x8a>
 8004a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a34:	1f0c      	subs	r4, r1, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfb8      	it	lt
 8004a3a:	18e4      	addlt	r4, r4, r3
 8004a3c:	f000 f9be 	bl	8004dbc <__malloc_lock>
 8004a40:	4a1c      	ldr	r2, [pc, #112]	; (8004ab4 <_free_r+0x8c>)
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	b933      	cbnz	r3, 8004a54 <_free_r+0x2c>
 8004a46:	6063      	str	r3, [r4, #4]
 8004a48:	6014      	str	r4, [r2, #0]
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a50:	f000 b9ba 	b.w	8004dc8 <__malloc_unlock>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d908      	bls.n	8004a6a <_free_r+0x42>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	1821      	adds	r1, r4, r0
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf01      	itttt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	1809      	addeq	r1, r1, r0
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	e7ed      	b.n	8004a46 <_free_r+0x1e>
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b10b      	cbz	r3, 8004a74 <_free_r+0x4c>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d9fa      	bls.n	8004a6a <_free_r+0x42>
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	1850      	adds	r0, r2, r1
 8004a78:	42a0      	cmp	r0, r4
 8004a7a:	d10b      	bne.n	8004a94 <_free_r+0x6c>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	4401      	add	r1, r0
 8004a80:	1850      	adds	r0, r2, r1
 8004a82:	4283      	cmp	r3, r0
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	d1e0      	bne.n	8004a4a <_free_r+0x22>
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4401      	add	r1, r0
 8004a8e:	6011      	str	r1, [r2, #0]
 8004a90:	6053      	str	r3, [r2, #4]
 8004a92:	e7da      	b.n	8004a4a <_free_r+0x22>
 8004a94:	d902      	bls.n	8004a9c <_free_r+0x74>
 8004a96:	230c      	movs	r3, #12
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	e7d6      	b.n	8004a4a <_free_r+0x22>
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	1821      	adds	r1, r4, r0
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf01      	itttt	eq
 8004aa4:	6819      	ldreq	r1, [r3, #0]
 8004aa6:	685b      	ldreq	r3, [r3, #4]
 8004aa8:	1809      	addeq	r1, r1, r0
 8004aaa:	6021      	streq	r1, [r4, #0]
 8004aac:	6063      	str	r3, [r4, #4]
 8004aae:	6054      	str	r4, [r2, #4]
 8004ab0:	e7cb      	b.n	8004a4a <_free_r+0x22>
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20000328 	.word	0x20000328

08004ab8 <sbrk_aligned>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	4e0e      	ldr	r6, [pc, #56]	; (8004af4 <sbrk_aligned+0x3c>)
 8004abc:	460c      	mov	r4, r1
 8004abe:	6831      	ldr	r1, [r6, #0]
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	b911      	cbnz	r1, 8004aca <sbrk_aligned+0x12>
 8004ac4:	f000 f88c 	bl	8004be0 <_sbrk_r>
 8004ac8:	6030      	str	r0, [r6, #0]
 8004aca:	4621      	mov	r1, r4
 8004acc:	4628      	mov	r0, r5
 8004ace:	f000 f887 	bl	8004be0 <_sbrk_r>
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	d00a      	beq.n	8004aec <sbrk_aligned+0x34>
 8004ad6:	1cc4      	adds	r4, r0, #3
 8004ad8:	f024 0403 	bic.w	r4, r4, #3
 8004adc:	42a0      	cmp	r0, r4
 8004ade:	d007      	beq.n	8004af0 <sbrk_aligned+0x38>
 8004ae0:	1a21      	subs	r1, r4, r0
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f87c 	bl	8004be0 <_sbrk_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d101      	bne.n	8004af0 <sbrk_aligned+0x38>
 8004aec:	f04f 34ff 	mov.w	r4, #4294967295
 8004af0:	4620      	mov	r0, r4
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	2000032c 	.word	0x2000032c

08004af8 <_malloc_r>:
 8004af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afc:	1ccd      	adds	r5, r1, #3
 8004afe:	f025 0503 	bic.w	r5, r5, #3
 8004b02:	3508      	adds	r5, #8
 8004b04:	2d0c      	cmp	r5, #12
 8004b06:	bf38      	it	cc
 8004b08:	250c      	movcc	r5, #12
 8004b0a:	2d00      	cmp	r5, #0
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	db01      	blt.n	8004b14 <_malloc_r+0x1c>
 8004b10:	42a9      	cmp	r1, r5
 8004b12:	d905      	bls.n	8004b20 <_malloc_r+0x28>
 8004b14:	230c      	movs	r3, #12
 8004b16:	2600      	movs	r6, #0
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b20:	4e2e      	ldr	r6, [pc, #184]	; (8004bdc <_malloc_r+0xe4>)
 8004b22:	f000 f94b 	bl	8004dbc <__malloc_lock>
 8004b26:	6833      	ldr	r3, [r6, #0]
 8004b28:	461c      	mov	r4, r3
 8004b2a:	bb34      	cbnz	r4, 8004b7a <_malloc_r+0x82>
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f7ff ffc2 	bl	8004ab8 <sbrk_aligned>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	4604      	mov	r4, r0
 8004b38:	d14d      	bne.n	8004bd6 <_malloc_r+0xde>
 8004b3a:	6834      	ldr	r4, [r6, #0]
 8004b3c:	4626      	mov	r6, r4
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	d140      	bne.n	8004bc4 <_malloc_r+0xcc>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	4631      	mov	r1, r6
 8004b46:	4638      	mov	r0, r7
 8004b48:	eb04 0803 	add.w	r8, r4, r3
 8004b4c:	f000 f848 	bl	8004be0 <_sbrk_r>
 8004b50:	4580      	cmp	r8, r0
 8004b52:	d13a      	bne.n	8004bca <_malloc_r+0xd2>
 8004b54:	6821      	ldr	r1, [r4, #0]
 8004b56:	3503      	adds	r5, #3
 8004b58:	1a6d      	subs	r5, r5, r1
 8004b5a:	f025 0503 	bic.w	r5, r5, #3
 8004b5e:	3508      	adds	r5, #8
 8004b60:	2d0c      	cmp	r5, #12
 8004b62:	bf38      	it	cc
 8004b64:	250c      	movcc	r5, #12
 8004b66:	4638      	mov	r0, r7
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f7ff ffa5 	bl	8004ab8 <sbrk_aligned>
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d02b      	beq.n	8004bca <_malloc_r+0xd2>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	442b      	add	r3, r5
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	e00e      	b.n	8004b98 <_malloc_r+0xa0>
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	1b52      	subs	r2, r2, r5
 8004b7e:	d41e      	bmi.n	8004bbe <_malloc_r+0xc6>
 8004b80:	2a0b      	cmp	r2, #11
 8004b82:	d916      	bls.n	8004bb2 <_malloc_r+0xba>
 8004b84:	1961      	adds	r1, r4, r5
 8004b86:	42a3      	cmp	r3, r4
 8004b88:	6025      	str	r5, [r4, #0]
 8004b8a:	bf18      	it	ne
 8004b8c:	6059      	strne	r1, [r3, #4]
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	bf08      	it	eq
 8004b92:	6031      	streq	r1, [r6, #0]
 8004b94:	5162      	str	r2, [r4, r5]
 8004b96:	604b      	str	r3, [r1, #4]
 8004b98:	4638      	mov	r0, r7
 8004b9a:	f104 060b 	add.w	r6, r4, #11
 8004b9e:	f000 f913 	bl	8004dc8 <__malloc_unlock>
 8004ba2:	f026 0607 	bic.w	r6, r6, #7
 8004ba6:	1d23      	adds	r3, r4, #4
 8004ba8:	1af2      	subs	r2, r6, r3
 8004baa:	d0b6      	beq.n	8004b1a <_malloc_r+0x22>
 8004bac:	1b9b      	subs	r3, r3, r6
 8004bae:	50a3      	str	r3, [r4, r2]
 8004bb0:	e7b3      	b.n	8004b1a <_malloc_r+0x22>
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	bf0c      	ite	eq
 8004bb8:	6032      	streq	r2, [r6, #0]
 8004bba:	605a      	strne	r2, [r3, #4]
 8004bbc:	e7ec      	b.n	8004b98 <_malloc_r+0xa0>
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	6864      	ldr	r4, [r4, #4]
 8004bc2:	e7b2      	b.n	8004b2a <_malloc_r+0x32>
 8004bc4:	4634      	mov	r4, r6
 8004bc6:	6876      	ldr	r6, [r6, #4]
 8004bc8:	e7b9      	b.n	8004b3e <_malloc_r+0x46>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	4638      	mov	r0, r7
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	f000 f8fa 	bl	8004dc8 <__malloc_unlock>
 8004bd4:	e7a1      	b.n	8004b1a <_malloc_r+0x22>
 8004bd6:	6025      	str	r5, [r4, #0]
 8004bd8:	e7de      	b.n	8004b98 <_malloc_r+0xa0>
 8004bda:	bf00      	nop
 8004bdc:	20000328 	.word	0x20000328

08004be0 <_sbrk_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	2300      	movs	r3, #0
 8004be4:	4d05      	ldr	r5, [pc, #20]	; (8004bfc <_sbrk_r+0x1c>)
 8004be6:	4604      	mov	r4, r0
 8004be8:	4608      	mov	r0, r1
 8004bea:	602b      	str	r3, [r5, #0]
 8004bec:	f7fb fdba 	bl	8000764 <_sbrk>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_sbrk_r+0x1a>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_sbrk_r+0x1a>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	20000330 	.word	0x20000330

08004c00 <_raise_r>:
 8004c00:	291f      	cmp	r1, #31
 8004c02:	b538      	push	{r3, r4, r5, lr}
 8004c04:	4604      	mov	r4, r0
 8004c06:	460d      	mov	r5, r1
 8004c08:	d904      	bls.n	8004c14 <_raise_r+0x14>
 8004c0a:	2316      	movs	r3, #22
 8004c0c:	6003      	str	r3, [r0, #0]
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004c16:	b112      	cbz	r2, 8004c1e <_raise_r+0x1e>
 8004c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c1c:	b94b      	cbnz	r3, 8004c32 <_raise_r+0x32>
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 f830 	bl	8004c84 <_getpid_r>
 8004c24:	462a      	mov	r2, r5
 8004c26:	4601      	mov	r1, r0
 8004c28:	4620      	mov	r0, r4
 8004c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c2e:	f000 b817 	b.w	8004c60 <_kill_r>
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d00a      	beq.n	8004c4c <_raise_r+0x4c>
 8004c36:	1c59      	adds	r1, r3, #1
 8004c38:	d103      	bne.n	8004c42 <_raise_r+0x42>
 8004c3a:	2316      	movs	r3, #22
 8004c3c:	6003      	str	r3, [r0, #0]
 8004c3e:	2001      	movs	r0, #1
 8004c40:	e7e7      	b.n	8004c12 <_raise_r+0x12>
 8004c42:	2400      	movs	r4, #0
 8004c44:	4628      	mov	r0, r5
 8004c46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c4a:	4798      	blx	r3
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e7e0      	b.n	8004c12 <_raise_r+0x12>

08004c50 <raise>:
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <raise+0xc>)
 8004c52:	4601      	mov	r1, r0
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	f7ff bfd3 	b.w	8004c00 <_raise_r>
 8004c5a:	bf00      	nop
 8004c5c:	200000a0 	.word	0x200000a0

08004c60 <_kill_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	2300      	movs	r3, #0
 8004c64:	4d06      	ldr	r5, [pc, #24]	; (8004c80 <_kill_r+0x20>)
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	f7fb fcf6 	bl	800065e <_kill>
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	d102      	bne.n	8004c7c <_kill_r+0x1c>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	b103      	cbz	r3, 8004c7c <_kill_r+0x1c>
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	bd38      	pop	{r3, r4, r5, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000330 	.word	0x20000330

08004c84 <_getpid_r>:
 8004c84:	f7fb bce4 	b.w	8000650 <_getpid>

08004c88 <__sread>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c90:	f000 f8a0 	bl	8004dd4 <_read_r>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	bfab      	itete	ge
 8004c98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c9c:	181b      	addge	r3, r3, r0
 8004c9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ca2:	bfac      	ite	ge
 8004ca4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ca6:	81a3      	strhlt	r3, [r4, #12]
 8004ca8:	bd10      	pop	{r4, pc}

08004caa <__swrite>:
 8004caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cae:	461f      	mov	r7, r3
 8004cb0:	898b      	ldrh	r3, [r1, #12]
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	05db      	lsls	r3, r3, #23
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	4616      	mov	r6, r2
 8004cba:	d505      	bpl.n	8004cc8 <__swrite+0x1e>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc4:	f000 f868 	bl	8004d98 <_lseek_r>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	4632      	mov	r2, r6
 8004ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cde:	f000 b817 	b.w	8004d10 <_write_r>

08004ce2 <__sseek>:
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cea:	f000 f855 	bl	8004d98 <_lseek_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	bf15      	itete	ne
 8004cf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cfe:	81a3      	strheq	r3, [r4, #12]
 8004d00:	bf18      	it	ne
 8004d02:	81a3      	strhne	r3, [r4, #12]
 8004d04:	bd10      	pop	{r4, pc}

08004d06 <__sclose>:
 8004d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0a:	f000 b813 	b.w	8004d34 <_close_r>
	...

08004d10 <_write_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4d05      	ldr	r5, [pc, #20]	; (8004d30 <_write_r+0x20>)
 8004d1c:	602a      	str	r2, [r5, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f7fb fcd4 	bl	80006cc <_write>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_write_r+0x1e>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_write_r+0x1e>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	20000330 	.word	0x20000330

08004d34 <_close_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	2300      	movs	r3, #0
 8004d38:	4d05      	ldr	r5, [pc, #20]	; (8004d50 <_close_r+0x1c>)
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	f7fb fce0 	bl	8000704 <_close>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_close_r+0x1a>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_close_r+0x1a>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20000330 	.word	0x20000330

08004d54 <_fstat_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	2300      	movs	r3, #0
 8004d58:	4d06      	ldr	r5, [pc, #24]	; (8004d74 <_fstat_r+0x20>)
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	4611      	mov	r1, r2
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	f7fb fcda 	bl	800071a <_fstat>
 8004d66:	1c43      	adds	r3, r0, #1
 8004d68:	d102      	bne.n	8004d70 <_fstat_r+0x1c>
 8004d6a:	682b      	ldr	r3, [r5, #0]
 8004d6c:	b103      	cbz	r3, 8004d70 <_fstat_r+0x1c>
 8004d6e:	6023      	str	r3, [r4, #0]
 8004d70:	bd38      	pop	{r3, r4, r5, pc}
 8004d72:	bf00      	nop
 8004d74:	20000330 	.word	0x20000330

08004d78 <_isatty_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4d05      	ldr	r5, [pc, #20]	; (8004d94 <_isatty_r+0x1c>)
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	f7fb fcd8 	bl	8000738 <_isatty>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_isatty_r+0x1a>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_isatty_r+0x1a>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	20000330 	.word	0x20000330

08004d98 <_lseek_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	2200      	movs	r2, #0
 8004da2:	4d05      	ldr	r5, [pc, #20]	; (8004db8 <_lseek_r+0x20>)
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f7fb fcd0 	bl	800074c <_lseek>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_lseek_r+0x1e>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_lseek_r+0x1e>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	20000330 	.word	0x20000330

08004dbc <__malloc_lock>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	; (8004dc4 <__malloc_lock+0x8>)
 8004dbe:	f7ff bdbd 	b.w	800493c <__retarget_lock_acquire_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20000324 	.word	0x20000324

08004dc8 <__malloc_unlock>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	; (8004dd0 <__malloc_unlock+0x8>)
 8004dca:	f7ff bdb8 	b.w	800493e <__retarget_lock_release_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20000324 	.word	0x20000324

08004dd4 <_read_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4d05      	ldr	r5, [pc, #20]	; (8004df4 <_read_r+0x20>)
 8004de0:	602a      	str	r2, [r5, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7fb fc55 	bl	8000692 <_read>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_read_r+0x1e>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_read_r+0x1e>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	20000330 	.word	0x20000330

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
