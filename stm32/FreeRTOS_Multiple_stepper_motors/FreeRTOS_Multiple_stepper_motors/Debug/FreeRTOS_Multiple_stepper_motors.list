
FreeRTOS_Multiple_stepper_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a8  080038a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080038a8  080038a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a8  080038a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080038b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001108  20000074  08003924  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000117c  08003924  0002117c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1b7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002614  00000000  00000000  0002f254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00031868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00032698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186b9  00000000  00000000  000333b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea05  00000000  00000000  0004ba69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f68f  00000000  00000000  0005a46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  000e9b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080037b8 	.word	0x080037b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080037b8 	.word	0x080037b8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <microDelay1>:
#define IN3_PORT GPIOA      // for motor2
#define IN4_PIN GPIO_PIN_3  // for motor2
#define IN4_PORT GPIOA      // for motor2

// micro seconds delay for motor1
void microDelay1(uint16_t delay) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800018a:	4b08      	ldr	r3, [pc, #32]	; (80001ac <microDelay1+0x2c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2200      	movs	r2, #0
 8000190:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8000192:	bf00      	nop
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <microDelay1+0x2c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800019a:	88fb      	ldrh	r3, [r7, #6]
 800019c:	429a      	cmp	r2, r3
 800019e:	d3f9      	bcc.n	8000194 <microDelay1+0x14>
		;
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000344 	.word	0x20000344

080001b0 <microDelay2>:

// micro seconds delay for motor2
void microDelay2(uint16_t delay) {
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80001ba:	4b08      	ldr	r3, [pc, #32]	; (80001dc <microDelay2+0x2c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2200      	movs	r2, #0
 80001c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < delay)
 80001c2:	bf00      	nop
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <microDelay2+0x2c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d3f9      	bcc.n	80001c4 <microDelay2+0x14>
		;
}
 80001d0:	bf00      	nop
 80001d2:	bf00      	nop
 80001d4:	370c      	adds	r7, #12
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	2000038c 	.word	0x2000038c

080001e0 <step>:

// motor1 for both directions
void step(int steps, uint8_t direction, uint16_t delay) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	460b      	mov	r3, r1
 80001ea:	70fb      	strb	r3, [r7, #3]
 80001ec:	4613      	mov	r3, r2
 80001ee:	803b      	strh	r3, [r7, #0]
	int x;
	if (direction == 0)
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d105      	bne.n	8000202 <step+0x22>
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2102      	movs	r1, #2
 80001fa:	4815      	ldr	r0, [pc, #84]	; (8000250 <step+0x70>)
 80001fc:	f000 ff5a 	bl	80010b4 <HAL_GPIO_WritePin>
 8000200:	e004      	b.n	800020c <step+0x2c>
	else
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2102      	movs	r1, #2
 8000206:	4812      	ldr	r0, [pc, #72]	; (8000250 <step+0x70>)
 8000208:	f000 ff54 	bl	80010b4 <HAL_GPIO_WritePin>
	for (x = 0; x < steps; x = x + 1) {
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e014      	b.n	800023c <step+0x5c>
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2104      	movs	r1, #4
 8000216:	480e      	ldr	r0, [pc, #56]	; (8000250 <step+0x70>)
 8000218:	f000 ff4c 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay1(delay);
 800021c:	883b      	ldrh	r3, [r7, #0]
 800021e:	4618      	mov	r0, r3
 8000220:	f7ff ffae 	bl	8000180 <microDelay1>
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2104      	movs	r1, #4
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <step+0x70>)
 800022a:	f000 ff43 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay1(delay);
 800022e:	883b      	ldrh	r3, [r7, #0]
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ffa5 	bl	8000180 <microDelay1>
	for (x = 0; x < steps; x = x + 1) {
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3301      	adds	r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	429a      	cmp	r2, r3
 8000242:	dbe6      	blt.n	8000212 <step+0x32>
	}
}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010800 	.word	0x40010800

08000254 <stepCCV>:

// CCV - Counter Clockwise motor2
void stepCCV(int steps, uint16_t delay) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	807b      	strh	r3, [r7, #2]
	for (int x = 0; x < steps; x = x + 1) {
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	e0c2      	b.n	80003ec <stepCCV+0x198>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000266:	2201      	movs	r2, #1
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	4865      	ldr	r0, [pc, #404]	; (8000400 <stepCCV+0x1ac>)
 800026c:	f000 ff22 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000270:	2200      	movs	r2, #0
 8000272:	2120      	movs	r1, #32
 8000274:	4862      	ldr	r0, [pc, #392]	; (8000400 <stepCCV+0x1ac>)
 8000276:	f000 ff1d 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800027a:	2200      	movs	r2, #0
 800027c:	2110      	movs	r1, #16
 800027e:	4860      	ldr	r0, [pc, #384]	; (8000400 <stepCCV+0x1ac>)
 8000280:	f000 ff18 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000284:	2200      	movs	r2, #0
 8000286:	2108      	movs	r1, #8
 8000288:	485d      	ldr	r0, [pc, #372]	; (8000400 <stepCCV+0x1ac>)
 800028a:	f000 ff13 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800028e:	887b      	ldrh	r3, [r7, #2]
 8000290:	4618      	mov	r0, r3
 8000292:	f7ff ff8d 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000296:	2201      	movs	r2, #1
 8000298:	2140      	movs	r1, #64	; 0x40
 800029a:	4859      	ldr	r0, [pc, #356]	; (8000400 <stepCCV+0x1ac>)
 800029c:	f000 ff0a 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80002a0:	2201      	movs	r2, #1
 80002a2:	2120      	movs	r1, #32
 80002a4:	4856      	ldr	r0, [pc, #344]	; (8000400 <stepCCV+0x1ac>)
 80002a6:	f000 ff05 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80002aa:	2200      	movs	r2, #0
 80002ac:	2110      	movs	r1, #16
 80002ae:	4854      	ldr	r0, [pc, #336]	; (8000400 <stepCCV+0x1ac>)
 80002b0:	f000 ff00 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80002b4:	2200      	movs	r2, #0
 80002b6:	2108      	movs	r1, #8
 80002b8:	4851      	ldr	r0, [pc, #324]	; (8000400 <stepCCV+0x1ac>)
 80002ba:	f000 fefb 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff75 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80002c6:	2200      	movs	r2, #0
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	484d      	ldr	r0, [pc, #308]	; (8000400 <stepCCV+0x1ac>)
 80002cc:	f000 fef2 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80002d0:	2201      	movs	r2, #1
 80002d2:	2120      	movs	r1, #32
 80002d4:	484a      	ldr	r0, [pc, #296]	; (8000400 <stepCCV+0x1ac>)
 80002d6:	f000 feed 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80002da:	2200      	movs	r2, #0
 80002dc:	2110      	movs	r1, #16
 80002de:	4848      	ldr	r0, [pc, #288]	; (8000400 <stepCCV+0x1ac>)
 80002e0:	f000 fee8 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80002e4:	2200      	movs	r2, #0
 80002e6:	2108      	movs	r1, #8
 80002e8:	4845      	ldr	r0, [pc, #276]	; (8000400 <stepCCV+0x1ac>)
 80002ea:	f000 fee3 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 80002ee:	887b      	ldrh	r3, [r7, #2]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff5d 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80002f6:	2200      	movs	r2, #0
 80002f8:	2140      	movs	r1, #64	; 0x40
 80002fa:	4841      	ldr	r0, [pc, #260]	; (8000400 <stepCCV+0x1ac>)
 80002fc:	f000 feda 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000300:	2201      	movs	r2, #1
 8000302:	2120      	movs	r1, #32
 8000304:	483e      	ldr	r0, [pc, #248]	; (8000400 <stepCCV+0x1ac>)
 8000306:	f000 fed5 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 800030a:	2201      	movs	r2, #1
 800030c:	2110      	movs	r1, #16
 800030e:	483c      	ldr	r0, [pc, #240]	; (8000400 <stepCCV+0x1ac>)
 8000310:	f000 fed0 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000314:	2200      	movs	r2, #0
 8000316:	2108      	movs	r1, #8
 8000318:	4839      	ldr	r0, [pc, #228]	; (8000400 <stepCCV+0x1ac>)
 800031a:	f000 fecb 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800031e:	887b      	ldrh	r3, [r7, #2]
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff45 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	4835      	ldr	r0, [pc, #212]	; (8000400 <stepCCV+0x1ac>)
 800032c:	f000 fec2 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000330:	2200      	movs	r2, #0
 8000332:	2120      	movs	r1, #32
 8000334:	4832      	ldr	r0, [pc, #200]	; (8000400 <stepCCV+0x1ac>)
 8000336:	f000 febd 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 800033a:	2201      	movs	r2, #1
 800033c:	2110      	movs	r1, #16
 800033e:	4830      	ldr	r0, [pc, #192]	; (8000400 <stepCCV+0x1ac>)
 8000340:	f000 feb8 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000344:	2200      	movs	r2, #0
 8000346:	2108      	movs	r1, #8
 8000348:	482d      	ldr	r0, [pc, #180]	; (8000400 <stepCCV+0x1ac>)
 800034a:	f000 feb3 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800034e:	887b      	ldrh	r3, [r7, #2]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff2d 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000356:	2200      	movs	r2, #0
 8000358:	2140      	movs	r1, #64	; 0x40
 800035a:	4829      	ldr	r0, [pc, #164]	; (8000400 <stepCCV+0x1ac>)
 800035c:	f000 feaa 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4826      	ldr	r0, [pc, #152]	; (8000400 <stepCCV+0x1ac>)
 8000366:	f000 fea5 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 800036a:	2201      	movs	r2, #1
 800036c:	2110      	movs	r1, #16
 800036e:	4824      	ldr	r0, [pc, #144]	; (8000400 <stepCCV+0x1ac>)
 8000370:	f000 fea0 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000374:	2201      	movs	r2, #1
 8000376:	2108      	movs	r1, #8
 8000378:	4821      	ldr	r0, [pc, #132]	; (8000400 <stepCCV+0x1ac>)
 800037a:	f000 fe9b 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff15 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000386:	2200      	movs	r2, #0
 8000388:	2140      	movs	r1, #64	; 0x40
 800038a:	481d      	ldr	r0, [pc, #116]	; (8000400 <stepCCV+0x1ac>)
 800038c:	f000 fe92 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000390:	2200      	movs	r2, #0
 8000392:	2120      	movs	r1, #32
 8000394:	481a      	ldr	r0, [pc, #104]	; (8000400 <stepCCV+0x1ac>)
 8000396:	f000 fe8d 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800039a:	2200      	movs	r2, #0
 800039c:	2110      	movs	r1, #16
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <stepCCV+0x1ac>)
 80003a0:	f000 fe88 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 80003a4:	2201      	movs	r2, #1
 80003a6:	2108      	movs	r1, #8
 80003a8:	4815      	ldr	r0, [pc, #84]	; (8000400 <stepCCV+0x1ac>)
 80003aa:	f000 fe83 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 80003ae:	887b      	ldrh	r3, [r7, #2]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff fefd 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80003b6:	2201      	movs	r2, #1
 80003b8:	2140      	movs	r1, #64	; 0x40
 80003ba:	4811      	ldr	r0, [pc, #68]	; (8000400 <stepCCV+0x1ac>)
 80003bc:	f000 fe7a 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80003c0:	2200      	movs	r2, #0
 80003c2:	2120      	movs	r1, #32
 80003c4:	480e      	ldr	r0, [pc, #56]	; (8000400 <stepCCV+0x1ac>)
 80003c6:	f000 fe75 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80003ca:	2200      	movs	r2, #0
 80003cc:	2110      	movs	r1, #16
 80003ce:	480c      	ldr	r0, [pc, #48]	; (8000400 <stepCCV+0x1ac>)
 80003d0:	f000 fe70 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 80003d4:	2201      	movs	r2, #1
 80003d6:	2108      	movs	r1, #8
 80003d8:	4809      	ldr	r0, [pc, #36]	; (8000400 <stepCCV+0x1ac>)
 80003da:	f000 fe6b 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 80003de:	887b      	ldrh	r3, [r7, #2]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff fee5 	bl	80001b0 <microDelay2>
	for (int x = 0; x < steps; x = x + 1) {
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	f6ff af38 	blt.w	8000266 <stepCCV+0x12>
	}
}
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40010800 	.word	0x40010800

08000404 <stepCV>:

// CV - Clockwise motor1
void stepCV(int steps, uint16_t delay) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	807b      	strh	r3, [r7, #2]
	for (int x = 0; x < steps; x = x + 1) {
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e0c2      	b.n	800059c <stepCV+0x198>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000416:	2201      	movs	r2, #1
 8000418:	2140      	movs	r1, #64	; 0x40
 800041a:	4865      	ldr	r0, [pc, #404]	; (80005b0 <stepCV+0x1ac>)
 800041c:	f000 fe4a 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000420:	2200      	movs	r2, #0
 8000422:	2120      	movs	r1, #32
 8000424:	4862      	ldr	r0, [pc, #392]	; (80005b0 <stepCV+0x1ac>)
 8000426:	f000 fe45 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800042a:	2200      	movs	r2, #0
 800042c:	2110      	movs	r1, #16
 800042e:	4860      	ldr	r0, [pc, #384]	; (80005b0 <stepCV+0x1ac>)
 8000430:	f000 fe40 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000434:	2201      	movs	r2, #1
 8000436:	2108      	movs	r1, #8
 8000438:	485d      	ldr	r0, [pc, #372]	; (80005b0 <stepCV+0x1ac>)
 800043a:	f000 fe3b 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff feb5 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000446:	2200      	movs	r2, #0
 8000448:	2140      	movs	r1, #64	; 0x40
 800044a:	4859      	ldr	r0, [pc, #356]	; (80005b0 <stepCV+0x1ac>)
 800044c:	f000 fe32 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000450:	2200      	movs	r2, #0
 8000452:	2120      	movs	r1, #32
 8000454:	4856      	ldr	r0, [pc, #344]	; (80005b0 <stepCV+0x1ac>)
 8000456:	f000 fe2d 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800045a:	2200      	movs	r2, #0
 800045c:	2110      	movs	r1, #16
 800045e:	4854      	ldr	r0, [pc, #336]	; (80005b0 <stepCV+0x1ac>)
 8000460:	f000 fe28 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000464:	2201      	movs	r2, #1
 8000466:	2108      	movs	r1, #8
 8000468:	4851      	ldr	r0, [pc, #324]	; (80005b0 <stepCV+0x1ac>)
 800046a:	f000 fe23 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800046e:	887b      	ldrh	r3, [r7, #2]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fe9d 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000476:	2200      	movs	r2, #0
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	484d      	ldr	r0, [pc, #308]	; (80005b0 <stepCV+0x1ac>)
 800047c:	f000 fe1a 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000480:	2200      	movs	r2, #0
 8000482:	2120      	movs	r1, #32
 8000484:	484a      	ldr	r0, [pc, #296]	; (80005b0 <stepCV+0x1ac>)
 8000486:	f000 fe15 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 800048a:	2201      	movs	r2, #1
 800048c:	2110      	movs	r1, #16
 800048e:	4848      	ldr	r0, [pc, #288]	; (80005b0 <stepCV+0x1ac>)
 8000490:	f000 fe10 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000494:	2201      	movs	r2, #1
 8000496:	2108      	movs	r1, #8
 8000498:	4845      	ldr	r0, [pc, #276]	; (80005b0 <stepCV+0x1ac>)
 800049a:	f000 fe0b 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800049e:	887b      	ldrh	r3, [r7, #2]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fe85 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80004a6:	2200      	movs	r2, #0
 80004a8:	2140      	movs	r1, #64	; 0x40
 80004aa:	4841      	ldr	r0, [pc, #260]	; (80005b0 <stepCV+0x1ac>)
 80004ac:	f000 fe02 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80004b0:	2200      	movs	r2, #0
 80004b2:	2120      	movs	r1, #32
 80004b4:	483e      	ldr	r0, [pc, #248]	; (80005b0 <stepCV+0x1ac>)
 80004b6:	f000 fdfd 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80004ba:	2201      	movs	r2, #1
 80004bc:	2110      	movs	r1, #16
 80004be:	483c      	ldr	r0, [pc, #240]	; (80005b0 <stepCV+0x1ac>)
 80004c0:	f000 fdf8 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80004c4:	2200      	movs	r2, #0
 80004c6:	2108      	movs	r1, #8
 80004c8:	4839      	ldr	r0, [pc, #228]	; (80005b0 <stepCV+0x1ac>)
 80004ca:	f000 fdf3 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 80004ce:	887b      	ldrh	r3, [r7, #2]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fe6d 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80004d6:	2200      	movs	r2, #0
 80004d8:	2140      	movs	r1, #64	; 0x40
 80004da:	4835      	ldr	r0, [pc, #212]	; (80005b0 <stepCV+0x1ac>)
 80004dc:	f000 fdea 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80004e0:	2201      	movs	r2, #1
 80004e2:	2120      	movs	r1, #32
 80004e4:	4832      	ldr	r0, [pc, #200]	; (80005b0 <stepCV+0x1ac>)
 80004e6:	f000 fde5 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80004ea:	2201      	movs	r2, #1
 80004ec:	2110      	movs	r1, #16
 80004ee:	4830      	ldr	r0, [pc, #192]	; (80005b0 <stepCV+0x1ac>)
 80004f0:	f000 fde0 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80004f4:	2200      	movs	r2, #0
 80004f6:	2108      	movs	r1, #8
 80004f8:	482d      	ldr	r0, [pc, #180]	; (80005b0 <stepCV+0x1ac>)
 80004fa:	f000 fddb 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe55 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000506:	2200      	movs	r2, #0
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	4829      	ldr	r0, [pc, #164]	; (80005b0 <stepCV+0x1ac>)
 800050c:	f000 fdd2 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000510:	2201      	movs	r2, #1
 8000512:	2120      	movs	r1, #32
 8000514:	4826      	ldr	r0, [pc, #152]	; (80005b0 <stepCV+0x1ac>)
 8000516:	f000 fdcd 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4824      	ldr	r0, [pc, #144]	; (80005b0 <stepCV+0x1ac>)
 8000520:	f000 fdc8 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	4821      	ldr	r0, [pc, #132]	; (80005b0 <stepCV+0x1ac>)
 800052a:	f000 fdc3 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800052e:	887b      	ldrh	r3, [r7, #2]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe3d 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000536:	2201      	movs	r2, #1
 8000538:	2140      	movs	r1, #64	; 0x40
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <stepCV+0x1ac>)
 800053c:	f000 fdba 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000540:	2201      	movs	r2, #1
 8000542:	2120      	movs	r1, #32
 8000544:	481a      	ldr	r0, [pc, #104]	; (80005b0 <stepCV+0x1ac>)
 8000546:	f000 fdb5 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800054a:	2200      	movs	r2, #0
 800054c:	2110      	movs	r1, #16
 800054e:	4818      	ldr	r0, [pc, #96]	; (80005b0 <stepCV+0x1ac>)
 8000550:	f000 fdb0 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000554:	2200      	movs	r2, #0
 8000556:	2108      	movs	r1, #8
 8000558:	4815      	ldr	r0, [pc, #84]	; (80005b0 <stepCV+0x1ac>)
 800055a:	f000 fdab 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe25 	bl	80001b0 <microDelay2>
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000566:	2201      	movs	r2, #1
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <stepCV+0x1ac>)
 800056c:	f000 fda2 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	480e      	ldr	r0, [pc, #56]	; (80005b0 <stepCV+0x1ac>)
 8000576:	f000 fd9d 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	480c      	ldr	r0, [pc, #48]	; (80005b0 <stepCV+0x1ac>)
 8000580:	f000 fd98 	bl	80010b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <stepCV+0x1ac>)
 800058a:	f000 fd93 	bl	80010b4 <HAL_GPIO_WritePin>
		microDelay2(delay);
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe0d 	bl	80001b0 <microDelay2>
	for (int x = 0; x < steps; x = x + 1) {
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	f6ff af38 	blt.w	8000416 <stepCV+0x12>
	}
}
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40010800 	.word	0x40010800

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fae5 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f83f 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f91f 	bl	8000804 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c6:	f000 f881 	bl	80006cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ca:	f000 f8cf 	bl	800076c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <main+0x74>)
 80005d0:	f001 fa0e 	bl	80019f0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <main+0x78>)
 80005d6:	f001 fa0b 	bl	80019f0 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Motor1 */
  osThreadDef(Motor1, StartMotor1, osPriorityNormal, 0, 128);
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <main+0x7c>)
 80005dc:	f107 041c 	add.w	r4, r7, #28
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Motor1Handle = osThreadCreate(osThread(Motor1), NULL);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fe0d 	bl	8002214 <osThreadCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <main+0x80>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motor2 */
  osThreadDef(Motor2, StartMotor2, osPriorityNormal, 0, 128);
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <main+0x84>)
 8000602:	463c      	mov	r4, r7
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Motor2Handle = osThreadCreate(osThread(Motor2), NULL);
 8000612:	463b      	mov	r3, r7
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fdfc 	bl	8002214 <osThreadCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <main+0x88>)
 8000620:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000622:	f001 fdf0 	bl	8002206 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0x72>
 8000628:	20000344 	.word	0x20000344
 800062c:	2000038c 	.word	0x2000038c
 8000630:	080037e0 	.word	0x080037e0
 8000634:	200003d4 	.word	0x200003d4
 8000638:	080037fc 	.word	0x080037fc
 800063c:	200003d8 	.word	0x200003d8

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f002 ffec 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fd2b 	bl	80010e4 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000694:	f000 f940 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff98 	bl	80015e8 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006be:	f000 f92b 	bl	8000918 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3740      	adds	r7, #64	; 0x40
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_TIM1_Init+0x98>)
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <MX_TIM1_Init+0x9c>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_TIM1_Init+0x98>)
 80006f0:	2247      	movs	r2, #71	; 0x47
 80006f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_TIM1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_TIM1_Init+0x98>)
 80006fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_TIM1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_TIM1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <MX_TIM1_Init+0x98>)
 8000716:	f001 f91b 	bl	8001950 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000720:	f000 f8fa 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_TIM1_Init+0x98>)
 8000732:	f001 fb01 	bl	8001d38 <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800073c:	f000 f8ec 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_TIM1_Init+0x98>)
 800074e:	f001 fcd3 	bl	80020f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 f8de 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000344 	.word	0x20000344
 8000768:	40012c00 	.word	0x40012c00

0800076c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_TIM2_Init+0x94>)
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_TIM2_Init+0x94>)
 8000792:	2247      	movs	r2, #71	; 0x47
 8000794:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_TIM2_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_TIM2_Init+0x94>)
 800079e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_TIM2_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_TIM2_Init+0x94>)
 80007b2:	f001 f8cd 	bl	8001950 <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007bc:	f000 f8ac 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ce:	f001 fab3 	bl	8001d38 <HAL_TIM_ConfigClockSource>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 f89e 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ea:	f001 fc85 	bl	80020f8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007f4:	f000 f890 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000038c 	.word	0x2000038c

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_GPIO_Init+0x74>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_GPIO_Init+0x74>)
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_GPIO_Init+0x74>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0320 	and.w	r3, r3, #32
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_GPIO_Init+0x74>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <MX_GPIO_Init+0x74>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_GPIO_Init+0x74>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000848:	2200      	movs	r2, #0
 800084a:	217e      	movs	r1, #126	; 0x7e
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0x78>)
 800084e:	f000 fc31 	bl	80010b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000852:	237e      	movs	r3, #126	; 0x7e
 8000854:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0x78>)
 800086a:	f000 fa9f 	bl	8000dac <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800

08000880 <StartMotor1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMotor1 */
void StartMotor1(void const * argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		for (int y = 0; y < 8; y = y + 1) // 8 times
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	e00c      	b.n	80008a8 <StartMotor1+0x28>
				{
			step(25, 0, 800); // 25 steps (45 degrees) CCV
 800088e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000892:	2100      	movs	r1, #0
 8000894:	2019      	movs	r0, #25
 8000896:	f7ff fca3 	bl	80001e0 <step>
			osDelay(500);
 800089a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089e:	f001 fd05 	bl	80022ac <osDelay>
		for (int y = 0; y < 8; y = y + 1) // 8 times
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	ddef      	ble.n	800088e <StartMotor1+0xe>
		}
		step(800, 1, 5000); // 800 steps (4 revolutions ) CV
 80008ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80008b2:	2101      	movs	r1, #1
 80008b4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008b8:	f7ff fc92 	bl	80001e0 <step>
		osDelay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c0:	f001 fcf4 	bl	80022ac <osDelay>
		for (int y = 0; y < 8; y = y + 1) // 8 times
 80008c4:	e7e0      	b.n	8000888 <StartMotor1+0x8>

080008c6 <StartMotor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor2 */
void StartMotor2(void const * argument)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor2 */
  /* Infinite loop */
  for(;;)
  {
		// 512 full rev & 1 rpm - 14648
		stepCV(256, 1000);  // 256 half revolution
 80008ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008d6:	f7ff fd95 	bl	8000404 <stepCV>
		osDelay(100);
 80008da:	2064      	movs	r0, #100	; 0x64
 80008dc:	f001 fce6 	bl	80022ac <osDelay>
		stepCCV(128, 1000); // 128 quarter revolution
 80008e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e4:	2080      	movs	r0, #128	; 0x80
 80008e6:	f7ff fcb5 	bl	8000254 <stepCCV>
		osDelay(100);
 80008ea:	2064      	movs	r0, #100	; 0x64
 80008ec:	f001 fcde 	bl	80022ac <osDelay>
		stepCV(256, 1000);  // 256 half revolution
 80008f0:	e7ed      	b.n	80008ce <StartMotor2+0x8>
	...

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000906:	f000 f955 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40000400 	.word	0x40000400

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_MspInit+0x68>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_MspInit+0x68>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_MspInit+0x68>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_MspInit+0x68>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <HAL_MspInit+0x68>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x68>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 f9f8 	bl	8000d56 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_MspInit+0x6c>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_MspInit+0x6c>)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40010000 	.word	0x40010000

08000994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <HAL_TIM_Base_MspInit+0x58>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10c      	bne.n	80009c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_TIM_Base_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_TIM_Base_MspInit+0x5c>)
 80009ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_TIM_Base_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009be:	e010      	b.n	80009e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009c8:	d10b      	bne.n	80009e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_TIM_Base_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_TIM_Base_MspInit+0x5c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_TIM_Base_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40012c00 	.word	0x40012c00
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <HAL_InitTick+0xe8>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a33      	ldr	r2, [pc, #204]	; (8000adc <HAL_InitTick+0xe8>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <HAL_InitTick+0xe8>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a22:	f107 0210 	add.w	r2, r7, #16
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 ff41 	bl	80018b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d103      	bne.n	8000a44 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a3c:	f000 ff26 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8000a40:	6378      	str	r0, [r7, #52]	; 0x34
 8000a42:	e004      	b.n	8000a4e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a44:	f000 ff22 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <HAL_InitTick+0xec>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a5e:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <HAL_InitTick+0xf4>)
 8000a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a68:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000a82:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a84:	f000 ff64 	bl	8001950 <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d11b      	bne.n	8000ace <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000a96:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <HAL_InitTick+0xf0>)
 8000a98:	f000 fff4 	bl	8001a84 <HAL_TIM_Base_Start_IT>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d111      	bne.n	8000ace <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aaa:	201d      	movs	r0, #29
 8000aac:	f000 f96f 	bl	8000d8e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	d808      	bhi.n	8000ac8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	201d      	movs	r0, #29
 8000abc:	f000 f94b 	bl	8000d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_InitTick+0xf8>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e002      	b.n	8000ace <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ace:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3738      	adds	r7, #56	; 0x38
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	200003dc 	.word	0x200003dc
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	20000004 	.word	0x20000004

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM3_IRQHandler+0x10>)
 8000b22:	f001 f801 	bl	8001b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200003dc 	.word	0x200003dc

08000b30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b62:	f7ff ffe5 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 fd3b 	bl	80035e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff fd23 	bl	80005b4 <main>
  bx lr
 8000b6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b78:	080038b0 	.word	0x080038b0
  ldr r2, =_sbss
 8000b7c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b80:	2000117c 	.word	0x2000117c

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f8d1 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f7ff ff28 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff febe 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000424 	.word	0x20000424

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000424 	.word	0x20000424

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4906      	ldr	r1, [pc, #24]	; (8000c84 <__NVIC_EnableIRQ+0x34>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff4f 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff64 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ffb2 	bl	8000cdc <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff81 	bl	8000c88 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff57 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e169      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8158 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a9a      	ldr	r2, [pc, #616]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d05e      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000de8:	4a98      	ldr	r2, [pc, #608]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d875      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dee:	4a98      	ldr	r2, [pc, #608]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d058      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000df4:	4a96      	ldr	r2, [pc, #600]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d86f      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dfa:	4a96      	ldr	r2, [pc, #600]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d052      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e00:	4a94      	ldr	r2, [pc, #592]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d869      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e06:	4a94      	ldr	r2, [pc, #592]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d04c      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a92      	ldr	r2, [pc, #584]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d863      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e12:	4a92      	ldr	r2, [pc, #584]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d046      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a90      	ldr	r2, [pc, #576]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d85d      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d82a      	bhi.n	8000e78 <HAL_GPIO_Init+0xcc>
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d859      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <HAL_GPIO_Init+0x80>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000ea7 	.word	0x08000ea7
 8000e30:	08000e81 	.word	0x08000e81
 8000e34:	08000e93 	.word	0x08000e93
 8000e38:	08000ed5 	.word	0x08000ed5
 8000e3c:	08000edb 	.word	0x08000edb
 8000e40:	08000edb 	.word	0x08000edb
 8000e44:	08000edb 	.word	0x08000edb
 8000e48:	08000edb 	.word	0x08000edb
 8000e4c:	08000edb 	.word	0x08000edb
 8000e50:	08000edb 	.word	0x08000edb
 8000e54:	08000edb 	.word	0x08000edb
 8000e58:	08000edb 	.word	0x08000edb
 8000e5c:	08000edb 	.word	0x08000edb
 8000e60:	08000edb 	.word	0x08000edb
 8000e64:	08000edb 	.word	0x08000edb
 8000e68:	08000edb 	.word	0x08000edb
 8000e6c:	08000edb 	.word	0x08000edb
 8000e70:	08000e89 	.word	0x08000e89
 8000e74:	08000e9d 	.word	0x08000e9d
 8000e78:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_GPIO_Init+0x2b4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e7e:	e02c      	b.n	8000eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e029      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e024      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	3308      	adds	r3, #8
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e01f      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e01a      	b.n	8000edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e013      	b.n	8000edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	611a      	str	r2, [r3, #16]
          break;
 8000ec6:	e009      	b.n	8000edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	615a      	str	r2, [r3, #20]
          break;
 8000ed2:	e003      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x130>
          break;
 8000eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d801      	bhi.n	8000ee6 <HAL_GPIO_Init+0x13a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	e001      	b.n	8000eea <HAL_GPIO_Init+0x13e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d802      	bhi.n	8000ef8 <HAL_GPIO_Init+0x14c>
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0x152>
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	3b08      	subs	r3, #8
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	210f      	movs	r1, #15
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	6a39      	ldr	r1, [r7, #32]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80b1 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_GPIO_Init+0x2c0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d013      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a3f      	ldr	r2, [pc, #252]	; (8001070 <HAL_GPIO_Init+0x2c4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <HAL_GPIO_Init+0x2c8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <HAL_GPIO_Init+0x2cc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1e0>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000faa:	492f      	ldr	r1, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	492c      	ldr	r1, [pc, #176]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4928      	ldr	r1, [pc, #160]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	491e      	ldr	r1, [pc, #120]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	4918      	ldr	r1, [pc, #96]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	4914      	ldr	r1, [pc, #80]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d021      	beq.n	8001080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	490e      	ldr	r1, [pc, #56]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
 8001048:	e021      	b.n	800108e <HAL_GPIO_Init+0x2e2>
 800104a:	bf00      	nop
 800104c:	10320000 	.word	0x10320000
 8001050:	10310000 	.word	0x10310000
 8001054:	10220000 	.word	0x10220000
 8001058:	10210000 	.word	0x10210000
 800105c:	10120000 	.word	0x10120000
 8001060:	10110000 	.word	0x10110000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_GPIO_Init+0x304>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	43db      	mvns	r3, r3
 8001088:	4909      	ldr	r1, [pc, #36]	; (80010b0 <HAL_GPIO_Init+0x304>)
 800108a:	4013      	ands	r3, r2
 800108c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f ae8e 	bne.w	8000dc0 <HAL_GPIO_Init+0x14>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	372c      	adds	r7, #44	; 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e272      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8087 	beq.w	8001212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001104:	4b92      	ldr	r3, [pc, #584]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b04      	cmp	r3, #4
 800110e:	d00c      	beq.n	800112a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001110:	4b8f      	ldr	r3, [pc, #572]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b08      	cmp	r3, #8
 800111a:	d112      	bne.n	8001142 <HAL_RCC_OscConfig+0x5e>
 800111c:	4b8c      	ldr	r3, [pc, #560]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d10b      	bne.n	8001142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	4b89      	ldr	r3, [pc, #548]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d06c      	beq.n	8001210 <HAL_RCC_OscConfig+0x12c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d168      	bne.n	8001210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e24c      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x76>
 800114c:	4b80      	ldr	r3, [pc, #512]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a7f      	ldr	r2, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e02e      	b.n	80011b8 <HAL_RCC_OscConfig+0xd4>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x98>
 8001162:	4b7b      	ldr	r3, [pc, #492]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7a      	ldr	r2, [pc, #488]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b78      	ldr	r3, [pc, #480]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a77      	ldr	r2, [pc, #476]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e01d      	b.n	80011b8 <HAL_RCC_OscConfig+0xd4>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0xbc>
 8001186:	4b72      	ldr	r3, [pc, #456]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a71      	ldr	r2, [pc, #452]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6e      	ldr	r2, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xd4>
 80011a0:	4b6b      	ldr	r3, [pc, #428]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a6a      	ldr	r2, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b68      	ldr	r3, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a67      	ldr	r2, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fd0a 	bl	8000bd8 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fd06 	bl	8000bd8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e200      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe4>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fcf6 	bl	8000bd8 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fcf2 	bl	8000bd8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e1ec      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	4b53      	ldr	r3, [pc, #332]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x10c>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d063      	beq.n	80012e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800122a:	4b49      	ldr	r3, [pc, #292]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b08      	cmp	r3, #8
 8001234:	d11c      	bne.n	8001270 <HAL_RCC_OscConfig+0x18c>
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x176>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e1c0      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4939      	ldr	r1, [pc, #228]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	e03a      	b.n	80012e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <HAL_RCC_OscConfig+0x270>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fcab 	bl	8000bd8 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fca7 	bl	8000bd8 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e1a1      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4927      	ldr	r1, [pc, #156]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_RCC_OscConfig+0x270>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc8a 	bl	8000bd8 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc86 	bl	8000bd8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e180      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d03a      	beq.n	8001368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d019      	beq.n	800132e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_RCC_OscConfig+0x274>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001300:	f7ff fc6a 	bl	8000bd8 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fc66 	bl	8000bd8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e160      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_RCC_OscConfig+0x26c>)
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001326:	2001      	movs	r0, #1
 8001328:	f000 faf4 	bl	8001914 <RCC_Delay>
 800132c:	e01c      	b.n	8001368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_RCC_OscConfig+0x274>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001334:	f7ff fc50 	bl	8000bd8 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133a:	e00f      	b.n	800135c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133c:	f7ff fc4c 	bl	8000bd8 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d908      	bls.n	800135c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e146      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	42420000 	.word	0x42420000
 8001358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	4b92      	ldr	r3, [pc, #584]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e9      	bne.n	800133c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80a6 	beq.w	80014c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10d      	bne.n	80013a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a87      	ldr	r2, [pc, #540]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	4b82      	ldr	r3, [pc, #520]	; (80015ac <HAL_RCC_OscConfig+0x4c8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d118      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ae:	4b7f      	ldr	r3, [pc, #508]	; (80015ac <HAL_RCC_OscConfig+0x4c8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7e      	ldr	r2, [pc, #504]	; (80015ac <HAL_RCC_OscConfig+0x4c8>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fc0d 	bl	8000bd8 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c2:	f7ff fc09 	bl	8000bd8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b64      	cmp	r3, #100	; 0x64
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e103      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	4b75      	ldr	r3, [pc, #468]	; (80015ac <HAL_RCC_OscConfig+0x4c8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x312>
 80013e8:	4b6f      	ldr	r3, [pc, #444]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a6e      	ldr	r2, [pc, #440]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	e02d      	b.n	8001452 <HAL_RCC_OscConfig+0x36e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x334>
 80013fe:	4b6a      	ldr	r3, [pc, #424]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a69      	ldr	r2, [pc, #420]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a66      	ldr	r2, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
 8001416:	e01c      	b.n	8001452 <HAL_RCC_OscConfig+0x36e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x356>
 8001420:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a60      	ldr	r2, [pc, #384]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a5d      	ldr	r2, [pc, #372]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x36e>
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4a5a      	ldr	r2, [pc, #360]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6213      	str	r3, [r2, #32]
 8001446:	4b58      	ldr	r3, [pc, #352]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a57      	ldr	r2, [pc, #348]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d015      	beq.n	8001486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fbbd 	bl	8000bd8 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fbb9 	bl	8000bd8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0b1      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ee      	beq.n	8001462 <HAL_RCC_OscConfig+0x37e>
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fba7 	bl	8000bd8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fba3 	bl	8000bd8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e09b      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ee      	bne.n	800148e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d105      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d061      	beq.n	800159c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d146      	bne.n	800156e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_RCC_OscConfig+0x4cc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb77 	bl	8000bd8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fb73 	bl	8000bd8 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e06d      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d108      	bne.n	8001528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	4921      	ldr	r1, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a19      	ldr	r1, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	430b      	orrs	r3, r1
 800153a:	491b      	ldr	r1, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x4cc>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fb47 	bl	8000bd8 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154e:	f7ff fb43 	bl	8000bd8 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e03d      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x46a>
 800156c:	e035      	b.n	80015da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_RCC_OscConfig+0x4cc>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fb30 	bl	8000bd8 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fb2c 	bl	8000bd8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e026      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x498>
 800159a:	e01e      	b.n	80015da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e019      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40007000 	.word	0x40007000
 80015b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000

080015e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0d0      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015fc:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d910      	bls.n	800162c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b67      	ldr	r3, [pc, #412]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 0207 	bic.w	r2, r3, #7
 8001612:	4965      	ldr	r1, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800164e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d040      	beq.n	8001708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d115      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e073      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06b      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c6:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f023 0203 	bic.w	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4936      	ldr	r1, [pc, #216]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d8:	f7ff fa7e 	bl	8000bd8 <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff fa7a 	bl	8000bd8 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e053      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 020c 	and.w	r2, r3, #12
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	429a      	cmp	r2, r3
 8001706:	d1eb      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d210      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 0207 	bic.w	r2, r3, #7
 800171e:	4922      	ldr	r1, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f92c 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	08003830 	.word	0x08003830
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	b490      	push	{r4, r7}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_RCC_GetSysClockFreq+0xac>)
 80017c4:	1d3c      	adds	r4, r7, #4
 80017c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017cc:	f240 2301 	movw	r3, #513	; 0x201
 80017d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x40>
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x46>
 80017fa:	e02b      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017fe:	623b      	str	r3, [r7, #32]
      break;
 8001800:	e02b      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	0c9b      	lsrs	r3, r3, #18
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3328      	adds	r3, #40	; 0x28
 800180c:	443b      	add	r3, r7
 800180e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001812:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d012      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	0c5b      	lsrs	r3, r3, #17
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	3328      	adds	r3, #40	; 0x28
 800182a:	443b      	add	r3, r7
 800182c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001830:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001836:	fb03 f202 	mul.w	r2, r3, r2
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	e004      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	623b      	str	r3, [r7, #32]
      break;
 8001852:	e002      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001856:	623b      	str	r3, [r7, #32]
      break;
 8001858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185a:	6a3b      	ldr	r3, [r7, #32]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bc90      	pop	{r4, r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	08003818 	.word	0x08003818
 800186c:	40021000 	.word	0x40021000
 8001870:	007a1200 	.word	0x007a1200
 8001874:	003d0900 	.word	0x003d0900

08001878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_RCC_GetHCLKFreq+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001890:	f7ff fff2 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08003840 	.word	0x08003840

080018b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	220f      	movs	r2, #15
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_RCC_GetClockConfig+0x58>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_RCC_GetClockConfig+0x58>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_GetClockConfig+0x58>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_RCC_GetClockConfig+0x58>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0207 	and.w	r2, r3, #7
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000
 8001910:	40022000 	.word	0x40022000

08001914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <RCC_Delay+0x34>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <RCC_Delay+0x38>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0a5b      	lsrs	r3, r3, #9
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001930:	bf00      	nop
  }
  while (Delay --);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f9      	bne.n	8001930 <RCC_Delay+0x1c>
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000000 	.word	0x20000000
 800194c:	10624dd3 	.word	0x10624dd3

08001950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e041      	b.n	80019e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff f80c 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3304      	adds	r3, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f000 faba 	bl	8001f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d001      	beq.n	8001a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_TIM_Base_Start+0x88>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00e      	beq.n	8001a38 <HAL_TIM_Base_Start+0x48>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d009      	beq.n	8001a38 <HAL_TIM_Base_Start+0x48>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_TIM_Base_Start+0x8c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d004      	beq.n	8001a38 <HAL_TIM_Base_Start+0x48>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <HAL_TIM_Base_Start+0x90>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d111      	bne.n	8001a5c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d010      	beq.n	8001a6c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5a:	e007      	b.n	8001a6c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40000800 	.word	0x40000800

08001a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e03a      	b.n	8001b12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <HAL_TIM_Base_Start_IT+0x98>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00e      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x58>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac6:	d009      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x58>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d004      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x58>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d111      	bne.n	8001b00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d010      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	e007      	b.n	8001b10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40012c00 	.word	0x40012c00
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40000800 	.word	0x40000800

08001b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0202 	mvn.w	r2, #2
 8001b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f9b1 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f9a4 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f9b3 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d122      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0204 	mvn.w	r2, #4
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f987 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f97a 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f989 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d122      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d11b      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0208 	mvn.w	r2, #8
 8001bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2204      	movs	r2, #4
 8001c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f95d 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001c18:	e005      	b.n	8001c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f950 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f95f 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d122      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d11b      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0210 	mvn.w	r2, #16
 8001c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2208      	movs	r2, #8
 8001c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f933 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f926 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f935 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0201 	mvn.w	r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7fe fe24 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b80      	cmp	r3, #128	; 0x80
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc4:	2b80      	cmp	r3, #128	; 0x80
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa77 	bl	80021c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	2b40      	cmp	r3, #64	; 0x40
 8001ce4:	d10e      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d107      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8f9 	bl	8001ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d10e      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d107      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0220 	mvn.w	r2, #32
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fa42 	bl	80021b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_TIM_ConfigClockSource+0x18>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e0b3      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x180>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d88:	d03e      	beq.n	8001e08 <HAL_TIM_ConfigClockSource+0xd0>
 8001d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8e:	f200 8087 	bhi.w	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d96:	f000 8085 	beq.w	8001ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8001d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9e:	d87f      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001da0:	2b70      	cmp	r3, #112	; 0x70
 8001da2:	d01a      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0xa2>
 8001da4:	2b70      	cmp	r3, #112	; 0x70
 8001da6:	d87b      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001da8:	2b60      	cmp	r3, #96	; 0x60
 8001daa:	d050      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0x116>
 8001dac:	2b60      	cmp	r3, #96	; 0x60
 8001dae:	d877      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001db0:	2b50      	cmp	r3, #80	; 0x50
 8001db2:	d03c      	beq.n	8001e2e <HAL_TIM_ConfigClockSource+0xf6>
 8001db4:	2b50      	cmp	r3, #80	; 0x50
 8001db6:	d873      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	d058      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x136>
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d86f      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001dc0:	2b30      	cmp	r3, #48	; 0x30
 8001dc2:	d064      	beq.n	8001e8e <HAL_TIM_ConfigClockSource+0x156>
 8001dc4:	2b30      	cmp	r3, #48	; 0x30
 8001dc6:	d86b      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d060      	beq.n	8001e8e <HAL_TIM_ConfigClockSource+0x156>
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d867      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d05c      	beq.n	8001e8e <HAL_TIM_ConfigClockSource+0x156>
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d05a      	beq.n	8001e8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001dd8:	e062      	b.n	8001ea0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f000 f966 	bl	80020ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	609a      	str	r2, [r3, #8]
      break;
 8001e06:	e04e      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6899      	ldr	r1, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f000 f94f 	bl	80020ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e2a:	609a      	str	r2, [r3, #8]
      break;
 8001e2c:	e03b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f000 f8c6 	bl	8001fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2150      	movs	r1, #80	; 0x50
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f91d 	bl	8002086 <TIM_ITRx_SetConfig>
      break;
 8001e4c:	e02b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f000 f8e4 	bl	8002028 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2160      	movs	r1, #96	; 0x60
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f90d 	bl	8002086 <TIM_ITRx_SetConfig>
      break;
 8001e6c:	e01b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f000 f8a6 	bl	8001fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2140      	movs	r1, #64	; 0x40
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f8fd 	bl	8002086 <TIM_ITRx_SetConfig>
      break;
 8001e8c:	e00b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f000 f8f4 	bl	8002086 <TIM_ITRx_SetConfig>
        break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ea0:	bf00      	nop
 8001ea2:	e000      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ea4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <TIM_Base_SetConfig+0xb8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d007      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <TIM_Base_SetConfig+0xbc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <TIM_Base_SetConfig+0xc0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <TIM_Base_SetConfig+0xb8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00b      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <TIM_Base_SetConfig+0xbc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <TIM_Base_SetConfig+0xc0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <TIM_Base_SetConfig+0xb8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	615a      	str	r2, [r3, #20]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800

08001fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f023 0201 	bic.w	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f023 030a 	bic.w	r3, r3, #10
 8002008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f023 0210 	bic.w	r2, r3, #16
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	031b      	lsls	r3, r3, #12
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002064:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	621a      	str	r2, [r3, #32]
}
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f043 0307 	orr.w	r3, r3, #7
 80020a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	609a      	str	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b087      	sub	sp, #28
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	021a      	lsls	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	431a      	orrs	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	609a      	str	r2, [r3, #8]
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800210c:	2302      	movs	r3, #2
 800210e:	e046      	b.n	800219e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a16      	ldr	r2, [pc, #88]	; (80021a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00e      	beq.n	8002172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d009      	beq.n	8002172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10c      	bne.n	800218c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	4313      	orrs	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800

080021b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ea:	2b84      	cmp	r3, #132	; 0x84
 80021ec:	d005      	beq.n	80021fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	3303      	adds	r3, #3
 80021f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800220a:	f000 fae7 	bl	80027dc <vTaskStartScheduler>
  
  return osOK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}

08002214 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af04      	add	r7, sp, #16
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d020      	beq.n	8002268 <osThreadCreate+0x54>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01c      	beq.n	8002268 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685c      	ldr	r4, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681d      	ldr	r5, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691e      	ldr	r6, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffc9 	bl	80021d8 <makeFreeRtosPriority>
 8002246:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002250:	9202      	str	r2, [sp, #8]
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	9100      	str	r1, [sp, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	4632      	mov	r2, r6
 800225a:	4629      	mov	r1, r5
 800225c:	4620      	mov	r0, r4
 800225e:	f000 f8e8 	bl	8002432 <xTaskCreateStatic>
 8002262:	4603      	mov	r3, r0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e01c      	b.n	80022a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685c      	ldr	r4, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002274:	b29e      	uxth	r6, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ffab 	bl	80021d8 <makeFreeRtosPriority>
 8002282:	4602      	mov	r2, r0
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4632      	mov	r2, r6
 8002290:	4629      	mov	r1, r5
 8002292:	4620      	mov	r0, r4
 8002294:	f000 f929 	bl	80024ea <xTaskCreate>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <osDelay+0x16>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	e000      	b.n	80022c4 <osDelay+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fa55 	bl	8002774 <vTaskDelay>
  
  return osOK;
 80022ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f103 0208 	add.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0208 	add.w	r2, r3, #8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0208 	add.w	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002386:	d103      	bne.n	8002390 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e00c      	b.n	80023aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3308      	adds	r3, #8
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e002      	b.n	800239e <vListInsert+0x2e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d2f6      	bcs.n	8002398 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6892      	ldr	r2, [r2, #8]
 80023f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6852      	ldr	r2, [r2, #4]
 8002400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d103      	bne.n	8002414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1e5a      	subs	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002432:	b580      	push	{r7, lr}
 8002434:	b08e      	sub	sp, #56	; 0x38
 8002436:	af04      	add	r7, sp, #16
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002458:	bf00      	nop
 800245a:	e7fe      	b.n	800245a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <xTaskCreateStatic+0x46>
	__asm volatile
 8002462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	61fb      	str	r3, [r7, #28]
}
 8002474:	bf00      	nop
 8002476:	e7fe      	b.n	8002476 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002478:	23b4      	movs	r3, #180	; 0xb4
 800247a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2bb4      	cmp	r3, #180	; 0xb4
 8002480:	d00a      	beq.n	8002498 <xTaskCreateStatic+0x66>
	__asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	61bb      	str	r3, [r7, #24]
}
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01e      	beq.n	80024dc <xTaskCreateStatic+0xaa>
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024b6:	2300      	movs	r3, #0
 80024b8:	9303      	str	r3, [sp, #12]
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f850 	bl	8002574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024d6:	f000 f8e3 	bl	80026a0 <prvAddNewTaskToReadyList>
 80024da:	e001      	b.n	80024e0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024e0:	697b      	ldr	r3, [r7, #20]
	}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b08c      	sub	sp, #48	; 0x30
 80024ee:	af04      	add	r7, sp, #16
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fe96 	bl	8003230 <pvPortMalloc>
 8002504:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800250c:	20b4      	movs	r0, #180	; 0xb4
 800250e:	f000 fe8f 	bl	8003230 <pvPortMalloc>
 8002512:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
 8002520:	e005      	b.n	800252e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f000 ff48 	bl	80033b8 <vPortFree>
 8002528:	e001      	b.n	800252e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d017      	beq.n	8002564 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	2300      	movs	r3, #0
 8002540:	9303      	str	r3, [sp, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f80e 	bl	8002574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002558:	69f8      	ldr	r0, [r7, #28]
 800255a:	f000 f8a1 	bl	80026a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e002      	b.n	800256a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800256a:	69bb      	ldr	r3, [r7, #24]
	}
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800258c:	3b01      	subs	r3, #1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	617b      	str	r3, [r7, #20]
}
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	e012      	b.n	80025e8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	7819      	ldrb	r1, [r3, #0]
 80025ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	3334      	adds	r3, #52	; 0x34
 80025d2:	460a      	mov	r2, r1
 80025d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	d9e9      	bls.n	80025c2 <prvInitialiseNewTask+0x4e>
 80025ee:	e000      	b.n	80025f2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80025f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d901      	bls.n	8002604 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002600:	2306      	movs	r3, #6
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800260e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	2200      	movs	r2, #0
 8002614:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	3304      	adds	r3, #4
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fe79 	bl	8002312 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	3318      	adds	r3, #24
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fe74 	bl	8002312 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	f1c3 0207 	rsb	r2, r3, #7
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800263e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	2200      	movs	r2, #0
 8002644:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	2200      	movs	r2, #0
 800264c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	334c      	adds	r3, #76	; 0x4c
 8002654:	2260      	movs	r2, #96	; 0x60
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f000 ffe7 	bl	800362c <memset>
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <prvInitialiseNewTask+0x120>)
 8002662:	651a      	str	r2, [r3, #80]	; 0x50
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <prvInitialiseNewTask+0x124>)
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	4a0b      	ldr	r2, [pc, #44]	; (800269c <prvInitialiseNewTask+0x128>)
 800266e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	69b8      	ldr	r0, [r7, #24]
 8002676:	f000 fc29 	bl	8002ecc <pxPortInitialiseStack>
 800267a:	4602      	mov	r2, r0
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	08003868 	.word	0x08003868
 8002698:	08003888 	.word	0x08003888
 800269c:	08003848 	.word	0x08003848

080026a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026a8:	f000 fd00 	bl	80030ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <prvAddNewTaskToReadyList+0xb8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4a29      	ldr	r2, [pc, #164]	; (8002758 <prvAddNewTaskToReadyList+0xb8>)
 80026b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <prvAddNewTaskToReadyList+0xbc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026be:	4a27      	ldr	r2, [pc, #156]	; (800275c <prvAddNewTaskToReadyList+0xbc>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <prvAddNewTaskToReadyList+0xb8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d110      	bne.n	80026ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026cc:	f000 fad2 	bl	8002c74 <prvInitialiseTaskLists>
 80026d0:	e00d      	b.n	80026ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026d2:	4b23      	ldr	r3, [pc, #140]	; (8002760 <prvAddNewTaskToReadyList+0xc0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <prvAddNewTaskToReadyList+0xbc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d802      	bhi.n	80026ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026e8:	4a1c      	ldr	r2, [pc, #112]	; (800275c <prvAddNewTaskToReadyList+0xbc>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <prvAddNewTaskToReadyList+0xc4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <prvAddNewTaskToReadyList+0xc4>)
 80026f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <prvAddNewTaskToReadyList+0xc8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	4a18      	ldr	r2, [pc, #96]	; (8002768 <prvAddNewTaskToReadyList+0xc8>)
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <prvAddNewTaskToReadyList+0xcc>)
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f7ff fe02 	bl	800232a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002726:	f000 fcf1 	bl	800310c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <prvAddNewTaskToReadyList+0xc0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00e      	beq.n	8002750 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <prvAddNewTaskToReadyList+0xbc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	429a      	cmp	r2, r3
 800273e:	d207      	bcs.n	8002750 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <prvAddNewTaskToReadyList+0xd0>)
 8002742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000528 	.word	0x20000528
 800275c:	20000428 	.word	0x20000428
 8002760:	20000534 	.word	0x20000534
 8002764:	20000544 	.word	0x20000544
 8002768:	20000530 	.word	0x20000530
 800276c:	2000042c 	.word	0x2000042c
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d017      	beq.n	80027b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <vTaskDelay+0x60>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <vTaskDelay+0x30>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	60bb      	str	r3, [r7, #8]
}
 80027a0:	bf00      	nop
 80027a2:	e7fe      	b.n	80027a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80027a4:	f000 f884 	bl	80028b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fb28 	bl	8002e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027b0:	f000 f88c 	bl	80028cc <xTaskResumeAll>
 80027b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <vTaskDelay+0x64>)
 80027be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000550 	.word	0x20000550
 80027d8:	e000ed04 	.word	0xe000ed04

080027dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027ea:	463a      	mov	r2, r7
 80027ec:	1d39      	adds	r1, r7, #4
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fcac 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	9202      	str	r2, [sp, #8]
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2300      	movs	r3, #0
 8002808:	460a      	mov	r2, r1
 800280a:	4921      	ldr	r1, [pc, #132]	; (8002890 <vTaskStartScheduler+0xb4>)
 800280c:	4821      	ldr	r0, [pc, #132]	; (8002894 <vTaskStartScheduler+0xb8>)
 800280e:	f7ff fe10 	bl	8002432 <xTaskCreateStatic>
 8002812:	4603      	mov	r3, r0
 8002814:	4a20      	ldr	r2, [pc, #128]	; (8002898 <vTaskStartScheduler+0xbc>)
 8002816:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <vTaskStartScheduler+0xbc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002820:	2301      	movs	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e001      	b.n	800282a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d11b      	bne.n	8002868 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	613b      	str	r3, [r7, #16]
}
 8002842:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <vTaskStartScheduler+0xc0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	334c      	adds	r3, #76	; 0x4c
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <vTaskStartScheduler+0xc4>)
 800284c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <vTaskStartScheduler+0xc8>)
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <vTaskStartScheduler+0xcc>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <vTaskStartScheduler+0xd0>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002862:	f000 fbb1 	bl	8002fc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002866:	e00e      	b.n	8002886 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	d10a      	bne.n	8002886 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	60fb      	str	r3, [r7, #12]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <vTaskStartScheduler+0xa8>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	08003828 	.word	0x08003828
 8002894:	08002c45 	.word	0x08002c45
 8002898:	2000054c 	.word	0x2000054c
 800289c:	20000428 	.word	0x20000428
 80028a0:	20000010 	.word	0x20000010
 80028a4:	20000548 	.word	0x20000548
 80028a8:	20000534 	.word	0x20000534
 80028ac:	2000052c 	.word	0x2000052c

080028b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <vTaskSuspendAll+0x18>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <vTaskSuspendAll+0x18>)
 80028bc:	6013      	str	r3, [r2, #0]
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000550 	.word	0x20000550

080028cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <xTaskResumeAll+0x114>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	603b      	str	r3, [r7, #0]
}
 80028f4:	bf00      	nop
 80028f6:	e7fe      	b.n	80028f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028f8:	f000 fbd8 	bl	80030ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028fc:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <xTaskResumeAll+0x114>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <xTaskResumeAll+0x114>)
 8002904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <xTaskResumeAll+0x114>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d161      	bne.n	80029d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800290e:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <xTaskResumeAll+0x118>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d05d      	beq.n	80029d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002916:	e02e      	b.n	8002976 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002918:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <xTaskResumeAll+0x11c>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3318      	adds	r3, #24
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fd5b 	bl	80023e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3304      	adds	r3, #4
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fd56 	bl	80023e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	2201      	movs	r2, #1
 800293a:	409a      	lsls	r2, r3
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <xTaskResumeAll+0x120>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <xTaskResumeAll+0x120>)
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <xTaskResumeAll+0x124>)
 8002954:	441a      	add	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3304      	adds	r3, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f7ff fce4 	bl	800232a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <xTaskResumeAll+0x128>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	429a      	cmp	r2, r3
 800296e:	d302      	bcc.n	8002976 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <xTaskResumeAll+0x12c>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <xTaskResumeAll+0x11c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1cc      	bne.n	8002918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002984:	f000 fa18 	bl	8002db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002988:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <xTaskResumeAll+0x130>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002994:	f000 f836 	bl	8002a04 <xTaskIncrementTick>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <xTaskResumeAll+0x12c>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f1      	bne.n	8002994 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <xTaskResumeAll+0x130>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <xTaskResumeAll+0x12c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029be:	2301      	movs	r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <xTaskResumeAll+0x134>)
 80029c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029d2:	f000 fb9b 	bl	800310c <vPortExitCritical>

	return xAlreadyYielded;
 80029d6:	68bb      	ldr	r3, [r7, #8]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000550 	.word	0x20000550
 80029e4:	20000528 	.word	0x20000528
 80029e8:	200004e8 	.word	0x200004e8
 80029ec:	20000530 	.word	0x20000530
 80029f0:	2000042c 	.word	0x2000042c
 80029f4:	20000428 	.word	0x20000428
 80029f8:	2000053c 	.word	0x2000053c
 80029fc:	20000538 	.word	0x20000538
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a0e:	4b51      	ldr	r3, [pc, #324]	; (8002b54 <xTaskIncrementTick+0x150>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 808d 	bne.w	8002b32 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a18:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <xTaskIncrementTick+0x154>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a20:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <xTaskIncrementTick+0x154>)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d120      	bne.n	8002a6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a2c:	4b4b      	ldr	r3, [pc, #300]	; (8002b5c <xTaskIncrementTick+0x158>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <xTaskIncrementTick+0x48>
	__asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	603b      	str	r3, [r7, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	e7fe      	b.n	8002a4a <xTaskIncrementTick+0x46>
 8002a4c:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <xTaskIncrementTick+0x158>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <xTaskIncrementTick+0x15c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a41      	ldr	r2, [pc, #260]	; (8002b5c <xTaskIncrementTick+0x158>)
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4a41      	ldr	r2, [pc, #260]	; (8002b60 <xTaskIncrementTick+0x15c>)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <xTaskIncrementTick+0x160>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	4a3f      	ldr	r2, [pc, #252]	; (8002b64 <xTaskIncrementTick+0x160>)
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	f000 f9a5 	bl	8002db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a6e:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <xTaskIncrementTick+0x164>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d34d      	bcc.n	8002b14 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a78:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <xTaskIncrementTick+0x158>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <xTaskIncrementTick+0x82>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <xTaskIncrementTick+0x84>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <xTaskIncrementTick+0x164>)
 8002a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a92:	601a      	str	r2, [r3, #0]
					break;
 8002a94:	e03e      	b.n	8002b14 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <xTaskIncrementTick+0x158>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d203      	bcs.n	8002ab6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002aae:	4a2e      	ldr	r2, [pc, #184]	; (8002b68 <xTaskIncrementTick+0x164>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6013      	str	r3, [r2, #0]
						break;
 8002ab4:	e02e      	b.n	8002b14 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fc90 	bl	80023e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	3318      	adds	r3, #24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fc87 	bl	80023e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <xTaskIncrementTick+0x168>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <xTaskIncrementTick+0x168>)
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <xTaskIncrementTick+0x16c>)
 8002af2:	441a      	add	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7ff fc15 	bl	800232a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <xTaskIncrementTick+0x170>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3b4      	bcc.n	8002a78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b12:	e7b1      	b.n	8002a78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <xTaskIncrementTick+0x170>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	4915      	ldr	r1, [pc, #84]	; (8002b70 <xTaskIncrementTick+0x16c>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d907      	bls.n	8002b3c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e004      	b.n	8002b3c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <xTaskIncrementTick+0x174>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <xTaskIncrementTick+0x174>)
 8002b3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <xTaskIncrementTick+0x178>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002b44:	2301      	movs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002b48:	697b      	ldr	r3, [r7, #20]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000550 	.word	0x20000550
 8002b58:	2000052c 	.word	0x2000052c
 8002b5c:	200004e0 	.word	0x200004e0
 8002b60:	200004e4 	.word	0x200004e4
 8002b64:	20000540 	.word	0x20000540
 8002b68:	20000548 	.word	0x20000548
 8002b6c:	20000530 	.word	0x20000530
 8002b70:	2000042c 	.word	0x2000042c
 8002b74:	20000428 	.word	0x20000428
 8002b78:	20000538 	.word	0x20000538
 8002b7c:	2000053c 	.word	0x2000053c

08002b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <vTaskSwitchContext+0xac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <vTaskSwitchContext+0xb0>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b94:	e044      	b.n	8002c20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <vTaskSwitchContext+0xb0>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <vTaskSwitchContext+0xb4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	f1c3 031f 	rsb	r3, r3, #31
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	4921      	ldr	r1, [pc, #132]	; (8002c38 <vTaskSwitchContext+0xb8>)
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	607b      	str	r3, [r7, #4]
}
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <vTaskSwitchContext+0x5a>
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <vTaskSwitchContext+0xb8>)
 8002be8:	4413      	add	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d104      	bne.n	8002c0c <vTaskSwitchContext+0x8c>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <vTaskSwitchContext+0xbc>)
 8002c14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <vTaskSwitchContext+0xbc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	334c      	adds	r3, #76	; 0x4c
 8002c1c:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <vTaskSwitchContext+0xc0>)
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000550 	.word	0x20000550
 8002c30:	2000053c 	.word	0x2000053c
 8002c34:	20000530 	.word	0x20000530
 8002c38:	2000042c 	.word	0x2000042c
 8002c3c:	20000428 	.word	0x20000428
 8002c40:	20000010 	.word	0x20000010

08002c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c4c:	f000 f852 	bl	8002cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <prvIdleTask+0x28>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d9f9      	bls.n	8002c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <prvIdleTask+0x2c>)
 8002c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c68:	e7f0      	b.n	8002c4c <prvIdleTask+0x8>
 8002c6a:	bf00      	nop
 8002c6c:	2000042c 	.word	0x2000042c
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	e00c      	b.n	8002c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <prvInitialiseTaskLists+0x60>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fb20 	bl	80022d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3301      	adds	r3, #1
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d9ef      	bls.n	8002c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <prvInitialiseTaskLists+0x64>)
 8002ca2:	f7ff fb17 	bl	80022d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <prvInitialiseTaskLists+0x68>)
 8002ca8:	f7ff fb14 	bl	80022d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cac:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <prvInitialiseTaskLists+0x6c>)
 8002cae:	f7ff fb11 	bl	80022d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cb2:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <prvInitialiseTaskLists+0x70>)
 8002cb4:	f7ff fb0e 	bl	80022d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <prvInitialiseTaskLists+0x74>)
 8002cba:	f7ff fb0b 	bl	80022d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <prvInitialiseTaskLists+0x78>)
 8002cc0:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <prvInitialiseTaskLists+0x64>)
 8002cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <prvInitialiseTaskLists+0x7c>)
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <prvInitialiseTaskLists+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000042c 	.word	0x2000042c
 8002cd8:	200004b8 	.word	0x200004b8
 8002cdc:	200004cc 	.word	0x200004cc
 8002ce0:	200004e8 	.word	0x200004e8
 8002ce4:	200004fc 	.word	0x200004fc
 8002ce8:	20000514 	.word	0x20000514
 8002cec:	200004e0 	.word	0x200004e0
 8002cf0:	200004e4 	.word	0x200004e4

08002cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cfa:	e019      	b.n	8002d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cfc:	f000 f9d6 	bl	80030ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <prvCheckTasksWaitingTermination+0x50>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fb67 	bl	80023e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <prvCheckTasksWaitingTermination+0x54>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <prvCheckTasksWaitingTermination+0x54>)
 8002d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <prvCheckTasksWaitingTermination+0x58>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <prvCheckTasksWaitingTermination+0x58>)
 8002d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d26:	f000 f9f1 	bl	800310c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f810 	bl	8002d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <prvCheckTasksWaitingTermination+0x58>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e1      	bne.n	8002cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200004fc 	.word	0x200004fc
 8002d48:	20000528 	.word	0x20000528
 8002d4c:	20000510 	.word	0x20000510

08002d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	334c      	adds	r3, #76	; 0x4c
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fc7b 	bl	8003658 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fb21 	bl	80033b8 <vPortFree>
				vPortFree( pxTCB );
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fb1e 	bl	80033b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d7c:	e018      	b.n	8002db0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d103      	bne.n	8002d90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fb15 	bl	80033b8 <vPortFree>
	}
 8002d8e:	e00f      	b.n	8002db0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d00a      	beq.n	8002db0 <prvDeleteTCB+0x60>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60fb      	str	r3, [r7, #12]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <prvDeleteTCB+0x5e>
	}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <prvResetNextTaskUnblockTime+0x40>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <prvResetNextTaskUnblockTime+0x14>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <prvResetNextTaskUnblockTime+0x16>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <prvResetNextTaskUnblockTime+0x44>)
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002dda:	e008      	b.n	8002dee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <prvResetNextTaskUnblockTime+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <prvResetNextTaskUnblockTime+0x44>)
 8002dec:	6013      	str	r3, [r2, #0]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	200004e0 	.word	0x200004e0
 8002dfc:	20000548 	.word	0x20000548

08002e00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fae2 	bl	80023e0 <uxListRemove>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2201      	movs	r2, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4013      	ands	r3, r2
 8002e36:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d10a      	bne.n	8002e58 <prvAddCurrentTaskToDelayedList+0x58>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	481a      	ldr	r0, [pc, #104]	; (8002ebc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e52:	f7ff fa6a 	bl	800232a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e56:	e026      	b.n	8002ea6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d209      	bcs.n	8002e84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f7ff fa77 	bl	8002370 <vListInsert>
}
 8002e82:	e010      	b.n	8002ea6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f7ff fa6d 	bl	8002370 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d202      	bcs.n	8002ea6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6013      	str	r3, [r2, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000052c 	.word	0x2000052c
 8002eb4:	20000428 	.word	0x20000428
 8002eb8:	20000530 	.word	0x20000530
 8002ebc:	20000514 	.word	0x20000514
 8002ec0:	200004e4 	.word	0x200004e4
 8002ec4:	200004e0 	.word	0x200004e0
 8002ec8:	20000548 	.word	0x20000548

08002ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b04      	subs	r3, #4
 8002edc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3b04      	subs	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f023 0201 	bic.w	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b04      	subs	r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002efc:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <pxPortInitialiseStack+0x54>)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b14      	subs	r3, #20
 8002f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3b20      	subs	r3, #32
 8002f12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002f14:	68fb      	ldr	r3, [r7, #12]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	08002f25 	.word	0x08002f25

08002f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <prvTaskExitError+0x54>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d00a      	beq.n	8002f4e <prvTaskExitError+0x2a>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	60fb      	str	r3, [r7, #12]
}
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <prvTaskExitError+0x28>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	60bb      	str	r3, [r7, #8]
}
 8002f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f62:	bf00      	nop
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0fc      	beq.n	8002f64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	2000000c 	.word	0x2000000c
 8002f7c:	00000000 	.word	0x00000000

08002f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <pxCurrentTCBConst2>)
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	6808      	ldr	r0, [r1, #0]
 8002f86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f8a:	f380 8809 	msr	PSP, r0
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f380 8811 	msr	BASEPRI, r0
 8002f9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002f9e:	4770      	bx	lr

08002fa0 <pxCurrentTCBConst2>:
 8002fa0:	20000428 	.word	0x20000428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop

08002fa8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002fa8:	4806      	ldr	r0, [pc, #24]	; (8002fc4 <prvPortStartFirstTask+0x1c>)
 8002faa:	6800      	ldr	r0, [r0, #0]
 8002fac:	6800      	ldr	r0, [r0, #0]
 8002fae:	f380 8808 	msr	MSP, r0
 8002fb2:	b662      	cpsie	i
 8002fb4:	b661      	cpsie	f
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	df00      	svc	0
 8002fc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002fc2:	bf00      	nop
 8002fc4:	e000ed08 	.word	0xe000ed08

08002fc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <xPortStartScheduler+0xd0>)
 8002fd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <xPortStartScheduler+0xd4>)
 8002ff4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <xPortStartScheduler+0xd8>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffc:	e009      	b.n	8003012 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <xPortStartScheduler+0xd8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <xPortStartScheduler+0xd8>)
 8003006:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d0ef      	beq.n	8002ffe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <xPortStartScheduler+0xd8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00a      	beq.n	8003040 <xPortStartScheduler+0x78>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60bb      	str	r3, [r7, #8]
}
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <xPortStartScheduler+0xd8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <xPortStartScheduler+0xd8>)
 8003048:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <xPortStartScheduler+0xd8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <xPortStartScheduler+0xd8>)
 8003054:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <xPortStartScheduler+0xdc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <xPortStartScheduler+0xdc>)
 8003064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <xPortStartScheduler+0xdc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <xPortStartScheduler+0xdc>)
 8003070:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003074:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003076:	f000 f8b9 	bl	80031ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <xPortStartScheduler+0xe0>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003080:	f7ff ff92 	bl	8002fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003084:	f7ff fd7c 	bl	8002b80 <vTaskSwitchContext>
	prvTaskExitError();
 8003088:	f7ff ff4c 	bl	8002f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	e000e400 	.word	0xe000e400
 800309c:	20000554 	.word	0x20000554
 80030a0:	20000558 	.word	0x20000558
 80030a4:	e000ed20 	.word	0xe000ed20
 80030a8:	2000000c 	.word	0x2000000c

080030ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
	__asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	607b      	str	r3, [r7, #4]
}
 80030c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <vPortEnterCritical+0x58>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3301      	adds	r3, #1
 80030cc:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <vPortEnterCritical+0x58>)
 80030ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <vPortEnterCritical+0x58>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10f      	bne.n	80030f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <vPortEnterCritical+0x5c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	603b      	str	r3, [r7, #0]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <vPortEnterCritical+0x4a>
	}
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <vPortExitCritical+0x4c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <vPortExitCritical+0x24>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <vPortExitCritical+0x4c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3b01      	subs	r3, #1
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <vPortExitCritical+0x4c>)
 8003138:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <vPortExitCritical+0x4c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <vPortExitCritical+0x42>
 8003142:	2300      	movs	r3, #0
 8003144:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800314c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	2000000c 	.word	0x2000000c
 800315c:	00000000 	.word	0x00000000

08003160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003160:	f3ef 8009 	mrs	r0, PSP
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <pxCurrentTCBConst>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003170:	6010      	str	r0, [r2, #0]
 8003172:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003176:	f04f 0050 	mov.w	r0, #80	; 0x50
 800317a:	f380 8811 	msr	BASEPRI, r0
 800317e:	f7ff fcff 	bl	8002b80 <vTaskSwitchContext>
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f380 8811 	msr	BASEPRI, r0
 800318a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	6808      	ldr	r0, [r1, #0]
 8003192:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003196:	f380 8809 	msr	PSP, r0
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	4770      	bx	lr

080031a0 <pxCurrentTCBConst>:
 80031a0:	20000428 	.word	0x20000428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop

080031a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	607b      	str	r3, [r7, #4]
}
 80031c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031c2:	f7ff fc1f 	bl	8002a04 <xTaskIncrementTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <SysTick_Handler+0x40>)
 80031ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	2300      	movs	r3, #0
 80031d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f383 8811 	msr	BASEPRI, r3
}
 80031de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	e000ed04 	.word	0xe000ed04

080031ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <vPortSetupTimerInterrupt+0x30>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <vPortSetupTimerInterrupt+0x34>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <vPortSetupTimerInterrupt+0x38>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <vPortSetupTimerInterrupt+0x3c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <vPortSetupTimerInterrupt+0x40>)
 800320a:	3b01      	subs	r3, #1
 800320c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <vPortSetupTimerInterrupt+0x30>)
 8003210:	2207      	movs	r2, #7
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	e000e010 	.word	0xe000e010
 8003220:	e000e018 	.word	0xe000e018
 8003224:	20000000 	.word	0x20000000
 8003228:	10624dd3 	.word	0x10624dd3
 800322c:	e000e014 	.word	0xe000e014

08003230 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800323c:	f7ff fb38 	bl	80028b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003240:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <pvPortMalloc+0x174>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003248:	f000 f910 	bl	800346c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800324c:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <pvPortMalloc+0x178>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 808e 	bne.w	8003376 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01d      	beq.n	800329c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003260:	2208      	movs	r2, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	2b00      	cmp	r3, #0
 8003270:	d014      	beq.n	800329c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f023 0307 	bic.w	r3, r3, #7
 8003278:	3308      	adds	r3, #8
 800327a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <pvPortMalloc+0x6c>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	617b      	str	r3, [r7, #20]
}
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d069      	beq.n	8003376 <pvPortMalloc+0x146>
 80032a2:	4b42      	ldr	r3, [pc, #264]	; (80033ac <pvPortMalloc+0x17c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d864      	bhi.n	8003376 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80032ac:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <pvPortMalloc+0x180>)
 80032ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80032b0:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <pvPortMalloc+0x180>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032b6:	e004      	b.n	80032c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d903      	bls.n	80032d4 <pvPortMalloc+0xa4>
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f1      	bne.n	80032b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032d4:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <pvPortMalloc+0x174>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	429a      	cmp	r2, r3
 80032dc:	d04b      	beq.n	8003376 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2208      	movs	r2, #8
 80032e4:	4413      	add	r3, r2
 80032e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	2308      	movs	r3, #8
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d91f      	bls.n	8003340 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <pvPortMalloc+0xf8>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	613b      	str	r3, [r7, #16]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800333a:	69b8      	ldr	r0, [r7, #24]
 800333c:	f000 f8f8 	bl	8003530 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <pvPortMalloc+0x17c>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <pvPortMalloc+0x17c>)
 800334c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <pvPortMalloc+0x17c>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <pvPortMalloc+0x184>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d203      	bcs.n	8003362 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800335a:	4b14      	ldr	r3, [pc, #80]	; (80033ac <pvPortMalloc+0x17c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <pvPortMalloc+0x184>)
 8003360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <pvPortMalloc+0x178>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	431a      	orrs	r2, r3
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003376:	f7ff faa9 	bl	80028cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <pvPortMalloc+0x16a>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <pvPortMalloc+0x168>
	return pvReturn;
 800339a:	69fb      	ldr	r3, [r7, #28]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20001164 	.word	0x20001164
 80033a8:	20001170 	.word	0x20001170
 80033ac:	20001168 	.word	0x20001168
 80033b0:	2000115c 	.word	0x2000115c
 80033b4:	2000116c 	.word	0x2000116c

080033b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d048      	beq.n	800345c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033ca:	2308      	movs	r3, #8
 80033cc:	425b      	negs	r3, r3
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4413      	add	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <vPortFree+0xac>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <vPortFree+0x44>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60fb      	str	r3, [r7, #12]
}
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <vPortFree+0x62>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	60bb      	str	r3, [r7, #8]
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <vPortFree+0xac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d019      	beq.n	800345c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d115      	bne.n	800345c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <vPortFree+0xac>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003440:	f7ff fa36 	bl	80028b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <vPortFree+0xb0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4413      	add	r3, r2
 800344e:	4a06      	ldr	r2, [pc, #24]	; (8003468 <vPortFree+0xb0>)
 8003450:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003452:	6938      	ldr	r0, [r7, #16]
 8003454:	f000 f86c 	bl	8003530 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003458:	f7ff fa38 	bl	80028cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20001170 	.word	0x20001170
 8003468:	20001168 	.word	0x20001168

0800346c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003476:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <prvHeapInit+0xac>)
 800347a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3307      	adds	r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0307 	bic.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <prvHeapInit+0xac>)
 800349c:	4413      	add	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034a4:	4a1d      	ldr	r2, [pc, #116]	; (800351c <prvHeapInit+0xb0>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <prvHeapInit+0xb0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034b8:	2208      	movs	r2, #8
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <prvHeapInit+0xb4>)
 80034cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <prvHeapInit+0xb4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2200      	movs	r2, #0
 80034d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <prvHeapInit+0xb4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	1ad2      	subs	r2, r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <prvHeapInit+0xb4>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <prvHeapInit+0xb8>)
 80034fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a09      	ldr	r2, [pc, #36]	; (8003528 <prvHeapInit+0xbc>)
 8003502:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <prvHeapInit+0xc0>)
 8003506:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	2000055c 	.word	0x2000055c
 800351c:	2000115c 	.word	0x2000115c
 8003520:	20001164 	.word	0x20001164
 8003524:	2000116c 	.word	0x2000116c
 8003528:	20001168 	.word	0x20001168
 800352c:	20001170 	.word	0x20001170

08003530 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <prvInsertBlockIntoFreeList+0xa8>)
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e002      	b.n	8003544 <prvInsertBlockIntoFreeList+0x14>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d8f7      	bhi.n	800353e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4413      	add	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d108      	bne.n	8003572 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	441a      	add	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	441a      	add	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d118      	bne.n	80035b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <prvInsertBlockIntoFreeList+0xac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d00d      	beq.n	80035ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e008      	b.n	80035c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <prvInsertBlockIntoFreeList+0xac>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e003      	b.n	80035c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d002      	beq.n	80035ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	2000115c 	.word	0x2000115c
 80035dc:	20001164 	.word	0x20001164

080035e0 <__libc_init_array>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	2600      	movs	r6, #0
 80035e4:	4d0c      	ldr	r5, [pc, #48]	; (8003618 <__libc_init_array+0x38>)
 80035e6:	4c0d      	ldr	r4, [pc, #52]	; (800361c <__libc_init_array+0x3c>)
 80035e8:	1b64      	subs	r4, r4, r5
 80035ea:	10a4      	asrs	r4, r4, #2
 80035ec:	42a6      	cmp	r6, r4
 80035ee:	d109      	bne.n	8003604 <__libc_init_array+0x24>
 80035f0:	f000 f8e2 	bl	80037b8 <_init>
 80035f4:	2600      	movs	r6, #0
 80035f6:	4d0a      	ldr	r5, [pc, #40]	; (8003620 <__libc_init_array+0x40>)
 80035f8:	4c0a      	ldr	r4, [pc, #40]	; (8003624 <__libc_init_array+0x44>)
 80035fa:	1b64      	subs	r4, r4, r5
 80035fc:	10a4      	asrs	r4, r4, #2
 80035fe:	42a6      	cmp	r6, r4
 8003600:	d105      	bne.n	800360e <__libc_init_array+0x2e>
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	f855 3b04 	ldr.w	r3, [r5], #4
 8003608:	4798      	blx	r3
 800360a:	3601      	adds	r6, #1
 800360c:	e7ee      	b.n	80035ec <__libc_init_array+0xc>
 800360e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003612:	4798      	blx	r3
 8003614:	3601      	adds	r6, #1
 8003616:	e7f2      	b.n	80035fe <__libc_init_array+0x1e>
 8003618:	080038a8 	.word	0x080038a8
 800361c:	080038a8 	.word	0x080038a8
 8003620:	080038a8 	.word	0x080038a8
 8003624:	080038ac 	.word	0x080038ac

08003628 <__retarget_lock_acquire_recursive>:
 8003628:	4770      	bx	lr

0800362a <__retarget_lock_release_recursive>:
 800362a:	4770      	bx	lr

0800362c <memset>:
 800362c:	4603      	mov	r3, r0
 800362e:	4402      	add	r2, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	f803 1b01 	strb.w	r1, [r3], #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <cleanup_glue>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	460c      	mov	r4, r1
 8003640:	6809      	ldr	r1, [r1, #0]
 8003642:	4605      	mov	r5, r0
 8003644:	b109      	cbz	r1, 800364a <cleanup_glue+0xe>
 8003646:	f7ff fff9 	bl	800363c <cleanup_glue>
 800364a:	4621      	mov	r1, r4
 800364c:	4628      	mov	r0, r5
 800364e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003652:	f000 b869 	b.w	8003728 <_free_r>
	...

08003658 <_reclaim_reent>:
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <_reclaim_reent+0xb4>)
 800365a:	b570      	push	{r4, r5, r6, lr}
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4604      	mov	r4, r0
 8003660:	4283      	cmp	r3, r0
 8003662:	d051      	beq.n	8003708 <_reclaim_reent+0xb0>
 8003664:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003666:	b143      	cbz	r3, 800367a <_reclaim_reent+0x22>
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d14a      	bne.n	8003704 <_reclaim_reent+0xac>
 800366e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	b111      	cbz	r1, 800367a <_reclaim_reent+0x22>
 8003674:	4620      	mov	r0, r4
 8003676:	f000 f857 	bl	8003728 <_free_r>
 800367a:	6961      	ldr	r1, [r4, #20]
 800367c:	b111      	cbz	r1, 8003684 <_reclaim_reent+0x2c>
 800367e:	4620      	mov	r0, r4
 8003680:	f000 f852 	bl	8003728 <_free_r>
 8003684:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003686:	b111      	cbz	r1, 800368e <_reclaim_reent+0x36>
 8003688:	4620      	mov	r0, r4
 800368a:	f000 f84d 	bl	8003728 <_free_r>
 800368e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003690:	b111      	cbz	r1, 8003698 <_reclaim_reent+0x40>
 8003692:	4620      	mov	r0, r4
 8003694:	f000 f848 	bl	8003728 <_free_r>
 8003698:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800369a:	b111      	cbz	r1, 80036a2 <_reclaim_reent+0x4a>
 800369c:	4620      	mov	r0, r4
 800369e:	f000 f843 	bl	8003728 <_free_r>
 80036a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80036a4:	b111      	cbz	r1, 80036ac <_reclaim_reent+0x54>
 80036a6:	4620      	mov	r0, r4
 80036a8:	f000 f83e 	bl	8003728 <_free_r>
 80036ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80036ae:	b111      	cbz	r1, 80036b6 <_reclaim_reent+0x5e>
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 f839 	bl	8003728 <_free_r>
 80036b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80036b8:	b111      	cbz	r1, 80036c0 <_reclaim_reent+0x68>
 80036ba:	4620      	mov	r0, r4
 80036bc:	f000 f834 	bl	8003728 <_free_r>
 80036c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c2:	b111      	cbz	r1, 80036ca <_reclaim_reent+0x72>
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 f82f 	bl	8003728 <_free_r>
 80036ca:	69a3      	ldr	r3, [r4, #24]
 80036cc:	b1e3      	cbz	r3, 8003708 <_reclaim_reent+0xb0>
 80036ce:	4620      	mov	r0, r4
 80036d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036d2:	4798      	blx	r3
 80036d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80036d6:	b1b9      	cbz	r1, 8003708 <_reclaim_reent+0xb0>
 80036d8:	4620      	mov	r0, r4
 80036da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036de:	f7ff bfad 	b.w	800363c <cleanup_glue>
 80036e2:	5949      	ldr	r1, [r1, r5]
 80036e4:	b941      	cbnz	r1, 80036f8 <_reclaim_reent+0xa0>
 80036e6:	3504      	adds	r5, #4
 80036e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ea:	2d80      	cmp	r5, #128	; 0x80
 80036ec:	68d9      	ldr	r1, [r3, #12]
 80036ee:	d1f8      	bne.n	80036e2 <_reclaim_reent+0x8a>
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 f819 	bl	8003728 <_free_r>
 80036f6:	e7ba      	b.n	800366e <_reclaim_reent+0x16>
 80036f8:	680e      	ldr	r6, [r1, #0]
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 f814 	bl	8003728 <_free_r>
 8003700:	4631      	mov	r1, r6
 8003702:	e7ef      	b.n	80036e4 <_reclaim_reent+0x8c>
 8003704:	2500      	movs	r5, #0
 8003706:	e7ef      	b.n	80036e8 <_reclaim_reent+0x90>
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	bf00      	nop
 800370c:	20000010 	.word	0x20000010

08003710 <__malloc_lock>:
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <__malloc_lock+0x8>)
 8003712:	f7ff bf89 	b.w	8003628 <__retarget_lock_acquire_recursive>
 8003716:	bf00      	nop
 8003718:	20001174 	.word	0x20001174

0800371c <__malloc_unlock>:
 800371c:	4801      	ldr	r0, [pc, #4]	; (8003724 <__malloc_unlock+0x8>)
 800371e:	f7ff bf84 	b.w	800362a <__retarget_lock_release_recursive>
 8003722:	bf00      	nop
 8003724:	20001174 	.word	0x20001174

08003728 <_free_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	4605      	mov	r5, r0
 800372c:	2900      	cmp	r1, #0
 800372e:	d040      	beq.n	80037b2 <_free_r+0x8a>
 8003730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003734:	1f0c      	subs	r4, r1, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	bfb8      	it	lt
 800373a:	18e4      	addlt	r4, r4, r3
 800373c:	f7ff ffe8 	bl	8003710 <__malloc_lock>
 8003740:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <_free_r+0x8c>)
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	b933      	cbnz	r3, 8003754 <_free_r+0x2c>
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	6014      	str	r4, [r2, #0]
 800374a:	4628      	mov	r0, r5
 800374c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003750:	f7ff bfe4 	b.w	800371c <__malloc_unlock>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d908      	bls.n	800376a <_free_r+0x42>
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	1821      	adds	r1, r4, r0
 800375c:	428b      	cmp	r3, r1
 800375e:	bf01      	itttt	eq
 8003760:	6819      	ldreq	r1, [r3, #0]
 8003762:	685b      	ldreq	r3, [r3, #4]
 8003764:	1809      	addeq	r1, r1, r0
 8003766:	6021      	streq	r1, [r4, #0]
 8003768:	e7ed      	b.n	8003746 <_free_r+0x1e>
 800376a:	461a      	mov	r2, r3
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b10b      	cbz	r3, 8003774 <_free_r+0x4c>
 8003770:	42a3      	cmp	r3, r4
 8003772:	d9fa      	bls.n	800376a <_free_r+0x42>
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	1850      	adds	r0, r2, r1
 8003778:	42a0      	cmp	r0, r4
 800377a:	d10b      	bne.n	8003794 <_free_r+0x6c>
 800377c:	6820      	ldr	r0, [r4, #0]
 800377e:	4401      	add	r1, r0
 8003780:	1850      	adds	r0, r2, r1
 8003782:	4283      	cmp	r3, r0
 8003784:	6011      	str	r1, [r2, #0]
 8003786:	d1e0      	bne.n	800374a <_free_r+0x22>
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4401      	add	r1, r0
 800378e:	6011      	str	r1, [r2, #0]
 8003790:	6053      	str	r3, [r2, #4]
 8003792:	e7da      	b.n	800374a <_free_r+0x22>
 8003794:	d902      	bls.n	800379c <_free_r+0x74>
 8003796:	230c      	movs	r3, #12
 8003798:	602b      	str	r3, [r5, #0]
 800379a:	e7d6      	b.n	800374a <_free_r+0x22>
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	1821      	adds	r1, r4, r0
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf01      	itttt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	1809      	addeq	r1, r1, r0
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	6063      	str	r3, [r4, #4]
 80037ae:	6054      	str	r4, [r2, #4]
 80037b0:	e7cb      	b.n	800374a <_free_r+0x22>
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	20001178 	.word	0x20001178

080037b8 <_init>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr

080037c4 <_fini>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr
