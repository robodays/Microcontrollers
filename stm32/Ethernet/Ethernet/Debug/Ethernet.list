
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08004d40  08004d40  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d40  08004d40  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200000b8  08004e00  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004e00  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000905f  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dde  00000000  00000000  00029140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016368  00000000  00000000  0002c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab99  00000000  00000000  00042788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b1d  00000000  00000000  0004d321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5e3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  000d5e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b6c 	.word	0x08004b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	08004b6c 	.word	0x08004b6c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <W5500_Select>:
                            .gw = {192, 168, 88, 1},
                            .dns = {0, 0, 0, 0},
                            .dhcp = NETINFO_STATIC };

void W5500_Select(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2104      	movs	r1, #4
 8000164:	4802      	ldr	r0, [pc, #8]	; (8000170 <W5500_Select+0x14>)
 8000166:	f002 f86f 	bl	8002248 <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010c00 	.word	0x40010c00

08000174 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2104      	movs	r1, #4
 800017c:	4802      	ldr	r0, [pc, #8]	; (8000188 <W5500_Unselect+0x14>)
 800017e:	f002 f863 	bl	8002248 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010c00 	.word	0x40010c00

0800018c <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	460b      	mov	r3, r1
 8000196:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8000198:	887a      	ldrh	r2, [r7, #2]
 800019a:	f04f 33ff 	mov.w	r3, #4294967295
 800019e:	6879      	ldr	r1, [r7, #4]
 80001a0:	4803      	ldr	r0, [pc, #12]	; (80001b0 <W5500_ReadBuff+0x24>)
 80001a2:	f002 fe43 	bl	8002e2c <HAL_SPI_Receive>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200000d4 	.word	0x200000d4

080001b4 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 80001c0:	887a      	ldrh	r2, [r7, #2]
 80001c2:	f04f 33ff 	mov.w	r3, #4294967295
 80001c6:	6879      	ldr	r1, [r7, #4]
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <W5500_WriteBuff+0x24>)
 80001ca:	f002 fcf3 	bl	8002bb4 <HAL_SPI_Transmit>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	200000d4 	.word	0x200000d4

080001dc <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80001e2:	1dfb      	adds	r3, r7, #7
 80001e4:	2101      	movs	r1, #1
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffd0 	bl	800018c <W5500_ReadBuff>
    return byte;
 80001ec:	79fb      	ldrb	r3, [r7, #7]
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}

080001f6 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af00      	add	r7, sp, #0
 80001fc:	4603      	mov	r3, r0
 80001fe:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8000200:	1dfb      	adds	r3, r7, #7
 8000202:	2101      	movs	r1, #1
 8000204:	4618      	mov	r0, r3
 8000206:	f7ff ffd5 	bl	80001b4 <W5500_WriteBuff>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f001 fd27 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f8e9 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000222:	f000 f98d 	bl	8000540 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000226:	f000 f92b 	bl	8000480 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800022a:	f000 f95f 	bl	80004ec <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2101      	movs	r1, #1
 8000232:	485a      	ldr	r0, [pc, #360]	; (800039c <main+0x188>)
 8000234:	f002 f808 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f001 fd79 	bl	8001d30 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2101      	movs	r1, #1
 8000242:	4856      	ldr	r0, [pc, #344]	; (800039c <main+0x188>)
 8000244:	f002 f800 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024c:	f001 fd70 	bl	8001d30 <HAL_Delay>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8000250:	4953      	ldr	r1, [pc, #332]	; (80003a0 <main+0x18c>)
 8000252:	4854      	ldr	r0, [pc, #336]	; (80003a4 <main+0x190>)
 8000254:	f001 fa64 	bl	8001720 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8000258:	4953      	ldr	r1, [pc, #332]	; (80003a8 <main+0x194>)
 800025a:	4854      	ldr	r0, [pc, #336]	; (80003ac <main+0x198>)
 800025c:	f001 fa84 	bl	8001768 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000260:	4953      	ldr	r1, [pc, #332]	; (80003b0 <main+0x19c>)
 8000262:	4854      	ldr	r0, [pc, #336]	; (80003b4 <main+0x1a0>)
 8000264:	f001 faac 	bl	80017c0 <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 8000268:	4a53      	ldr	r2, [pc, #332]	; (80003b8 <main+0x1a4>)
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000272:	e883 0003 	stmia.w	r3, {r0, r1}

	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8000276:	f107 0208 	add.w	r2, r7, #8
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fb53 	bl	800192c <wizchip_init>

	wizchip_setnetinfo(&gWIZNETINFO);
 8000286:	484d      	ldr	r0, [pc, #308]	; (80003bc <main+0x1a8>)
 8000288:	f001 fbdc 	bl	8001a44 <wizchip_setnetinfo>

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 800028c:	494b      	ldr	r1, [pc, #300]	; (80003bc <main+0x1a8>)
 800028e:	2000      	movs	r0, #0
 8000290:	f001 fac2 	bl	8001818 <ctlnetwork>
	HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f001 fd4a 	bl	8001d30 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Creating socket...\r\n");
 800029c:	4848      	ldr	r0, [pc, #288]	; (80003c0 <main+0x1ac>)
 800029e:	f003 fb05 	bl	80038ac <puts>
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0);
 80002a2:	2300      	movs	r3, #0
 80002a4:	2250      	movs	r2, #80	; 0x50
 80002a6:	2101      	movs	r1, #1
 80002a8:	2000      	movs	r0, #0
 80002aa:	f000 f999 	bl	80005e0 <socket>
 80002ae:	4603      	mov	r3, r0
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b44      	ldr	r3, [pc, #272]	; (80003c4 <main+0x1b0>)
 80002b4:	701a      	strb	r2, [r3, #0]
		if (stat != HTTP_SOCKET)
 80002b6:	4b43      	ldr	r3, [pc, #268]	; (80003c4 <main+0x1b0>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d006      	beq.n	80002cc <main+0xb8>
			printf("socket() failed, code = %d\r\n", stat);
 80002be:	4b41      	ldr	r3, [pc, #260]	; (80003c4 <main+0x1b0>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4619      	mov	r1, r3
 80002c4:	4840      	ldr	r0, [pc, #256]	; (80003c8 <main+0x1b4>)
 80002c6:	f003 fa6b 	bl	80037a0 <iprintf>
 80002ca:	e002      	b.n	80002d2 <main+0xbe>
		else
			printf("Socket created, connecting...\r\n");
 80002cc:	483f      	ldr	r0, [pc, #252]	; (80003cc <main+0x1b8>)
 80002ce:	f003 faed 	bl	80038ac <puts>

		stat = listen(HTTP_SOCKET);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 fb08 	bl	80008e8 <listen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b39      	ldr	r3, [pc, #228]	; (80003c4 <main+0x1b0>)
 80002de:	701a      	strb	r2, [r3, #0]
		if (stat != SOCK_OK)
 80002e0:	4b38      	ldr	r3, [pc, #224]	; (80003c4 <main+0x1b0>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d006      	beq.n	80002f6 <main+0xe2>
			printf("listen() failed, code = %d\r\n", stat);
 80002e8:	4b36      	ldr	r3, [pc, #216]	; (80003c4 <main+0x1b0>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4619      	mov	r1, r3
 80002ee:	4838      	ldr	r0, [pc, #224]	; (80003d0 <main+0x1bc>)
 80002f0:	f003 fa56 	bl	80037a0 <iprintf>
 80002f4:	e006      	b.n	8000304 <main+0xf0>
		else
			printf("listen() OK\r\n");
 80002f6:	4837      	ldr	r0, [pc, #220]	; (80003d4 <main+0x1c0>)
 80002f8:	f003 fad8 	bl	80038ac <puts>

		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 80002fc:	e002      	b.n	8000304 <main+0xf0>
			HAL_Delay(2);
 80002fe:	2002      	movs	r0, #2
 8000300:	f001 fd16 	bl	8001d30 <HAL_Delay>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 8000304:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000308:	f000 ff64 	bl	80011d4 <WIZCHIP_READ>
 800030c:	4603      	mov	r3, r0
 800030e:	2b14      	cmp	r3, #20
 8000310:	d0f5      	beq.n	80002fe <main+0xea>
		}

		printf("Input connection\r\n");
 8000312:	4831      	ldr	r0, [pc, #196]	; (80003d8 <main+0x1c4>)
 8000314:	f003 faca 	bl	80038ac <puts>
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
 8000318:	f44f 7042 	mov.w	r0, #776	; 0x308
 800031c:	f000 ff5a 	bl	80011d4 <WIZCHIP_READ>
 8000320:	4603      	mov	r3, r0
 8000322:	2b17      	cmp	r3, #23
 8000324:	d002      	beq.n	800032c <main+0x118>
			printf("Error socket status\r\n");
 8000326:	482d      	ldr	r0, [pc, #180]	; (80003dc <main+0x1c8>)
 8000328:	f003 fac0 	bl	80038ac <puts>

		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	461a      	mov	r2, r3
 8000330:	2104      	movs	r1, #4
 8000332:	2000      	movs	r0, #0
 8000334:	f000 fca2 	bl	8000c7c <getsockopt>
		printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);
 8000338:	793b      	ldrb	r3, [r7, #4]
 800033a:	4619      	mov	r1, r3
 800033c:	797b      	ldrb	r3, [r7, #5]
 800033e:	461a      	mov	r2, r3
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	4618      	mov	r0, r3
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	4603      	mov	r3, r0
 800034a:	4825      	ldr	r0, [pc, #148]	; (80003e0 <main+0x1cc>)
 800034c:	f003 fa28 	bl	80037a0 <iprintf>

		sprintf(Message, "input connection nr - %d", reqnr);
 8000350:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <main+0x1d0>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	4924      	ldr	r1, [pc, #144]	; (80003e8 <main+0x1d4>)
 8000358:	4824      	ldr	r0, [pc, #144]	; (80003ec <main+0x1d8>)
 800035a:	f003 faaf 	bl	80038bc <siprintf>

		send(0, (uint8_t*) Message, strlen(Message));
 800035e:	4823      	ldr	r0, [pc, #140]	; (80003ec <main+0x1d8>)
 8000360:	f7ff fef4 	bl	800014c <strlen>
 8000364:	4603      	mov	r3, r0
 8000366:	b29b      	uxth	r3, r3
 8000368:	461a      	mov	r2, r3
 800036a:	4920      	ldr	r1, [pc, #128]	; (80003ec <main+0x1d8>)
 800036c:	2000      	movs	r0, #0
 800036e:	f000 fb8b 	bl	8000a88 <send>

		disconnect(HTTP_SOCKET);
 8000372:	2000      	movs	r0, #0
 8000374:	f000 fb12 	bl	800099c <disconnect>

		printf("Closing socket.\r\n");
 8000378:	481d      	ldr	r0, [pc, #116]	; (80003f0 <main+0x1dc>)
 800037a:	f003 fa97 	bl	80038ac <puts>
		close(HTTP_SOCKET);
 800037e:	2000      	movs	r0, #0
 8000380:	f000 fa44 	bl	800080c <close>

		HAL_Delay(1000);
 8000384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000388:	f001 fcd2 	bl	8001d30 <HAL_Delay>
		reqnr++;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <main+0x1d0>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	3301      	adds	r3, #1
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <main+0x1d0>)
 8000396:	701a      	strb	r2, [r3, #0]
  {
 8000398:	e780      	b.n	800029c <main+0x88>
 800039a:	bf00      	nop
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	08000175 	.word	0x08000175
 80003a4:	0800015d 	.word	0x0800015d
 80003a8:	080001f7 	.word	0x080001f7
 80003ac:	080001dd 	.word	0x080001dd
 80003b0:	080001b5 	.word	0x080001b5
 80003b4:	0800018d 	.word	0x0800018d
 80003b8:	08004c78 	.word	0x08004c78
 80003bc:	20000000 	.word	0x20000000
 80003c0:	08004b84 	.word	0x08004b84
 80003c4:	20000170 	.word	0x20000170
 80003c8:	08004b98 	.word	0x08004b98
 80003cc:	08004bb8 	.word	0x08004bb8
 80003d0:	08004bd8 	.word	0x08004bd8
 80003d4:	08004bf8 	.word	0x08004bf8
 80003d8:	08004c08 	.word	0x08004c08
 80003dc:	08004c1c 	.word	0x08004c1c
 80003e0:	08004c34 	.word	0x08004c34
 80003e4:	20000171 	.word	0x20000171
 80003e8:	08004c48 	.word	0x08004c48
 80003ec:	20000174 	.word	0x20000174
 80003f0:	08004c64 	.word	0x08004c64

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b090      	sub	sp, #64	; 0x40
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0318 	add.w	r3, r7, #24
 80003fe:	2228      	movs	r2, #40	; 0x28
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f003 f9c4 	bl	8003790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000416:	2301      	movs	r3, #1
 8000418:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000424:	2301      	movs	r3, #1
 8000426:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000428:	2302      	movs	r3, #2
 800042a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000432:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000436:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4618      	mov	r0, r3
 800043e:	f001 ff1b 	bl	8002278 <HAL_RCC_OscConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000448:	f000 f8c4 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	230f      	movs	r3, #15
 800044e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000450:	2302      	movs	r3, #2
 8000452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2102      	movs	r1, #2
 8000466:	4618      	mov	r0, r3
 8000468:	f002 f988 	bl	800277c <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000472:	f000 f8af 	bl	80005d4 <Error_Handler>
  }
}
 8000476:	bf00      	nop
 8000478:	3740      	adds	r7, #64	; 0x40
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_SPI1_Init+0x64>)
 8000486:	4a18      	ldr	r2, [pc, #96]	; (80004e8 <MX_SPI1_Init+0x68>)
 8000488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800048a:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <MX_SPI1_Init+0x64>)
 800048c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_SPI1_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_SPI1_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004b4:	2208      	movs	r2, #8
 80004b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004cc:	220a      	movs	r2, #10
 80004ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004d2:	f002 faeb 	bl	8002aac <HAL_SPI_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004dc:	f000 f87a 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000d4 	.word	0x200000d4
 80004e8:	40013000 	.word	0x40013000

080004ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <MX_USART1_UART_Init+0x50>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 80004f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000524:	f003 f82e 	bl	8003584 <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800052e:	f000 f851 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000012c 	.word	0x2000012c
 800053c:	40013800 	.word	0x40013800

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <MX_GPIO_Init+0x8c>)
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_GPIO_Init+0x8c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_GPIO_Init+0x8c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <MX_GPIO_Init+0x8c>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|INT_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2107      	movs	r1, #7
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <MX_GPIO_Init+0x90>)
 80005a2:	f001 fe51 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin INT_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|INT_Pin|SPI1_CS_Pin;
 80005a6:	2307      	movs	r3, #7
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_GPIO_Init+0x90>)
 80005be:	f001 fcbf 	bl	8001f40 <HAL_GPIO_Init>

}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>
	...

080005e0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4604      	mov	r4, r0
 80005e8:	4608      	mov	r0, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	461a      	mov	r2, r3
 80005ee:	4623      	mov	r3, r4
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	4603      	mov	r3, r0
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	460b      	mov	r3, r1
 80005f8:	80bb      	strh	r3, [r7, #4]
 80005fa:	4613      	mov	r3, r2
 80005fc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b08      	cmp	r3, #8
 8000602:	d902      	bls.n	800060a <socket+0x2a>
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	e0f2      	b.n	80007f0 <socket+0x210>
	switch(protocol)
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d005      	beq.n	800061c <socket+0x3c>
 8000610:	2b00      	cmp	r3, #0
 8000612:	dd11      	ble.n	8000638 <socket+0x58>
 8000614:	3b02      	subs	r3, #2
 8000616:	2b02      	cmp	r3, #2
 8000618:	d80e      	bhi.n	8000638 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800061a:	e011      	b.n	8000640 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2204      	movs	r2, #4
 8000622:	4619      	mov	r1, r3
 8000624:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000628:	f000 fe6e 	bl	8001308 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d105      	bne.n	800063e <socket+0x5e>
 8000632:	f06f 0302 	mvn.w	r3, #2
 8000636:	e0db      	b.n	80007f0 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000638:	f06f 0304 	mvn.w	r3, #4
 800063c:	e0d8      	b.n	80007f0 <socket+0x210>
	    break;
 800063e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <socket+0x70>
 800064a:	f06f 0305 	mvn.w	r3, #5
 800064e:	e0cf      	b.n	80007f0 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d025      	beq.n	80006a2 <socket+0xc2>
	{
   	switch(protocol)
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d002      	beq.n	8000662 <socket+0x82>
 800065c:	2b02      	cmp	r3, #2
 800065e:	d008      	beq.n	8000672 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000660:	e024      	b.n	80006ac <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000668:	2b00      	cmp	r3, #0
 800066a:	d11c      	bne.n	80006a6 <socket+0xc6>
 800066c:	f06f 0305 	mvn.w	r3, #5
 8000670:	e0be      	b.n	80007f0 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	f003 0320 	and.w	r3, r3, #32
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800067c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db02      	blt.n	800068a <socket+0xaa>
 8000684:	f06f 0305 	mvn.w	r3, #5
 8000688:	e0b2      	b.n	80007f0 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	f003 0310 	and.w	r3, r3, #16
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00a      	beq.n	80006aa <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db06      	blt.n	80006aa <socket+0xca>
 800069c:	f06f 0305 	mvn.w	r3, #5
 80006a0:	e0a6      	b.n	80007f0 <socket+0x210>
   	}
   }
 80006a2:	bf00      	nop
 80006a4:	e002      	b.n	80006ac <socket+0xcc>
   	      break;
 80006a6:	bf00      	nop
 80006a8:	e000      	b.n	80006ac <socket+0xcc>
   	      break;
 80006aa:	bf00      	nop
	close(sn);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f8ac 	bl	800080c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	3301      	adds	r3, #1
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	4618      	mov	r0, r3
 80006be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c2:	f023 030f 	bic.w	r3, r3, #15
 80006c6:	b25a      	sxtb	r2, r3
 80006c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	f000 fdca 	bl	800126c <WIZCHIP_WRITE>
    #endif
	if(!port)
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d110      	bne.n	8000700 <socket+0x120>
	{
	   port = sock_any_port++;
 80006de:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <socket+0x218>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	b291      	uxth	r1, r2
 80006e6:	4a44      	ldr	r2, [pc, #272]	; (80007f8 <socket+0x218>)
 80006e8:	8011      	strh	r1, [r2, #0]
 80006ea:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80006ec:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <socket+0x218>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d103      	bne.n	8000700 <socket+0x120>
 80006f8:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <socket+0x218>)
 80006fa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80006fe:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	3301      	adds	r3, #1
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800070c:	461a      	mov	r2, r3
 800070e:	88bb      	ldrh	r3, [r7, #4]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	4610      	mov	r0, r2
 800071a:	f000 fda7 	bl	800126c <WIZCHIP_WRITE>
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	3301      	adds	r3, #1
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800072a:	461a      	mov	r2, r3
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4619      	mov	r1, r3
 8000732:	4610      	mov	r0, r2
 8000734:	f000 fd9a 	bl	800126c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	3301      	adds	r3, #1
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000744:	2101      	movs	r1, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fd90 	bl	800126c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800074c:	bf00      	nop
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	3301      	adds	r3, #1
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fd3a 	bl	80011d4 <WIZCHIP_READ>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f3      	bne.n	800074e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2201      	movs	r2, #1
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	b21b      	sxth	r3, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	b21a      	sxth	r2, r3
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <socket+0x21c>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b21b      	sxth	r3, r3
 800077a:	4013      	ands	r3, r2
 800077c:	b21b      	sxth	r3, r3
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <socket+0x21c>)
 8000782:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	f003 0201 	and.w	r2, r3, #1
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	b21a      	sxth	r2, r3
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <socket+0x21c>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b21b      	sxth	r3, r3
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <socket+0x21c>)
 80007a0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2201      	movs	r2, #1
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	43db      	mvns	r3, r3
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <socket+0x220>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	4013      	ands	r3, r2
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <socket+0x220>)
 80007be:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <socket+0x224>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <socket+0x228>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80007d2:	bf00      	nop
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	3301      	adds	r3, #1
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fcf7 	bl	80011d4 <WIZCHIP_READ>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0f3      	beq.n	80007d4 <socket+0x1f4>
   return (int8_t)sn;
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000018 	.word	0x20000018
 80007fc:	200001f4 	.word	0x200001f4
 8000800:	200001f6 	.word	0x200001f6
 8000804:	200001f8 	.word	0x200001f8
 8000808:	20000208 	.word	0x20000208

0800080c <close>:

int8_t close(uint8_t sn)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b08      	cmp	r3, #8
 800081a:	d902      	bls.n	8000822 <close+0x16>
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	e055      	b.n	80008ce <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	3301      	adds	r3, #1
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800082e:	2110      	movs	r1, #16
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd1b 	bl	800126c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000836:	bf00      	nop
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	3301      	adds	r3, #1
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fcc5 	bl	80011d4 <WIZCHIP_READ>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f3      	bne.n	8000838 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	3301      	adds	r3, #1
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800085c:	211f      	movs	r1, #31
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fd04 	bl	800126c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2201      	movs	r2, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	b21b      	sxth	r3, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	b21a      	sxth	r2, r3
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <close+0xcc>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b21b      	sxth	r3, r3
 8000878:	4013      	ands	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <close+0xcc>)
 8000880:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2201      	movs	r2, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	b21b      	sxth	r3, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	b21a      	sxth	r2, r3
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <close+0xd0>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4013      	ands	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <close+0xd0>)
 800089e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <close+0xd4>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <close+0xd8>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80008b2:	bf00      	nop
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	3301      	adds	r3, #1
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fc87 	bl	80011d4 <WIZCHIP_READ>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f3      	bne.n	80008b4 <close+0xa8>
	return SOCK_OK;
 80008cc:	2301      	movs	r3, #1
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001f4 	.word	0x200001f4
 80008dc:	200001f6 	.word	0x200001f6
 80008e0:	200001f8 	.word	0x200001f8
 80008e4:	20000208 	.word	0x20000208

080008e8 <listen>:

int8_t listen(uint8_t sn)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	d902      	bls.n	80008fe <listen+0x16>
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	e049      	b.n	8000992 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	3301      	adds	r3, #1
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fc64 	bl	80011d4 <WIZCHIP_READ>
 800090c:	4603      	mov	r3, r0
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	2b01      	cmp	r3, #1
 8000914:	d002      	beq.n	800091c <listen+0x34>
 8000916:	f06f 0304 	mvn.w	r3, #4
 800091a:	e03a      	b.n	8000992 <listen+0xaa>
	CHECK_SOCKINIT();
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	3301      	adds	r3, #1
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fc53 	bl	80011d4 <WIZCHIP_READ>
 800092e:	4603      	mov	r3, r0
 8000930:	2b13      	cmp	r3, #19
 8000932:	d002      	beq.n	800093a <listen+0x52>
 8000934:	f06f 0302 	mvn.w	r3, #2
 8000938:	e02b      	b.n	8000992 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	3301      	adds	r3, #1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000946:	2102      	movs	r1, #2
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fc8f 	bl	800126c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800094e:	bf00      	nop
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	3301      	adds	r3, #1
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fc39 	bl	80011d4 <WIZCHIP_READ>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1f3      	bne.n	8000950 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000968:	e006      	b.n	8000978 <listen+0x90>
   {
         close(sn);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff4d 	bl	800080c <close>
         return SOCKERR_SOCKCLOSED;
 8000972:	f06f 0303 	mvn.w	r3, #3
 8000976:	e00c      	b.n	8000992 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	3301      	adds	r3, #1
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fc25 	bl	80011d4 <WIZCHIP_READ>
 800098a:	4603      	mov	r3, r0
 800098c:	2b14      	cmp	r3, #20
 800098e:	d1ec      	bne.n	800096a <listen+0x82>
   }
   return SOCK_OK;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d902      	bls.n	80009b2 <disconnect+0x16>
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	e062      	b.n	8000a78 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	3301      	adds	r3, #1
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fc0a 	bl	80011d4 <WIZCHIP_READ>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d002      	beq.n	80009d0 <disconnect+0x34>
 80009ca:	f06f 0304 	mvn.w	r3, #4
 80009ce:	e053      	b.n	8000a78 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	3301      	adds	r3, #1
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009dc:	2108      	movs	r1, #8
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fc44 	bl	800126c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80009e4:	bf00      	nop
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	3301      	adds	r3, #1
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fbee 	bl	80011d4 <WIZCHIP_READ>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f3      	bne.n	80009e6 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2201      	movs	r2, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <disconnect+0xe4>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	4013      	ands	r3, r2
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <disconnect+0xe4>)
 8000a1a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <disconnect+0xe8>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	fa42 f303 	asr.w	r3, r2, r3
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d016      	beq.n	8000a5e <disconnect+0xc2>
 8000a30:	2300      	movs	r3, #0
 8000a32:	e021      	b.n	8000a78 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	3301      	adds	r3, #1
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fbc7 	bl	80011d4 <WIZCHIP_READ>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <disconnect+0xc2>
	   {
	      close(sn);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff feda 	bl	800080c <close>
	      return SOCKERR_TIMEOUT;
 8000a58:	f06f 030c 	mvn.w	r3, #12
 8000a5c:	e00c      	b.n	8000a78 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	3301      	adds	r3, #1
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fbb2 	bl	80011d4 <WIZCHIP_READ>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1de      	bne.n	8000a34 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200001f6 	.word	0x200001f6
 8000a84:	200001f4 	.word	0x200001f4

08000a88 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b08      	cmp	r3, #8
 8000aa4:	d902      	bls.n	8000aac <send+0x24>
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e0de      	b.n	8000c6a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fb8d 	bl	80011d4 <WIZCHIP_READ>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d002      	beq.n	8000aca <send+0x42>
 8000ac4:	f06f 0304 	mvn.w	r3, #4
 8000ac8:	e0cf      	b.n	8000c6a <send+0x1e2>
   CHECK_SOCKDATA();
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <send+0x4e>
 8000ad0:	f06f 030d 	mvn.w	r3, #13
 8000ad4:	e0c9      	b.n	8000c6a <send+0x1e2>
   tmp = getSn_SR(sn);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	3301      	adds	r3, #1
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fb76 	bl	80011d4 <WIZCHIP_READ>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2b17      	cmp	r3, #23
 8000af0:	d005      	beq.n	8000afe <send+0x76>
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b1c      	cmp	r3, #28
 8000af6:	d002      	beq.n	8000afe <send+0x76>
 8000af8:	f06f 0306 	mvn.w	r3, #6
 8000afc:	e0b5      	b.n	8000c6a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000afe:	4b5d      	ldr	r3, [pc, #372]	; (8000c74 <send+0x1ec>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	fa42 f303 	asr.w	r3, r2, r3
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d039      	beq.n	8000b86 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	3301      	adds	r3, #1
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fb58 	bl	80011d4 <WIZCHIP_READ>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f003 031f 	and.w	r3, r3, #31
 8000b2a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d019      	beq.n	8000b6a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b42:	2110      	movs	r1, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fb91 	bl	800126c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <send+0x1ec>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4013      	ands	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <send+0x1ec>)
 8000b66:	801a      	strh	r2, [r3, #0]
 8000b68:	e00d      	b.n	8000b86 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <send+0xfa>
      {
         close(sn);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe48 	bl	800080c <close>
         return SOCKERR_TIMEOUT;
 8000b7c:	f06f 030c 	mvn.w	r3, #12
 8000b80:	e073      	b.n	8000c6a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e071      	b.n	8000c6a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fb1e 	bl	80011d4 <WIZCHIP_READ>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	89bb      	ldrh	r3, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d901      	bls.n	8000bac <send+0x124>
 8000ba8:	89bb      	ldrh	r3, [r7, #12]
 8000baa:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fc6a 	bl	8001488 <getSn_TX_FSR>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fb05 	bl	80011d4 <WIZCHIP_READ>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	2b17      	cmp	r3, #23
 8000bd2:	d009      	beq.n	8000be8 <send+0x160>
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b1c      	cmp	r3, #28
 8000bd8:	d006      	beq.n	8000be8 <send+0x160>
      {
         close(sn);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe15 	bl	800080c <close>
         return SOCKERR_SOCKSTATUS;
 8000be2:	f06f 0306 	mvn.w	r3, #6
 8000be6:	e040      	b.n	8000c6a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <send+0x1f0>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	fa42 f303 	asr.w	r3, r2, r3
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <send+0x180>
 8000bfc:	88ba      	ldrh	r2, [r7, #4]
 8000bfe:	89bb      	ldrh	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d901      	bls.n	8000c08 <send+0x180>
 8000c04:	2300      	movs	r3, #0
 8000c06:	e030      	b.n	8000c6a <send+0x1e2>
      if(len <= freesize) break;
 8000c08:	88ba      	ldrh	r2, [r7, #4]
 8000c0a:	89bb      	ldrh	r3, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d900      	bls.n	8000c12 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000c10:	e7cc      	b.n	8000bac <send+0x124>
      if(len <= freesize) break;
 8000c12:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000c14:	88ba      	ldrh	r2, [r7, #4]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	6839      	ldr	r1, [r7, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fcca 	bl	80015b4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	3301      	adds	r3, #1
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fb1c 	bl	800126c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000c34:	bf00      	nop
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fac6 	bl	80011d4 <WIZCHIP_READ>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f3      	bne.n	8000c36 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2201      	movs	r2, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <send+0x1ec>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <send+0x1ec>)
 8000c66:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000c68:	88bb      	ldrh	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001f6 	.word	0x200001f6
 8000c78:	200001f4 	.word	0x200001f4

08000c7c <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	603a      	str	r2, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d902      	bls.n	8000c98 <getsockopt+0x1c>
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e101      	b.n	8000e9c <getsockopt+0x220>
   switch(sotype)
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b0c      	cmp	r3, #12
 8000c9c:	f200 80fa 	bhi.w	8000e94 <getsockopt+0x218>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <getsockopt+0x2c>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000cdd 	.word	0x08000cdd
 8000cac:	08000cf9 	.word	0x08000cf9
 8000cb0:	08000d15 	.word	0x08000d15
 8000cb4:	08000d31 	.word	0x08000d31
 8000cb8:	08000d6b 	.word	0x08000d6b
 8000cbc:	08000d83 	.word	0x08000d83
 8000cc0:	08000e95 	.word	0x08000e95
 8000cc4:	08000dbd 	.word	0x08000dbd
 8000cc8:	08000df7 	.word	0x08000df7
 8000ccc:	08000e09 	.word	0x08000e09
 8000cd0:	08000e1b 	.word	0x08000e1b
 8000cd4:	08000e37 	.word	0x08000e37
 8000cd8:	08000e6f 	.word	0x08000e6f
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fa75 	bl	80011d4 <WIZCHIP_READ>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f023 030f 	bic.w	r3, r3, #15
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	701a      	strb	r2, [r3, #0]
         break;
 8000cf6:	e0d0      	b.n	8000e9a <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fa65 	bl	80011d4 <WIZCHIP_READ>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	701a      	strb	r2, [r3, #0]
         break;
 8000d12:	e0c2      	b.n	8000e9a <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	3301      	adds	r3, #1
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fa57 	bl	80011d4 <WIZCHIP_READ>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	701a      	strb	r2, [r3, #0]
         break;
 8000d2e:	e0b4      	b.n	8000e9a <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	3301      	adds	r3, #1
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fa49 	bl	80011d4 <WIZCHIP_READ>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	b29c      	uxth	r4, r3
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	3301      	adds	r3, #1
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fa3c 	bl	80011d4 <WIZCHIP_READ>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4423      	add	r3, r4
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	801a      	strh	r2, [r3, #0]
         break;
 8000d68:	e097      	b.n	8000e9a <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	3301      	adds	r3, #1
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000d76:	2204      	movs	r2, #4
 8000d78:	6839      	ldr	r1, [r7, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fac4 	bl	8001308 <WIZCHIP_READ_BUF>
         break;
 8000d80:	e08b      	b.n	8000e9a <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	3301      	adds	r3, #1
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fa20 	bl	80011d4 <WIZCHIP_READ>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b29c      	uxth	r4, r3
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	3301      	adds	r3, #1
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fa13 	bl	80011d4 <WIZCHIP_READ>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4423      	add	r3, r4
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	801a      	strh	r2, [r3, #0]
         break;
 8000dba:	e06e      	b.n	8000e9a <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fa05 	bl	80011d4 <WIZCHIP_READ>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d002      	beq.n	8000dda <getsockopt+0x15e>
 8000dd4:	f06f 0304 	mvn.w	r3, #4
 8000dd8:	e060      	b.n	8000e9c <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	3301      	adds	r3, #1
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f9f4 	bl	80011d4 <WIZCHIP_READ>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	801a      	strh	r2, [r3, #0]
         break;
 8000df4:	e051      	b.n	8000e9a <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fb45 	bl	8001488 <getSn_TX_FSR>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	801a      	strh	r2, [r3, #0]
         break;
 8000e06:	e048      	b.n	8000e9a <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fb87 	bl	800151e <getSn_RX_RSR>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	801a      	strh	r2, [r3, #0]
         break;
 8000e18:	e03f      	b.n	8000e9a <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	3301      	adds	r3, #1
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f9d4 	bl	80011d4 <WIZCHIP_READ>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	701a      	strb	r2, [r3, #0]
         break;
 8000e34:	e031      	b.n	8000e9a <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f9c8 	bl	80011d4 <WIZCHIP_READ>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d008      	beq.n	8000e60 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fb64 	bl	800151e <getSn_RX_RSR>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8000e5e:	e01c      	b.n	8000e9a <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <getsockopt+0x228>)
 8000e64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	801a      	strh	r2, [r3, #0]
         break;
 8000e6c:	e015      	b.n	8000e9a <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	3301      	adds	r3, #1
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f9ac 	bl	80011d4 <WIZCHIP_READ>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d102      	bne.n	8000e88 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 8000e82:	f06f 0304 	mvn.w	r3, #4
 8000e86:	e009      	b.n	8000e9c <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <getsockopt+0x22c>)
 8000e8c:	5cd2      	ldrb	r2, [r2, r3]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	701a      	strb	r2, [r3, #0]
         break;
 8000e92:	e002      	b.n	8000e9a <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8000e94:	f06f 0301 	mvn.w	r3, #1
 8000e98:	e000      	b.n	8000e9c <getsockopt+0x220>
   }
   return SOCK_OK;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	200001f8 	.word	0x200001f8
 8000ea8:	20000208 	.word	0x20000208

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_MspInit+0x60>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_MspInit+0x60>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000

08000f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_SPI_MspInit+0x88>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d12f      	bne.n	8000f90 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_SPI_MspInit+0x8c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_SPI_MspInit+0x8c>)
 8000f36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_SPI_MspInit+0x8c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_SPI_MspInit+0x8c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_SPI_MspInit+0x8c>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_SPI_MspInit+0x8c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f60:	23a0      	movs	r3, #160	; 0xa0
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_SPI_MspInit+0x90>)
 8000f74:	f000 ffe4 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_SPI_MspInit+0x90>)
 8000f8c:	f000 ffd8 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40013000 	.word	0x40013000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_UART_MspInit+0x8c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d131      	bne.n	8001028 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_UART_MspInit+0x90>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_UART_MspInit+0x90>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_UART_MspInit+0x90>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_UART_MspInit+0x90>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <HAL_UART_MspInit+0x90>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_UART_MspInit+0x90>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4619      	mov	r1, r3
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_UART_MspInit+0x94>)
 800100a:	f000 ff99 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800100e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_UART_MspInit+0x94>)
 8001024:	f000 ff8c 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40013800 	.word	0x40013800
 8001034:	40021000 	.word	0x40021000
 8001038:	40010800 	.word	0x40010800

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001082:	f000 fe39 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e00a      	b.n	80010b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800109c:	f3af 8000 	nop.w
 80010a0:	4601      	mov	r1, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	60ba      	str	r2, [r7, #8]
 80010a8:	b2ca      	uxtb	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf0      	blt.n	800109c <_read+0x12>
	}

return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e009      	b.n	80010ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf1      	blt.n	80010d6 <_write+0x12>
	}
	return len;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_close>:

int _close(int file)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001122:	605a      	str	r2, [r3, #4]
	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <_isatty>:

int _isatty(int file)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	return 1;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f002 fad6 	bl	800373c <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20005000 	.word	0x20005000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	20000210 	.word	0x20000210
 80011c4:	20000230 	.word	0x20000230

080011c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <WIZCHIP_READ+0x94>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <WIZCHIP_READ+0x94>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <WIZCHIP_READ+0x94>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <WIZCHIP_READ+0x24>
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <WIZCHIP_READ+0x94>)
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d114      	bne.n	8001222 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <WIZCHIP_READ+0x94>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	0c12      	lsrs	r2, r2, #16
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	4610      	mov	r0, r2
 8001204:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <WIZCHIP_READ+0x94>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	0a12      	lsrs	r2, r2, #8
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	4610      	mov	r0, r2
 8001212:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <WIZCHIP_READ+0x94>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	4610      	mov	r0, r2
 800121e:	4798      	blx	r3
 8001220:	e011      	b.n	8001246 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	0c1b      	lsrs	r3, r3, #16
 8001226:	b2db      	uxtb	r3, r3
 8001228:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	b2db      	uxtb	r3, r3
 8001230:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <WIZCHIP_READ+0x94>)
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	2103      	movs	r1, #3
 8001242:	4610      	mov	r0, r2
 8001244:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <WIZCHIP_READ+0x94>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4798      	blx	r3
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <WIZCHIP_READ+0x94>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <WIZCHIP_READ+0x94>)
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	4798      	blx	r3
   return ret;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000020 	.word	0x20000020

0800126c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <WIZCHIP_WRITE+0x98>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <WIZCHIP_WRITE+0x98>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <WIZCHIP_WRITE+0x98>)
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	2b00      	cmp	r3, #0
 8001292:	d119      	bne.n	80012c8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <WIZCHIP_WRITE+0x98>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	0c12      	lsrs	r2, r2, #16
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	4610      	mov	r0, r2
 80012a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <WIZCHIP_WRITE+0x98>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	0a12      	lsrs	r2, r2, #8
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	4610      	mov	r0, r2
 80012ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <WIZCHIP_WRITE+0x98>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	4610      	mov	r0, r2
 80012ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <WIZCHIP_WRITE+0x98>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	78fa      	ldrb	r2, [r7, #3]
 80012c2:	4610      	mov	r0, r2
 80012c4:	4798      	blx	r3
 80012c6:	e013      	b.n	80012f0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <WIZCHIP_WRITE+0x98>)
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f107 020c 	add.w	r2, r7, #12
 80012ea:	2104      	movs	r1, #4
 80012ec:	4610      	mov	r0, r2
 80012ee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <WIZCHIP_WRITE+0x98>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <WIZCHIP_WRITE+0x98>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	4798      	blx	r3
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000020 	.word	0x20000020

08001308 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	4613      	mov	r3, r2
 8001314:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <WIZCHIP_READ_BUF+0x2a>
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	2b00      	cmp	r3, #0
 8001330:	d126      	bne.n	8001380 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	0c12      	lsrs	r2, r2, #16
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	4610      	mov	r0, r2
 800133e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	0a12      	lsrs	r2, r2, #8
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	4610      	mov	r0, r2
 800134c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	4610      	mov	r0, r2
 8001358:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800135a:	2300      	movs	r3, #0
 800135c:	82fb      	strh	r3, [r7, #22]
 800135e:	e00a      	b.n	8001376 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	8afa      	ldrh	r2, [r7, #22]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	188c      	adds	r4, r1, r2
 800136a:	4798      	blx	r3
 800136c:	4603      	mov	r3, r0
 800136e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001370:	8afb      	ldrh	r3, [r7, #22]
 8001372:	3301      	adds	r3, #1
 8001374:	82fb      	strh	r3, [r7, #22]
 8001376:	8afa      	ldrh	r2, [r7, #22]
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3f0      	bcc.n	8001360 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800137e:	e017      	b.n	80013b0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	b2db      	uxtb	r3, r3
 8001386:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	b2db      	uxtb	r3, r3
 800138e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	f107 0210 	add.w	r2, r7, #16
 800139e:	2103      	movs	r1, #3
 80013a0:	4610      	mov	r0, r2
 80013a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	88fa      	ldrh	r2, [r7, #6]
 80013aa:	4611      	mov	r1, r2
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80013b6:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <WIZCHIP_READ_BUF+0xbc>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	4798      	blx	r3
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	20000020 	.word	0x20000020

080013c8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	4613      	mov	r3, r2
 80013d4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	4798      	blx	r3
   WIZCHIP.CS._select();
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d126      	bne.n	8001440 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	0c12      	lsrs	r2, r2, #16
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	4610      	mov	r0, r2
 80013fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	0a12      	lsrs	r2, r2, #8
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	4610      	mov	r0, r2
 800140c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	4610      	mov	r0, r2
 8001418:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	82fb      	strh	r3, [r7, #22]
 800141e:	e00a      	b.n	8001436 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	8afa      	ldrh	r2, [r7, #22]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	440a      	add	r2, r1
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	4610      	mov	r0, r2
 800142e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001430:	8afb      	ldrh	r3, [r7, #22]
 8001432:	3301      	adds	r3, #1
 8001434:	82fb      	strh	r3, [r7, #22]
 8001436:	8afa      	ldrh	r2, [r7, #22]
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	429a      	cmp	r2, r3
 800143c:	d3f0      	bcc.n	8001420 <WIZCHIP_WRITE_BUF+0x58>
 800143e:	e017      	b.n	8001470 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	b2db      	uxtb	r3, r3
 8001446:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b2db      	uxtb	r3, r3
 800144e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f107 0210 	add.w	r2, r7, #16
 800145e:	2103      	movs	r1, #3
 8001460:	4610      	mov	r0, r2
 8001462:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	88fa      	ldrh	r2, [r7, #6]
 800146a:	4611      	mov	r1, r2
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001476:	4b03      	ldr	r3, [pc, #12]	; (8001484 <WIZCHIP_WRITE_BUF+0xbc>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	4798      	blx	r3
}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000020 	.word	0x20000020

08001488 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001492:	2300      	movs	r3, #0
 8001494:	81fb      	strh	r3, [r7, #14]
 8001496:	2300      	movs	r3, #0
 8001498:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3301      	adds	r3, #1
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe94 	bl	80011d4 <WIZCHIP_READ>
 80014ac:	4603      	mov	r3, r0
 80014ae:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80014b0:	89bb      	ldrh	r3, [r7, #12]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b29c      	uxth	r4, r3
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	3301      	adds	r3, #1
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fe86 	bl	80011d4 <WIZCHIP_READ>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4423      	add	r3, r4
 80014ce:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80014d0:	89bb      	ldrh	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d01a      	beq.n	800150c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	3301      	adds	r3, #1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fe76 	bl	80011d4 <WIZCHIP_READ>
 80014e8:	4603      	mov	r3, r0
 80014ea:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b29c      	uxth	r4, r3
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	3301      	adds	r3, #1
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe68 	bl	80011d4 <WIZCHIP_READ>
 8001504:	4603      	mov	r3, r0
 8001506:	b29b      	uxth	r3, r3
 8001508:	4423      	add	r3, r4
 800150a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800150c:	89fa      	ldrh	r2, [r7, #14]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d1c2      	bne.n	800149a <getSn_TX_FSR+0x12>
   return val;
 8001514:	89fb      	ldrh	r3, [r7, #14]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}

0800151e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800151e:	b590      	push	{r4, r7, lr}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001528:	2300      	movs	r3, #0
 800152a:	81fb      	strh	r3, [r7, #14]
 800152c:	2300      	movs	r3, #0
 800152e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	3301      	adds	r3, #1
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe49 	bl	80011d4 <WIZCHIP_READ>
 8001542:	4603      	mov	r3, r0
 8001544:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001546:	89bb      	ldrh	r3, [r7, #12]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b29c      	uxth	r4, r3
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	3301      	adds	r3, #1
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe3b 	bl	80011d4 <WIZCHIP_READ>
 800155e:	4603      	mov	r3, r0
 8001560:	b29b      	uxth	r3, r3
 8001562:	4423      	add	r3, r4
 8001564:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01a      	beq.n	80015a2 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	3301      	adds	r3, #1
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe2b 	bl	80011d4 <WIZCHIP_READ>
 800157e:	4603      	mov	r3, r0
 8001580:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b29c      	uxth	r4, r3
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	3301      	adds	r3, #1
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe1d 	bl	80011d4 <WIZCHIP_READ>
 800159a:	4603      	mov	r3, r0
 800159c:	b29b      	uxth	r3, r3
 800159e:	4423      	add	r3, r4
 80015a0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80015a2:	89fa      	ldrh	r2, [r7, #14]
 80015a4:	89bb      	ldrh	r3, [r7, #12]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d1c2      	bne.n	8001530 <getSn_RX_RSR+0x12>
   return val;
 80015aa:	89fb      	ldrh	r3, [r7, #14]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}

080015b4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80015cc:	88bb      	ldrh	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d048      	beq.n	8001664 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	3301      	adds	r3, #1
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fdf8 	bl	80011d4 <WIZCHIP_READ>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b29c      	uxth	r4, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	3301      	adds	r3, #1
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fdeb 	bl	80011d4 <WIZCHIP_READ>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29b      	uxth	r3, r3
 8001602:	4423      	add	r3, r4
 8001604:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	3202      	adds	r2, #2
 8001610:	00d2      	lsls	r2, r2, #3
 8001612:	4413      	add	r3, r2
 8001614:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	461a      	mov	r2, r3
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	68b8      	ldr	r0, [r7, #8]
 800161e:	f7ff fed3 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001622:	89fa      	ldrh	r2, [r7, #14]
 8001624:	88bb      	ldrh	r3, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	3301      	adds	r3, #1
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001636:	461a      	mov	r2, r3
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	b29b      	uxth	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f7ff fe12 	bl	800126c <WIZCHIP_WRITE>
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	3301      	adds	r3, #1
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001654:	461a      	mov	r2, r3
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff fe05 	bl	800126c <WIZCHIP_WRITE>
 8001662:	e000      	b.n	8001666 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001664:	bf00      	nop
}
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	2300      	movs	r3, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	807b      	strh	r3, [r7, #2]
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
	...

08001720 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <reg_wizchip_cs_cbfunc+0x16>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <reg_wizchip_cs_cbfunc+0x3c>)
 8001738:	4a09      	ldr	r2, [pc, #36]	; (8001760 <reg_wizchip_cs_cbfunc+0x40>)
 800173a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <reg_wizchip_cs_cbfunc+0x3c>)
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <reg_wizchip_cs_cbfunc+0x44>)
 8001740:	619a      	str	r2, [r3, #24]
 8001742:	e006      	b.n	8001752 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001744:	4a05      	ldr	r2, [pc, #20]	; (800175c <reg_wizchip_cs_cbfunc+0x3c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <reg_wizchip_cs_cbfunc+0x3c>)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6193      	str	r3, [r2, #24]
   }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000020 	.word	0x20000020
 8001760:	08001685 	.word	0x08001685
 8001764:	08001691 	.word	0x08001691

08001768 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001772:	bf00      	nop
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f9      	beq.n	8001774 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <reg_wizchip_spi_cbfunc+0x24>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d106      	bne.n	800179a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <reg_wizchip_spi_cbfunc+0x50>)
 8001790:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8001794:	4a09      	ldr	r2, [pc, #36]	; (80017bc <reg_wizchip_spi_cbfunc+0x54>)
 8001796:	621a      	str	r2, [r3, #32]
 8001798:	e006      	b.n	80017a8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800179a:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <reg_wizchip_spi_cbfunc+0x4c>)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6213      	str	r3, [r2, #32]
   }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000020 	.word	0x20000020
 80017b8:	080016d1 	.word	0x080016d1
 80017bc:	080016df 	.word	0x080016df

080017c0 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80017ca:	bf00      	nop
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f9      	beq.n	80017cc <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <reg_wizchip_spiburst_cbfunc+0x24>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d106      	bne.n	80017f2 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <reg_wizchip_spiburst_cbfunc+0x50>)
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017ec:	4a09      	ldr	r2, [pc, #36]	; (8001814 <reg_wizchip_spiburst_cbfunc+0x54>)
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
 80017f0:	e006      	b.n	8001800 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000020 	.word	0x20000020
 8001810:	080016f3 	.word	0x080016f3
 8001814:	08001709 	.word	0x08001709

08001818 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d82c      	bhi.n	8001884 <ctlnetwork+0x6c>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <ctlnetwork+0x18>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001849 	.word	0x08001849
 8001834:	08001851 	.word	0x08001851
 8001838:	08001859 	.word	0x08001859
 800183c:	08001867 	.word	0x08001867
 8001840:	08001875 	.word	0x08001875
 8001844:	0800187d 	.word	0x0800187d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f000 f8fb 	bl	8001a44 <wizchip_setnetinfo>
         break;
 800184e:	e01c      	b.n	800188a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f000 f937 	bl	8001ac4 <wizchip_getnetinfo>
         break;
 8001856:	e018      	b.n	800188a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f971 	bl	8001b44 <wizchip_setnetmode>
 8001862:	4603      	mov	r3, r0
 8001864:	e012      	b.n	800188c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001866:	f000 f98f 	bl	8001b88 <wizchip_getnetmode>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	701a      	strb	r2, [r3, #0]
         break;
 8001872:	e00a      	b.n	800188a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001874:	6838      	ldr	r0, [r7, #0]
 8001876:	f000 f98f 	bl	8001b98 <wizchip_settimeout>
         break;
 800187a:	e006      	b.n	800188a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f000 f9ac 	bl	8001bda <wizchip_gettimeout>
         break;
 8001882:	e002      	b.n	800188a <ctlnetwork+0x72>
      default:
         return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	e000      	b.n	800188c <ctlnetwork+0x74>
   }
   return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2206      	movs	r2, #6
 800189e:	4619      	mov	r1, r3
 80018a0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80018a4:	f7ff fd30 	bl	8001308 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2204      	movs	r2, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018b4:	f7ff fd28 	bl	8001308 <WIZCHIP_READ_BUF>
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2204      	movs	r2, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80018c4:	f7ff fd20 	bl	8001308 <WIZCHIP_READ_BUF>
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	2204      	movs	r2, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80018d4:	f7ff fd18 	bl	8001308 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fcc6 	bl	800126c <WIZCHIP_WRITE>
   getMR(); // for delay
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fc77 	bl	80011d4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2206      	movs	r2, #6
 80018ea:	4619      	mov	r1, r3
 80018ec:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80018f0:	f7ff fd6a 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2204      	movs	r2, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001900:	f7ff fd62 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	2204      	movs	r2, #4
 800190a:	4619      	mov	r1, r3
 800190c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001910:	f7ff fd5a 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2204      	movs	r2, #4
 800191a:	4619      	mov	r1, r3
 800191c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001920:	f7ff fd52 	bl	80013c8 <WIZCHIP_WRITE_BUF>
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800193a:	f7ff ffab 	bl	8001894 <wizchip_sw_reset>
   if(txsize)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03b      	beq.n	80019bc <wizchip_init+0x90>
   {
      tmp = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e015      	b.n	800197a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	4413      	add	r3, r2
 800195c:	b2db      	uxtb	r3, r3
 800195e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001964:	2b10      	cmp	r3, #16
 8001966:	dd02      	ble.n	800196e <wizchip_init+0x42>
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	e066      	b.n	8001a3c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	3301      	adds	r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	2b07      	cmp	r3, #7
 8001980:	dde5      	ble.n	800194e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e015      	b.n	80019b4 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	3301      	adds	r3, #1
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001996:	4618      	mov	r0, r3
 8001998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff fc62 	bl	800126c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	dde5      	ble.n	8001988 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d03b      	beq.n	8001a3a <wizchip_init+0x10e>
   {
      tmp = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	e015      	b.n	80019f8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80019cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	4413      	add	r3, r2
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80019de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	dd02      	ble.n	80019ec <wizchip_init+0xc0>
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e027      	b.n	8001a3c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	dde5      	ble.n	80019cc <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e015      	b.n	8001a32 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001a14:	4618      	mov	r0, r3
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff fc23 	bl	800126c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	2b07      	cmp	r3, #7
 8001a38:	dde5      	ble.n	8001a06 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2206      	movs	r2, #6
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001a56:	f7ff fcb7 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	330e      	adds	r3, #14
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a66:	f7ff fcaf 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	330a      	adds	r3, #10
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001a76:	f7ff fca7 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3306      	adds	r3, #6
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a86:	f7ff fc9f 	bl	80013c8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7c9a      	ldrb	r2, [r3, #18]
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <wizchip_setnetinfo+0x78>)
 8001a90:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7cda      	ldrb	r2, [r3, #19]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <wizchip_setnetinfo+0x78>)
 8001a98:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7d1a      	ldrb	r2, [r3, #20]
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <wizchip_setnetinfo+0x78>)
 8001aa0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7d5a      	ldrb	r2, [r3, #21]
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <wizchip_setnetinfo+0x78>)
 8001aa8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7d9a      	ldrb	r2, [r3, #22]
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <wizchip_setnetinfo+0x7c>)
 8001ab0:	701a      	strb	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000214 	.word	0x20000214
 8001ac0:	20000218 	.word	0x20000218

08001ac4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2206      	movs	r2, #6
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ad6:	f7ff fc17 	bl	8001308 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	330e      	adds	r3, #14
 8001ade:	2204      	movs	r2, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ae6:	f7ff fc0f 	bl	8001308 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	330a      	adds	r3, #10
 8001aee:	2204      	movs	r2, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001af6:	f7ff fc07 	bl	8001308 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3306      	adds	r3, #6
 8001afe:	2204      	movs	r2, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001b06:	f7ff fbff 	bl	8001308 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <wizchip_getnetinfo+0x78>)
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <wizchip_getnetinfo+0x78>)
 8001b14:	785a      	ldrb	r2, [r3, #1]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <wizchip_getnetinfo+0x78>)
 8001b1c:	789a      	ldrb	r2, [r3, #2]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <wizchip_getnetinfo+0x78>)
 8001b24:	78da      	ldrb	r2, [r3, #3]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <wizchip_getnetinfo+0x7c>)
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	759a      	strb	r2, [r3, #22]
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000214 	.word	0x20000214
 8001b40:	20000218 	.word	0x20000218

08001b44 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <wizchip_setnetmode+0x1e>
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	e00e      	b.n	8001b80 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fb36 	bl	80011d4 <WIZCHIP_READ>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	4619      	mov	r1, r3
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fb77 	bl	800126c <WIZCHIP_WRITE>
   return 0;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff fb21 	bl	80011d4 <WIZCHIP_READ>
 8001b92:	4603      	mov	r3, r0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001baa:	f7ff fb5f 	bl	800126c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	885b      	ldrh	r3, [r3, #2]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001bbe:	f7ff fb55 	bl	800126c <WIZCHIP_WRITE>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	885b      	ldrh	r3, [r3, #2]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001bce:	f7ff fb4d 	bl	800126c <WIZCHIP_WRITE>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001bda:	b590      	push	{r4, r7, lr}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001be2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001be6:	f7ff faf5 	bl	80011d4 <WIZCHIP_READ>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001bf2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001bf6:	f7ff faed 	bl	80011d4 <WIZCHIP_READ>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b29c      	uxth	r4, r3
 8001c02:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001c06:	f7ff fae5 	bl	80011d4 <WIZCHIP_READ>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4423      	add	r3, r4
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	805a      	strh	r2, [r3, #2]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}
	...

08001c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c22:	490d      	ldr	r1, [pc, #52]	; (8001c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c38:	4c0a      	ldr	r4, [pc, #40]	; (8001c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c46:	f7ff fabf 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f001 fd7d 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c4e:	f7fe fae1 	bl	8000214 <main>
  bx lr
 8001c52:	4770      	bx	lr
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c58:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001c5c:	08004d48 	.word	0x08004d48
  ldr r2, =_sbss
 8001c60:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001c64:	20000230 	.word	0x20000230

08001c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC1_2_IRQHandler>
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x28>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x28>)
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f92b 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff f910 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40022000 	.word	0x40022000

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f935 	bl	8001f26 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 f90b 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000001c 	.word	0x2000001c
 8001cf0:	20000050 	.word	0x20000050
 8001cf4:	2000004c 	.word	0x2000004c

08001cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_IncTick+0x1c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_IncTick+0x20>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <HAL_IncTick+0x20>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000050 	.word	0x20000050
 8001d18:	2000021c 	.word	0x2000021c

08001d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_GetTick+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	2000021c 	.word	0x2000021c

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffe0 	bl	8001d1c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000050 	.word	0x20000050

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff90 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff49 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff5e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff90 	bl	8001e30 <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5f 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffb0 	bl	8001e94 <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b08b      	sub	sp, #44	; 0x2c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e169      	b.n	8002228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f54:	2201      	movs	r2, #1
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 8158 	bne.w	8002222 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a9a      	ldr	r2, [pc, #616]	; (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d05e      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f7c:	4a98      	ldr	r2, [pc, #608]	; (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d875      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f82:	4a98      	ldr	r2, [pc, #608]	; (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d058      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f88:	4a96      	ldr	r2, [pc, #600]	; (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d86f      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f8e:	4a96      	ldr	r2, [pc, #600]	; (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d052      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f94:	4a94      	ldr	r2, [pc, #592]	; (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d869      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f9a:	4a94      	ldr	r2, [pc, #592]	; (80021ec <HAL_GPIO_Init+0x2ac>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d04c      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fa0:	4a92      	ldr	r2, [pc, #584]	; (80021ec <HAL_GPIO_Init+0x2ac>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d863      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fa6:	4a92      	ldr	r2, [pc, #584]	; (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d046      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fac:	4a90      	ldr	r2, [pc, #576]	; (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d85d      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d82a      	bhi.n	800200c <HAL_GPIO_Init+0xcc>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d859      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <HAL_GPIO_Init+0x80>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	08002015 	.word	0x08002015
 8001fc8:	08002027 	.word	0x08002027
 8001fcc:	08002069 	.word	0x08002069
 8001fd0:	0800206f 	.word	0x0800206f
 8001fd4:	0800206f 	.word	0x0800206f
 8001fd8:	0800206f 	.word	0x0800206f
 8001fdc:	0800206f 	.word	0x0800206f
 8001fe0:	0800206f 	.word	0x0800206f
 8001fe4:	0800206f 	.word	0x0800206f
 8001fe8:	0800206f 	.word	0x0800206f
 8001fec:	0800206f 	.word	0x0800206f
 8001ff0:	0800206f 	.word	0x0800206f
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	0800206f 	.word	0x0800206f
 8001ffc:	0800206f 	.word	0x0800206f
 8002000:	0800206f 	.word	0x0800206f
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002031 	.word	0x08002031
 800200c:	4a79      	ldr	r2, [pc, #484]	; (80021f4 <HAL_GPIO_Init+0x2b4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002012:	e02c      	b.n	800206e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e029      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e024      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	3308      	adds	r3, #8
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e01f      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	330c      	adds	r3, #12
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e01a      	b.n	8002070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002042:	2304      	movs	r3, #4
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e013      	b.n	8002070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	611a      	str	r2, [r3, #16]
          break;
 800205a:	e009      	b.n	8002070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	615a      	str	r2, [r3, #20]
          break;
 8002066:	e003      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x130>
          break;
 800206e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2bff      	cmp	r3, #255	; 0xff
 8002074:	d801      	bhi.n	800207a <HAL_GPIO_Init+0x13a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	e001      	b.n	800207e <HAL_GPIO_Init+0x13e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d802      	bhi.n	800208c <HAL_GPIO_Init+0x14c>
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x152>
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	3b08      	subs	r3, #8
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	210f      	movs	r1, #15
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80b1 	beq.w	8002222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c0:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d8:	4a48      	ldr	r2, [pc, #288]	; (80021fc <HAL_GPIO_Init+0x2bc>)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a40      	ldr	r2, [pc, #256]	; (8002200 <HAL_GPIO_Init+0x2c0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_GPIO_Init+0x1ec>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <HAL_GPIO_Init+0x2c4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_GPIO_Init+0x1e8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3e      	ldr	r2, [pc, #248]	; (8002208 <HAL_GPIO_Init+0x2c8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <HAL_GPIO_Init+0x1e4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	; (800220c <HAL_GPIO_Init+0x2cc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_GPIO_Init+0x1e0>
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002120:	2304      	movs	r3, #4
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 800212c:	2300      	movs	r3, #0
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800213e:	492f      	ldr	r1, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x2bc>)
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	492c      	ldr	r1, [pc, #176]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	43db      	mvns	r3, r3
 800216e:	4928      	ldr	r1, [pc, #160]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002170:	4013      	ands	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4922      	ldr	r1, [pc, #136]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	491e      	ldr	r1, [pc, #120]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002198:	4013      	ands	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4918      	ldr	r1, [pc, #96]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	4914      	ldr	r1, [pc, #80]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d021      	beq.n	8002214 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	490e      	ldr	r1, [pc, #56]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
 80021dc:	e021      	b.n	8002222 <HAL_GPIO_Init+0x2e2>
 80021de:	bf00      	nop
 80021e0:	10320000 	.word	0x10320000
 80021e4:	10310000 	.word	0x10310000
 80021e8:	10220000 	.word	0x10220000
 80021ec:	10210000 	.word	0x10210000
 80021f0:	10120000 	.word	0x10120000
 80021f4:	10110000 	.word	0x10110000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010000 	.word	0x40010000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010c00 	.word	0x40010c00
 8002208:	40011000 	.word	0x40011000
 800220c:	40011400 	.word	0x40011400
 8002210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_GPIO_Init+0x304>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	4909      	ldr	r1, [pc, #36]	; (8002244 <HAL_GPIO_Init+0x304>)
 800221e:	4013      	ands	r3, r2
 8002220:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f ae8e 	bne.w	8001f54 <HAL_GPIO_Init+0x14>
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	372c      	adds	r7, #44	; 0x2c
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e272      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002298:	4b92      	ldr	r3, [pc, #584]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d00c      	beq.n	80022be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a4:	4b8f      	ldr	r3, [pc, #572]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
 80022b0:	4b8c      	ldr	r3, [pc, #560]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d06c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x12c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d168      	bne.n	80023a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e24c      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x76>
 80022e0:	4b80      	ldr	r3, [pc, #512]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a7f      	ldr	r2, [pc, #508]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a77      	ldr	r2, [pc, #476]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xbc>
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a71      	ldr	r2, [pc, #452]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002334:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a67      	ldr	r2, [pc, #412]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff fce2 	bl	8001d1c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fcde 	bl	8001d1c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e200      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe4>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff fcce 	bl	8001d1c <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fcca 	bl	8001d1c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1ec      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x10c>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d063      	beq.n	800247a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023be:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x18c>
 80023ca:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x176>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1c0      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4939      	ldr	r1, [pc, #228]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e03a      	b.n	800247a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7ff fc83 	bl	8001d1c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241a:	f7ff fc7f 	bl	8001d1c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1a1      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4927      	ldr	r1, [pc, #156]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fc62 	bl	8001d1c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245c:	f7ff fc5e 	bl	8001d1c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e180      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03a      	beq.n	80024fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d019      	beq.n	80024c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7ff fc42 	bl	8001d1c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7ff fc3e 	bl	8001d1c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e160      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 fad8 	bl	8002a70 <RCC_Delay>
 80024c0:	e01c      	b.n	80024fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7ff fc28 	bl	8001d1c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ce:	e00f      	b.n	80024f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff fc24 	bl	8001d1c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d908      	bls.n	80024f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e146      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	42420000 	.word	0x42420000
 80024ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	4b92      	ldr	r3, [pc, #584]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e9      	bne.n	80024d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80a6 	beq.w	8002656 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a87      	ldr	r2, [pc, #540]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x4c8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b7f      	ldr	r3, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x4c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7e      	ldr	r2, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x4c8>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7ff fbe5 	bl	8001d1c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7ff fbe1 	bl	8001d1c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e103      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b75      	ldr	r3, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x4c8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x312>
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	e02d      	b.n	80025e6 <HAL_RCC_OscConfig+0x36e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x334>
 8002592:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a69      	ldr	r2, [pc, #420]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a66      	ldr	r2, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	e01c      	b.n	80025e6 <HAL_RCC_OscConfig+0x36e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x356>
 80025b4:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a60      	ldr	r2, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a5d      	ldr	r2, [pc, #372]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e00b      	b.n	80025e6 <HAL_RCC_OscConfig+0x36e>
 80025ce:	4b5b      	ldr	r3, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a5a      	ldr	r2, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6213      	str	r3, [r2, #32]
 80025da:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a57      	ldr	r2, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d015      	beq.n	800261a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb95 	bl	8001d1c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fb91 	bl	8001d1c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0b1      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ee      	beq.n	80025f6 <HAL_RCC_OscConfig+0x37e>
 8002618:	e014      	b.n	8002644 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7ff fb7f 	bl	8001d1c <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff fb7b 	bl	8001d1c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e09b      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ee      	bne.n	8002622 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a3b      	ldr	r2, [pc, #236]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002654:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8087 	beq.w	800276e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d061      	beq.n	8002730 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d146      	bne.n	8002702 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7ff fb4f 	bl	8001d1c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7ff fb4b 	bl	8001d1c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e06d      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d108      	bne.n	80026bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4921      	ldr	r1, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a19      	ldr	r1, [r3, #32]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	430b      	orrs	r3, r1
 80026ce:	491b      	ldr	r1, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff fb1f 	bl	8001d1c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7ff fb1b 	bl	8001d1c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e03d      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x46a>
 8002700:	e035      	b.n	800276e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fb08 	bl	8001d1c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7ff fb04 	bl	8001d1c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e026      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_OscConfig+0x4c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x498>
 800272e:	e01e      	b.n	800276e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d107      	bne.n	8002748 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e019      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x500>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	429a      	cmp	r2, r3
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000

0800277c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0d0      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	4965      	ldr	r1, [pc, #404]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0b8      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a58      	ldr	r2, [pc, #352]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fc:	4b50      	ldr	r3, [pc, #320]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	494d      	ldr	r1, [pc, #308]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d040      	beq.n	800289c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d115      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e07f      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e073      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06b      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285a:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4936      	ldr	r1, [pc, #216]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800286c:	f7ff fa56 	bl	8001d1c <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7ff fa52 	bl	8001d1c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e053      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 020c 	and.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d1eb      	bne.n	8002874 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d210      	bcs.n	80028cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	4922      	ldr	r1, [pc, #136]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e032      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4916      	ldr	r1, [pc, #88]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	490e      	ldr	r1, [pc, #56]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290a:	f000 f821 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 800290e:	4602      	mov	r2, r0
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	490a      	ldr	r1, [pc, #40]	; (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	5ccb      	ldrb	r3, [r1, r3]
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	4a09      	ldr	r2, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1cc>)
 8002924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1d0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f9b4 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40022000 	.word	0x40022000
 8002940:	40021000 	.word	0x40021000
 8002944:	08004c90 	.word	0x08004c90
 8002948:	2000001c 	.word	0x2000001c
 800294c:	2000004c 	.word	0x2000004c

08002950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002950:	b490      	push	{r4, r7}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_RCC_GetSysClockFreq+0xac>)
 8002958:	1d3c      	adds	r4, r7, #4
 800295a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800295c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002960:	f240 2301 	movw	r3, #513	; 0x201
 8002964:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	d002      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x40>
 800298a:	2b08      	cmp	r3, #8
 800298c:	d003      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x46>
 800298e:	e02b      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002992:	623b      	str	r3, [r7, #32]
      break;
 8002994:	e02b      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	0c9b      	lsrs	r3, r3, #18
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3328      	adds	r3, #40	; 0x28
 80029a0:	443b      	add	r3, r7
 80029a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0c5b      	lsrs	r3, r3, #17
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	3328      	adds	r3, #40	; 0x28
 80029be:	443b      	add	r3, r7
 80029c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ca:	fb03 f202 	mul.w	r2, r3, r2
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
 80029d6:	e004      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	623b      	str	r3, [r7, #32]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ea:	623b      	str	r3, [r7, #32]
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6a3b      	ldr	r3, [r7, #32]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc90      	pop	{r4, r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	08004c80 	.word	0x08004c80
 8002a00:	40021000 	.word	0x40021000
 8002a04:	007a1200 	.word	0x007a1200
 8002a08:	003d0900 	.word	0x003d0900

08002a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	2000001c 	.word	0x2000001c

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff2 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08004ca0 	.word	0x08004ca0

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffde 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0adb      	lsrs	r3, r3, #11
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08004ca0 	.word	0x08004ca0

08002a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <RCC_Delay+0x34>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <RCC_Delay+0x38>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0a5b      	lsrs	r3, r3, #9
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a8c:	bf00      	nop
  }
  while (Delay --);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	60fa      	str	r2, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f9      	bne.n	8002a8c <RCC_Delay+0x1c>
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	2000001c 	.word	0x2000001c
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e076      	b.n	8002bac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d108      	bne.n	8002ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ace:	d009      	beq.n	8002ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
 8002ad6:	e005      	b.n	8002ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fa06 	bl	8000f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b68:	ea42 0103 	orr.w	r1, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	0c1a      	lsrs	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f002 0204 	and.w	r2, r2, #4
 8002b8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_SPI_Transmit+0x22>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e126      	b.n	8002e24 <HAL_SPI_Transmit+0x270>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bde:	f7ff f89d 	bl	8001d1c <HAL_GetTick>
 8002be2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bf8:	e10b      	b.n	8002e12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Transmit+0x52>
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c0a:	e102      	b.n	8002e12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	88fa      	ldrh	r2, [r7, #6]
 8002c2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c52:	d10f      	bne.n	8002c74 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d007      	beq.n	8002c92 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	d14b      	bne.n	8002d34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_Transmit+0xf6>
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d13e      	bne.n	8002d28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cce:	e02b      	b.n	8002d28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d112      	bne.n	8002d04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d02:	e011      	b.n	8002d28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d04:	f7ff f80a 	bl	8001d1c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_Transmit+0x168>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x16e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d26:	e074      	b.n	8002e12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ce      	bne.n	8002cd0 <HAL_SPI_Transmit+0x11c>
 8002d32:	e04c      	b.n	8002dce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x18e>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d140      	bne.n	8002dc4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d68:	e02c      	b.n	8002dc4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d113      	bne.n	8002da0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9e:	e011      	b.n	8002dc4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da0:	f7fe ffbc 	bl	8001d1c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d803      	bhi.n	8002db8 <HAL_SPI_Transmit+0x204>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Transmit+0x20a>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc2:	e026      	b.n	8002e12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cd      	bne.n	8002d6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fbb8 	bl	8003548 <SPI_EndRxTxTransaction>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e000      	b.n	8002e12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e48:	d112      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10e      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2204      	movs	r2, #4
 8002e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8f1 	bl	800304e <HAL_SPI_TransmitReceive>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	e0ea      	b.n	8003046 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_Receive+0x52>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0e3      	b.n	8003046 <HAL_SPI_Receive+0x21a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e86:	f7fe ff49 	bl	8001d1c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e9c:	e0ca      	b.n	8003034 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Receive+0x7e>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eae:	e0c1      	b.n	8003034 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d10f      	bne.n	8002f18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d007      	beq.n	8002f36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d162      	bne.n	8003004 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f3e:	e02e      	b.n	8002f9e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d115      	bne.n	8002f7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f103 020c 	add.w	r2, r3, #12
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f78:	e011      	b.n	8002f9e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7a:	f7fe fecf 	bl	8001d1c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d803      	bhi.n	8002f92 <HAL_SPI_Receive+0x166>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_Receive+0x16c>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f9c:	e04a      	b.n	8003034 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1cb      	bne.n	8002f40 <HAL_SPI_Receive+0x114>
 8002fa8:	e031      	b.n	800300e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d113      	bne.n	8002fe0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fde:	e011      	b.n	8003004 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe0:	f7fe fe9c 	bl	8001d1c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d803      	bhi.n	8002ff8 <HAL_SPI_Receive+0x1cc>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Receive+0x1d2>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003002:	e017      	b.n	8003034 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1cd      	bne.n	8002faa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa46 	bl	80034a4 <SPI_EndRxTransaction>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
 8003030:	e000      	b.n	8003034 <HAL_SPI_Receive+0x208>
  }

error :
 8003032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08c      	sub	sp, #48	; 0x30
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x26>
 8003070:	2302      	movs	r3, #2
 8003072:	e18a      	b.n	800338a <HAL_SPI_TransmitReceive+0x33c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307c:	f7fe fe4e 	bl	8001d1c <HAL_GetTick>
 8003080:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800309a:	2b01      	cmp	r3, #1
 800309c:	d00f      	beq.n	80030be <HAL_SPI_TransmitReceive+0x70>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a4:	d107      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x68>
 80030ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d003      	beq.n	80030be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030bc:	e15b      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x82>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x82>
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030d6:	e14e      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d003      	beq.n	80030ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2205      	movs	r2, #5
 80030e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	887a      	ldrh	r2, [r7, #2]
 800310e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d007      	beq.n	8003140 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003148:	d178      	bne.n	800323c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x10a>
 8003152:	8b7b      	ldrh	r3, [r7, #26]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d166      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317c:	e053      	b.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d113      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d119      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x1b8>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	b292      	uxth	r2, r2
 80031e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003202:	2301      	movs	r3, #1
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003206:	f7fe fd89 	bl	8001d1c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003212:	429a      	cmp	r2, r3
 8003214:	d807      	bhi.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d003      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003224:	e0a7      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1a6      	bne.n	800317e <HAL_SPI_TransmitReceive+0x130>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1a1      	bne.n	800317e <HAL_SPI_TransmitReceive+0x130>
 800323a:	e07c      	b.n	8003336 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_SPI_TransmitReceive+0x1fc>
 8003244:	8b7b      	ldrh	r3, [r7, #26]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d16b      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003270:	e057      	b.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d11c      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d114      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d119      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x2ae>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f8:	2301      	movs	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032fc:	f7fe fd0e 	bl	8001d1c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003308:	429a      	cmp	r2, r3
 800330a:	d803      	bhi.n	8003314 <HAL_SPI_TransmitReceive+0x2c6>
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d102      	bne.n	800331a <HAL_SPI_TransmitReceive+0x2cc>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003320:	e029      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1a2      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x224>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d19d      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f904 	bl	8003548 <SPI_EndRxTxTransaction>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003352:	e010      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	e000      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800338a:	4618      	mov	r0, r3
 800338c:	3730      	adds	r7, #48	; 0x30
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033a4:	f7fe fcba 	bl	8001d1c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	4413      	add	r3, r2
 80033b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033b4:	f7fe fcb2 	bl	8001d1c <HAL_GetTick>
 80033b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ba:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	015b      	lsls	r3, r3, #5
 80033c0:	0d1b      	lsrs	r3, r3, #20
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ca:	e054      	b.n	8003476 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d050      	beq.n	8003476 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d4:	f7fe fca2 	bl	8001d1c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d902      	bls.n	80033ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d13d      	bne.n	8003466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003402:	d111      	bne.n	8003428 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340c:	d004      	beq.n	8003418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003416:	d107      	bne.n	8003428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003430:	d10f      	bne.n	8003452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e017      	b.n	8003496 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3b01      	subs	r3, #1
 8003474:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	bf0c      	ite	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	2300      	movne	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	429a      	cmp	r2, r3
 8003492:	d19b      	bne.n	80033cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	2000001c 	.word	0x2000001c

080034a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b8:	d111      	bne.n	80034de <SPI_EndRxTransaction+0x3a>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c2:	d004      	beq.n	80034ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034cc:	d107      	bne.n	80034de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e6:	d117      	bne.n	8003518 <SPI_EndRxTransaction+0x74>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f0:	d112      	bne.n	8003518 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2101      	movs	r1, #1
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ff49 	bl	8003394 <SPI_WaitFlagStateUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e013      	b.n	8003540 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff ff36 	bl	8003394 <SPI_WaitFlagStateUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f043 0220 	orr.w	r2, r3, #32
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e000      	b.n	8003540 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff ff18 	bl	8003394 <SPI_WaitFlagStateUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e000      	b.n	800357c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e03f      	b.n	8003616 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fcfa 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	; 0x24
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f829 	bl	8003620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800365a:	f023 030c 	bic.w	r3, r3, #12
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	430b      	orrs	r3, r1
 8003666:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <UART_SetConfig+0x114>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d103      	bne.n	8003690 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7ff f9de 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	e002      	b.n	8003696 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003690:	f7ff f9c6 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003694:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009a      	lsls	r2, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	4a22      	ldr	r2, [pc, #136]	; (8003738 <UART_SetConfig+0x118>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	0119      	lsls	r1, r3, #4
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009a      	lsls	r2, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036cc:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <UART_SetConfig+0x118>)
 80036ce:	fba3 0302 	umull	r0, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2064      	movs	r0, #100	; 0x64
 80036d6:	fb00 f303 	mul.w	r3, r0, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	3332      	adds	r3, #50	; 0x32
 80036e0:	4a15      	ldr	r2, [pc, #84]	; (8003738 <UART_SetConfig+0x118>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ec:	4419      	add	r1, r3
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009a      	lsls	r2, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fbb2 f2f3 	udiv	r2, r2, r3
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <UART_SetConfig+0x118>)
 8003706:	fba3 0302 	umull	r0, r3, r3, r2
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2064      	movs	r0, #100	; 0x64
 800370e:	fb00 f303 	mul.w	r3, r0, r3
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	3332      	adds	r3, #50	; 0x32
 8003718:	4a07      	ldr	r2, [pc, #28]	; (8003738 <UART_SetConfig+0x118>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	440a      	add	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40013800 	.word	0x40013800
 8003738:	51eb851f 	.word	0x51eb851f

0800373c <__errno>:
 800373c:	4b01      	ldr	r3, [pc, #4]	; (8003744 <__errno+0x8>)
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000054 	.word	0x20000054

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	2600      	movs	r6, #0
 800374c:	4d0c      	ldr	r5, [pc, #48]	; (8003780 <__libc_init_array+0x38>)
 800374e:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	42a6      	cmp	r6, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	f001 fa08 	bl	8004b6c <_init>
 800375c:	2600      	movs	r6, #0
 800375e:	4d0a      	ldr	r5, [pc, #40]	; (8003788 <__libc_init_array+0x40>)
 8003760:	4c0a      	ldr	r4, [pc, #40]	; (800378c <__libc_init_array+0x44>)
 8003762:	1b64      	subs	r4, r4, r5
 8003764:	10a4      	asrs	r4, r4, #2
 8003766:	42a6      	cmp	r6, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003770:	4798      	blx	r3
 8003772:	3601      	adds	r6, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	f855 3b04 	ldr.w	r3, [r5], #4
 800377a:	4798      	blx	r3
 800377c:	3601      	adds	r6, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	08004d40 	.word	0x08004d40
 8003784:	08004d40 	.word	0x08004d40
 8003788:	08004d40 	.word	0x08004d40
 800378c:	08004d44 	.word	0x08004d44

08003790 <memset>:
 8003790:	4603      	mov	r3, r0
 8003792:	4402      	add	r2, r0
 8003794:	4293      	cmp	r3, r2
 8003796:	d100      	bne.n	800379a <memset+0xa>
 8003798:	4770      	bx	lr
 800379a:	f803 1b01 	strb.w	r1, [r3], #1
 800379e:	e7f9      	b.n	8003794 <memset+0x4>

080037a0 <iprintf>:
 80037a0:	b40f      	push	{r0, r1, r2, r3}
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <iprintf+0x2c>)
 80037a4:	b513      	push	{r0, r1, r4, lr}
 80037a6:	681c      	ldr	r4, [r3, #0]
 80037a8:	b124      	cbz	r4, 80037b4 <iprintf+0x14>
 80037aa:	69a3      	ldr	r3, [r4, #24]
 80037ac:	b913      	cbnz	r3, 80037b4 <iprintf+0x14>
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 fa7a 	bl	8003ca8 <__sinit>
 80037b4:	ab05      	add	r3, sp, #20
 80037b6:	4620      	mov	r0, r4
 80037b8:	9a04      	ldr	r2, [sp, #16]
 80037ba:	68a1      	ldr	r1, [r4, #8]
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	f000 fdd9 	bl	8004374 <_vfiprintf_r>
 80037c2:	b002      	add	sp, #8
 80037c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c8:	b004      	add	sp, #16
 80037ca:	4770      	bx	lr
 80037cc:	20000054 	.word	0x20000054

080037d0 <_puts_r>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	460e      	mov	r6, r1
 80037d4:	4605      	mov	r5, r0
 80037d6:	b118      	cbz	r0, 80037e0 <_puts_r+0x10>
 80037d8:	6983      	ldr	r3, [r0, #24]
 80037da:	b90b      	cbnz	r3, 80037e0 <_puts_r+0x10>
 80037dc:	f000 fa64 	bl	8003ca8 <__sinit>
 80037e0:	69ab      	ldr	r3, [r5, #24]
 80037e2:	68ac      	ldr	r4, [r5, #8]
 80037e4:	b913      	cbnz	r3, 80037ec <_puts_r+0x1c>
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 fa5e 	bl	8003ca8 <__sinit>
 80037ec:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <_puts_r+0xd0>)
 80037ee:	429c      	cmp	r4, r3
 80037f0:	d120      	bne.n	8003834 <_puts_r+0x64>
 80037f2:	686c      	ldr	r4, [r5, #4]
 80037f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037f6:	07db      	lsls	r3, r3, #31
 80037f8:	d405      	bmi.n	8003806 <_puts_r+0x36>
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	0598      	lsls	r0, r3, #22
 80037fe:	d402      	bmi.n	8003806 <_puts_r+0x36>
 8003800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003802:	f000 faef 	bl	8003de4 <__retarget_lock_acquire_recursive>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	0719      	lsls	r1, r3, #28
 800380a:	d51d      	bpl.n	8003848 <_puts_r+0x78>
 800380c:	6923      	ldr	r3, [r4, #16]
 800380e:	b1db      	cbz	r3, 8003848 <_puts_r+0x78>
 8003810:	3e01      	subs	r6, #1
 8003812:	68a3      	ldr	r3, [r4, #8]
 8003814:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003818:	3b01      	subs	r3, #1
 800381a:	60a3      	str	r3, [r4, #8]
 800381c:	bb39      	cbnz	r1, 800386e <_puts_r+0x9e>
 800381e:	2b00      	cmp	r3, #0
 8003820:	da38      	bge.n	8003894 <_puts_r+0xc4>
 8003822:	4622      	mov	r2, r4
 8003824:	210a      	movs	r1, #10
 8003826:	4628      	mov	r0, r5
 8003828:	f000 f868 	bl	80038fc <__swbuf_r>
 800382c:	3001      	adds	r0, #1
 800382e:	d011      	beq.n	8003854 <_puts_r+0x84>
 8003830:	250a      	movs	r5, #10
 8003832:	e011      	b.n	8003858 <_puts_r+0x88>
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <_puts_r+0xd4>)
 8003836:	429c      	cmp	r4, r3
 8003838:	d101      	bne.n	800383e <_puts_r+0x6e>
 800383a:	68ac      	ldr	r4, [r5, #8]
 800383c:	e7da      	b.n	80037f4 <_puts_r+0x24>
 800383e:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <_puts_r+0xd8>)
 8003840:	429c      	cmp	r4, r3
 8003842:	bf08      	it	eq
 8003844:	68ec      	ldreq	r4, [r5, #12]
 8003846:	e7d5      	b.n	80037f4 <_puts_r+0x24>
 8003848:	4621      	mov	r1, r4
 800384a:	4628      	mov	r0, r5
 800384c:	f000 f8a8 	bl	80039a0 <__swsetup_r>
 8003850:	2800      	cmp	r0, #0
 8003852:	d0dd      	beq.n	8003810 <_puts_r+0x40>
 8003854:	f04f 35ff 	mov.w	r5, #4294967295
 8003858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800385a:	07da      	lsls	r2, r3, #31
 800385c:	d405      	bmi.n	800386a <_puts_r+0x9a>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	059b      	lsls	r3, r3, #22
 8003862:	d402      	bmi.n	800386a <_puts_r+0x9a>
 8003864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003866:	f000 fabe 	bl	8003de6 <__retarget_lock_release_recursive>
 800386a:	4628      	mov	r0, r5
 800386c:	bd70      	pop	{r4, r5, r6, pc}
 800386e:	2b00      	cmp	r3, #0
 8003870:	da04      	bge.n	800387c <_puts_r+0xac>
 8003872:	69a2      	ldr	r2, [r4, #24]
 8003874:	429a      	cmp	r2, r3
 8003876:	dc06      	bgt.n	8003886 <_puts_r+0xb6>
 8003878:	290a      	cmp	r1, #10
 800387a:	d004      	beq.n	8003886 <_puts_r+0xb6>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	6022      	str	r2, [r4, #0]
 8003882:	7019      	strb	r1, [r3, #0]
 8003884:	e7c5      	b.n	8003812 <_puts_r+0x42>
 8003886:	4622      	mov	r2, r4
 8003888:	4628      	mov	r0, r5
 800388a:	f000 f837 	bl	80038fc <__swbuf_r>
 800388e:	3001      	adds	r0, #1
 8003890:	d1bf      	bne.n	8003812 <_puts_r+0x42>
 8003892:	e7df      	b.n	8003854 <_puts_r+0x84>
 8003894:	250a      	movs	r5, #10
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	6022      	str	r2, [r4, #0]
 800389c:	701d      	strb	r5, [r3, #0]
 800389e:	e7db      	b.n	8003858 <_puts_r+0x88>
 80038a0:	08004ccc 	.word	0x08004ccc
 80038a4:	08004cec 	.word	0x08004cec
 80038a8:	08004cac 	.word	0x08004cac

080038ac <puts>:
 80038ac:	4b02      	ldr	r3, [pc, #8]	; (80038b8 <puts+0xc>)
 80038ae:	4601      	mov	r1, r0
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	f7ff bf8d 	b.w	80037d0 <_puts_r>
 80038b6:	bf00      	nop
 80038b8:	20000054 	.word	0x20000054

080038bc <siprintf>:
 80038bc:	b40e      	push	{r1, r2, r3}
 80038be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038c2:	b500      	push	{lr}
 80038c4:	b09c      	sub	sp, #112	; 0x70
 80038c6:	ab1d      	add	r3, sp, #116	; 0x74
 80038c8:	9002      	str	r0, [sp, #8]
 80038ca:	9006      	str	r0, [sp, #24]
 80038cc:	9107      	str	r1, [sp, #28]
 80038ce:	9104      	str	r1, [sp, #16]
 80038d0:	4808      	ldr	r0, [pc, #32]	; (80038f4 <siprintf+0x38>)
 80038d2:	4909      	ldr	r1, [pc, #36]	; (80038f8 <siprintf+0x3c>)
 80038d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038d8:	9105      	str	r1, [sp, #20]
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	a902      	add	r1, sp, #8
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	f000 fc20 	bl	8004124 <_svfiprintf_r>
 80038e4:	2200      	movs	r2, #0
 80038e6:	9b02      	ldr	r3, [sp, #8]
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	b01c      	add	sp, #112	; 0x70
 80038ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80038f0:	b003      	add	sp, #12
 80038f2:	4770      	bx	lr
 80038f4:	20000054 	.word	0x20000054
 80038f8:	ffff0208 	.word	0xffff0208

080038fc <__swbuf_r>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	460e      	mov	r6, r1
 8003900:	4614      	mov	r4, r2
 8003902:	4605      	mov	r5, r0
 8003904:	b118      	cbz	r0, 800390e <__swbuf_r+0x12>
 8003906:	6983      	ldr	r3, [r0, #24]
 8003908:	b90b      	cbnz	r3, 800390e <__swbuf_r+0x12>
 800390a:	f000 f9cd 	bl	8003ca8 <__sinit>
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <__swbuf_r+0x98>)
 8003910:	429c      	cmp	r4, r3
 8003912:	d12b      	bne.n	800396c <__swbuf_r+0x70>
 8003914:	686c      	ldr	r4, [r5, #4]
 8003916:	69a3      	ldr	r3, [r4, #24]
 8003918:	60a3      	str	r3, [r4, #8]
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	071a      	lsls	r2, r3, #28
 800391e:	d52f      	bpl.n	8003980 <__swbuf_r+0x84>
 8003920:	6923      	ldr	r3, [r4, #16]
 8003922:	b36b      	cbz	r3, 8003980 <__swbuf_r+0x84>
 8003924:	6923      	ldr	r3, [r4, #16]
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	b2f6      	uxtb	r6, r6
 800392a:	1ac0      	subs	r0, r0, r3
 800392c:	6963      	ldr	r3, [r4, #20]
 800392e:	4637      	mov	r7, r6
 8003930:	4283      	cmp	r3, r0
 8003932:	dc04      	bgt.n	800393e <__swbuf_r+0x42>
 8003934:	4621      	mov	r1, r4
 8003936:	4628      	mov	r0, r5
 8003938:	f000 f922 	bl	8003b80 <_fflush_r>
 800393c:	bb30      	cbnz	r0, 800398c <__swbuf_r+0x90>
 800393e:	68a3      	ldr	r3, [r4, #8]
 8003940:	3001      	adds	r0, #1
 8003942:	3b01      	subs	r3, #1
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	6022      	str	r2, [r4, #0]
 800394c:	701e      	strb	r6, [r3, #0]
 800394e:	6963      	ldr	r3, [r4, #20]
 8003950:	4283      	cmp	r3, r0
 8003952:	d004      	beq.n	800395e <__swbuf_r+0x62>
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	07db      	lsls	r3, r3, #31
 8003958:	d506      	bpl.n	8003968 <__swbuf_r+0x6c>
 800395a:	2e0a      	cmp	r6, #10
 800395c:	d104      	bne.n	8003968 <__swbuf_r+0x6c>
 800395e:	4621      	mov	r1, r4
 8003960:	4628      	mov	r0, r5
 8003962:	f000 f90d 	bl	8003b80 <_fflush_r>
 8003966:	b988      	cbnz	r0, 800398c <__swbuf_r+0x90>
 8003968:	4638      	mov	r0, r7
 800396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <__swbuf_r+0x9c>)
 800396e:	429c      	cmp	r4, r3
 8003970:	d101      	bne.n	8003976 <__swbuf_r+0x7a>
 8003972:	68ac      	ldr	r4, [r5, #8]
 8003974:	e7cf      	b.n	8003916 <__swbuf_r+0x1a>
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <__swbuf_r+0xa0>)
 8003978:	429c      	cmp	r4, r3
 800397a:	bf08      	it	eq
 800397c:	68ec      	ldreq	r4, [r5, #12]
 800397e:	e7ca      	b.n	8003916 <__swbuf_r+0x1a>
 8003980:	4621      	mov	r1, r4
 8003982:	4628      	mov	r0, r5
 8003984:	f000 f80c 	bl	80039a0 <__swsetup_r>
 8003988:	2800      	cmp	r0, #0
 800398a:	d0cb      	beq.n	8003924 <__swbuf_r+0x28>
 800398c:	f04f 37ff 	mov.w	r7, #4294967295
 8003990:	e7ea      	b.n	8003968 <__swbuf_r+0x6c>
 8003992:	bf00      	nop
 8003994:	08004ccc 	.word	0x08004ccc
 8003998:	08004cec 	.word	0x08004cec
 800399c:	08004cac 	.word	0x08004cac

080039a0 <__swsetup_r>:
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <__swsetup_r+0xcc>)
 80039a2:	b570      	push	{r4, r5, r6, lr}
 80039a4:	681d      	ldr	r5, [r3, #0]
 80039a6:	4606      	mov	r6, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	b125      	cbz	r5, 80039b6 <__swsetup_r+0x16>
 80039ac:	69ab      	ldr	r3, [r5, #24]
 80039ae:	b913      	cbnz	r3, 80039b6 <__swsetup_r+0x16>
 80039b0:	4628      	mov	r0, r5
 80039b2:	f000 f979 	bl	8003ca8 <__sinit>
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <__swsetup_r+0xd0>)
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d10f      	bne.n	80039dc <__swsetup_r+0x3c>
 80039bc:	686c      	ldr	r4, [r5, #4]
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039c4:	0719      	lsls	r1, r3, #28
 80039c6:	d42c      	bmi.n	8003a22 <__swsetup_r+0x82>
 80039c8:	06dd      	lsls	r5, r3, #27
 80039ca:	d411      	bmi.n	80039f0 <__swsetup_r+0x50>
 80039cc:	2309      	movs	r3, #9
 80039ce:	6033      	str	r3, [r6, #0]
 80039d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	e03e      	b.n	8003a5a <__swsetup_r+0xba>
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <__swsetup_r+0xd4>)
 80039de:	429c      	cmp	r4, r3
 80039e0:	d101      	bne.n	80039e6 <__swsetup_r+0x46>
 80039e2:	68ac      	ldr	r4, [r5, #8]
 80039e4:	e7eb      	b.n	80039be <__swsetup_r+0x1e>
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <__swsetup_r+0xd8>)
 80039e8:	429c      	cmp	r4, r3
 80039ea:	bf08      	it	eq
 80039ec:	68ec      	ldreq	r4, [r5, #12]
 80039ee:	e7e6      	b.n	80039be <__swsetup_r+0x1e>
 80039f0:	0758      	lsls	r0, r3, #29
 80039f2:	d512      	bpl.n	8003a1a <__swsetup_r+0x7a>
 80039f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039f6:	b141      	cbz	r1, 8003a0a <__swsetup_r+0x6a>
 80039f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039fc:	4299      	cmp	r1, r3
 80039fe:	d002      	beq.n	8003a06 <__swsetup_r+0x66>
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 fa57 	bl	8003eb4 <_free_r>
 8003a06:	2300      	movs	r3, #0
 8003a08:	6363      	str	r3, [r4, #52]	; 0x34
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	2300      	movs	r3, #0
 8003a14:	6063      	str	r3, [r4, #4]
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	b94b      	cbnz	r3, 8003a3a <__swsetup_r+0x9a>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a30:	d003      	beq.n	8003a3a <__swsetup_r+0x9a>
 8003a32:	4621      	mov	r1, r4
 8003a34:	4630      	mov	r0, r6
 8003a36:	f000 f9fd 	bl	8003e34 <__smakebuf_r>
 8003a3a:	89a0      	ldrh	r0, [r4, #12]
 8003a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a40:	f010 0301 	ands.w	r3, r0, #1
 8003a44:	d00a      	beq.n	8003a5c <__swsetup_r+0xbc>
 8003a46:	2300      	movs	r3, #0
 8003a48:	60a3      	str	r3, [r4, #8]
 8003a4a:	6963      	ldr	r3, [r4, #20]
 8003a4c:	425b      	negs	r3, r3
 8003a4e:	61a3      	str	r3, [r4, #24]
 8003a50:	6923      	ldr	r3, [r4, #16]
 8003a52:	b943      	cbnz	r3, 8003a66 <__swsetup_r+0xc6>
 8003a54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a58:	d1ba      	bne.n	80039d0 <__swsetup_r+0x30>
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
 8003a5c:	0781      	lsls	r1, r0, #30
 8003a5e:	bf58      	it	pl
 8003a60:	6963      	ldrpl	r3, [r4, #20]
 8003a62:	60a3      	str	r3, [r4, #8]
 8003a64:	e7f4      	b.n	8003a50 <__swsetup_r+0xb0>
 8003a66:	2000      	movs	r0, #0
 8003a68:	e7f7      	b.n	8003a5a <__swsetup_r+0xba>
 8003a6a:	bf00      	nop
 8003a6c:	20000054 	.word	0x20000054
 8003a70:	08004ccc 	.word	0x08004ccc
 8003a74:	08004cec 	.word	0x08004cec
 8003a78:	08004cac 	.word	0x08004cac

08003a7c <__sflush_r>:
 8003a7c:	898a      	ldrh	r2, [r1, #12]
 8003a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a80:	4605      	mov	r5, r0
 8003a82:	0710      	lsls	r0, r2, #28
 8003a84:	460c      	mov	r4, r1
 8003a86:	d457      	bmi.n	8003b38 <__sflush_r+0xbc>
 8003a88:	684b      	ldr	r3, [r1, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	dc04      	bgt.n	8003a98 <__sflush_r+0x1c>
 8003a8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	dc01      	bgt.n	8003a98 <__sflush_r+0x1c>
 8003a94:	2000      	movs	r0, #0
 8003a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a9a:	2e00      	cmp	r6, #0
 8003a9c:	d0fa      	beq.n	8003a94 <__sflush_r+0x18>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003aa4:	682f      	ldr	r7, [r5, #0]
 8003aa6:	602b      	str	r3, [r5, #0]
 8003aa8:	d032      	beq.n	8003b10 <__sflush_r+0x94>
 8003aaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	075a      	lsls	r2, r3, #29
 8003ab0:	d505      	bpl.n	8003abe <__sflush_r+0x42>
 8003ab2:	6863      	ldr	r3, [r4, #4]
 8003ab4:	1ac0      	subs	r0, r0, r3
 8003ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ab8:	b10b      	cbz	r3, 8003abe <__sflush_r+0x42>
 8003aba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003abc:	1ac0      	subs	r0, r0, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	6a21      	ldr	r1, [r4, #32]
 8003ac8:	47b0      	blx	r6
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	d106      	bne.n	8003ade <__sflush_r+0x62>
 8003ad0:	6829      	ldr	r1, [r5, #0]
 8003ad2:	291d      	cmp	r1, #29
 8003ad4:	d82c      	bhi.n	8003b30 <__sflush_r+0xb4>
 8003ad6:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <__sflush_r+0x100>)
 8003ad8:	40ca      	lsrs	r2, r1
 8003ada:	07d6      	lsls	r6, r2, #31
 8003adc:	d528      	bpl.n	8003b30 <__sflush_r+0xb4>
 8003ade:	2200      	movs	r2, #0
 8003ae0:	6062      	str	r2, [r4, #4]
 8003ae2:	6922      	ldr	r2, [r4, #16]
 8003ae4:	04d9      	lsls	r1, r3, #19
 8003ae6:	6022      	str	r2, [r4, #0]
 8003ae8:	d504      	bpl.n	8003af4 <__sflush_r+0x78>
 8003aea:	1c42      	adds	r2, r0, #1
 8003aec:	d101      	bne.n	8003af2 <__sflush_r+0x76>
 8003aee:	682b      	ldr	r3, [r5, #0]
 8003af0:	b903      	cbnz	r3, 8003af4 <__sflush_r+0x78>
 8003af2:	6560      	str	r0, [r4, #84]	; 0x54
 8003af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003af6:	602f      	str	r7, [r5, #0]
 8003af8:	2900      	cmp	r1, #0
 8003afa:	d0cb      	beq.n	8003a94 <__sflush_r+0x18>
 8003afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b00:	4299      	cmp	r1, r3
 8003b02:	d002      	beq.n	8003b0a <__sflush_r+0x8e>
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 f9d5 	bl	8003eb4 <_free_r>
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8003b0e:	e7c2      	b.n	8003a96 <__sflush_r+0x1a>
 8003b10:	6a21      	ldr	r1, [r4, #32]
 8003b12:	2301      	movs	r3, #1
 8003b14:	4628      	mov	r0, r5
 8003b16:	47b0      	blx	r6
 8003b18:	1c41      	adds	r1, r0, #1
 8003b1a:	d1c7      	bne.n	8003aac <__sflush_r+0x30>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0c4      	beq.n	8003aac <__sflush_r+0x30>
 8003b22:	2b1d      	cmp	r3, #29
 8003b24:	d001      	beq.n	8003b2a <__sflush_r+0xae>
 8003b26:	2b16      	cmp	r3, #22
 8003b28:	d101      	bne.n	8003b2e <__sflush_r+0xb2>
 8003b2a:	602f      	str	r7, [r5, #0]
 8003b2c:	e7b2      	b.n	8003a94 <__sflush_r+0x18>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	e7ae      	b.n	8003a96 <__sflush_r+0x1a>
 8003b38:	690f      	ldr	r7, [r1, #16]
 8003b3a:	2f00      	cmp	r7, #0
 8003b3c:	d0aa      	beq.n	8003a94 <__sflush_r+0x18>
 8003b3e:	0793      	lsls	r3, r2, #30
 8003b40:	bf18      	it	ne
 8003b42:	2300      	movne	r3, #0
 8003b44:	680e      	ldr	r6, [r1, #0]
 8003b46:	bf08      	it	eq
 8003b48:	694b      	ldreq	r3, [r1, #20]
 8003b4a:	1bf6      	subs	r6, r6, r7
 8003b4c:	600f      	str	r7, [r1, #0]
 8003b4e:	608b      	str	r3, [r1, #8]
 8003b50:	2e00      	cmp	r6, #0
 8003b52:	dd9f      	ble.n	8003a94 <__sflush_r+0x18>
 8003b54:	4633      	mov	r3, r6
 8003b56:	463a      	mov	r2, r7
 8003b58:	4628      	mov	r0, r5
 8003b5a:	6a21      	ldr	r1, [r4, #32]
 8003b5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003b60:	47e0      	blx	ip
 8003b62:	2800      	cmp	r0, #0
 8003b64:	dc06      	bgt.n	8003b74 <__sflush_r+0xf8>
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	e790      	b.n	8003a96 <__sflush_r+0x1a>
 8003b74:	4407      	add	r7, r0
 8003b76:	1a36      	subs	r6, r6, r0
 8003b78:	e7ea      	b.n	8003b50 <__sflush_r+0xd4>
 8003b7a:	bf00      	nop
 8003b7c:	20400001 	.word	0x20400001

08003b80 <_fflush_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	690b      	ldr	r3, [r1, #16]
 8003b84:	4605      	mov	r5, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b913      	cbnz	r3, 8003b90 <_fflush_r+0x10>
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	b118      	cbz	r0, 8003b9a <_fflush_r+0x1a>
 8003b92:	6983      	ldr	r3, [r0, #24]
 8003b94:	b90b      	cbnz	r3, 8003b9a <_fflush_r+0x1a>
 8003b96:	f000 f887 	bl	8003ca8 <__sinit>
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <_fflush_r+0x6c>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d11b      	bne.n	8003bd8 <_fflush_r+0x58>
 8003ba0:	686c      	ldr	r4, [r5, #4]
 8003ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ef      	beq.n	8003b8a <_fflush_r+0xa>
 8003baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bac:	07d0      	lsls	r0, r2, #31
 8003bae:	d404      	bmi.n	8003bba <_fflush_r+0x3a>
 8003bb0:	0599      	lsls	r1, r3, #22
 8003bb2:	d402      	bmi.n	8003bba <_fflush_r+0x3a>
 8003bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bb6:	f000 f915 	bl	8003de4 <__retarget_lock_acquire_recursive>
 8003bba:	4628      	mov	r0, r5
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	f7ff ff5d 	bl	8003a7c <__sflush_r>
 8003bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	07da      	lsls	r2, r3, #31
 8003bc8:	d4e0      	bmi.n	8003b8c <_fflush_r+0xc>
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	059b      	lsls	r3, r3, #22
 8003bce:	d4dd      	bmi.n	8003b8c <_fflush_r+0xc>
 8003bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd2:	f000 f908 	bl	8003de6 <__retarget_lock_release_recursive>
 8003bd6:	e7d9      	b.n	8003b8c <_fflush_r+0xc>
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_fflush_r+0x70>)
 8003bda:	429c      	cmp	r4, r3
 8003bdc:	d101      	bne.n	8003be2 <_fflush_r+0x62>
 8003bde:	68ac      	ldr	r4, [r5, #8]
 8003be0:	e7df      	b.n	8003ba2 <_fflush_r+0x22>
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <_fflush_r+0x74>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	bf08      	it	eq
 8003be8:	68ec      	ldreq	r4, [r5, #12]
 8003bea:	e7da      	b.n	8003ba2 <_fflush_r+0x22>
 8003bec:	08004ccc 	.word	0x08004ccc
 8003bf0:	08004cec 	.word	0x08004cec
 8003bf4:	08004cac 	.word	0x08004cac

08003bf8 <std>:
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8003c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c06:	6083      	str	r3, [r0, #8]
 8003c08:	8181      	strh	r1, [r0, #12]
 8003c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c0c:	81c2      	strh	r2, [r0, #14]
 8003c0e:	6183      	str	r3, [r0, #24]
 8003c10:	4619      	mov	r1, r3
 8003c12:	2208      	movs	r2, #8
 8003c14:	305c      	adds	r0, #92	; 0x5c
 8003c16:	f7ff fdbb 	bl	8003790 <memset>
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <std+0x38>)
 8003c1c:	6224      	str	r4, [r4, #32]
 8003c1e:	6263      	str	r3, [r4, #36]	; 0x24
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <std+0x3c>)
 8003c22:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <std+0x40>)
 8003c26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <std+0x44>)
 8003c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	bf00      	nop
 8003c30:	08004921 	.word	0x08004921
 8003c34:	08004943 	.word	0x08004943
 8003c38:	0800497b 	.word	0x0800497b
 8003c3c:	0800499f 	.word	0x0800499f

08003c40 <_cleanup_r>:
 8003c40:	4901      	ldr	r1, [pc, #4]	; (8003c48 <_cleanup_r+0x8>)
 8003c42:	f000 b8af 	b.w	8003da4 <_fwalk_reent>
 8003c46:	bf00      	nop
 8003c48:	08003b81 	.word	0x08003b81

08003c4c <__sfmoreglue>:
 8003c4c:	2268      	movs	r2, #104	; 0x68
 8003c4e:	b570      	push	{r4, r5, r6, lr}
 8003c50:	1e4d      	subs	r5, r1, #1
 8003c52:	4355      	muls	r5, r2
 8003c54:	460e      	mov	r6, r1
 8003c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c5a:	f000 f993 	bl	8003f84 <_malloc_r>
 8003c5e:	4604      	mov	r4, r0
 8003c60:	b140      	cbz	r0, 8003c74 <__sfmoreglue+0x28>
 8003c62:	2100      	movs	r1, #0
 8003c64:	e9c0 1600 	strd	r1, r6, [r0]
 8003c68:	300c      	adds	r0, #12
 8003c6a:	60a0      	str	r0, [r4, #8]
 8003c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c70:	f7ff fd8e 	bl	8003790 <memset>
 8003c74:	4620      	mov	r0, r4
 8003c76:	bd70      	pop	{r4, r5, r6, pc}

08003c78 <__sfp_lock_acquire>:
 8003c78:	4801      	ldr	r0, [pc, #4]	; (8003c80 <__sfp_lock_acquire+0x8>)
 8003c7a:	f000 b8b3 	b.w	8003de4 <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	20000221 	.word	0x20000221

08003c84 <__sfp_lock_release>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__sfp_lock_release+0x8>)
 8003c86:	f000 b8ae 	b.w	8003de6 <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	20000221 	.word	0x20000221

08003c90 <__sinit_lock_acquire>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__sinit_lock_acquire+0x8>)
 8003c92:	f000 b8a7 	b.w	8003de4 <__retarget_lock_acquire_recursive>
 8003c96:	bf00      	nop
 8003c98:	20000222 	.word	0x20000222

08003c9c <__sinit_lock_release>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	; (8003ca4 <__sinit_lock_release+0x8>)
 8003c9e:	f000 b8a2 	b.w	8003de6 <__retarget_lock_release_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	20000222 	.word	0x20000222

08003ca8 <__sinit>:
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	4604      	mov	r4, r0
 8003cac:	f7ff fff0 	bl	8003c90 <__sinit_lock_acquire>
 8003cb0:	69a3      	ldr	r3, [r4, #24]
 8003cb2:	b11b      	cbz	r3, 8003cbc <__sinit+0x14>
 8003cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb8:	f7ff bff0 	b.w	8003c9c <__sinit_lock_release>
 8003cbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003cc0:	6523      	str	r3, [r4, #80]	; 0x50
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <__sinit+0x68>)
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <__sinit+0x6c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003cca:	42a3      	cmp	r3, r4
 8003ccc:	bf08      	it	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	bf08      	it	eq
 8003cd4:	61a3      	streq	r3, [r4, #24]
 8003cd6:	f000 f81f 	bl	8003d18 <__sfp>
 8003cda:	6060      	str	r0, [r4, #4]
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f000 f81b 	bl	8003d18 <__sfp>
 8003ce2:	60a0      	str	r0, [r4, #8]
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f000 f817 	bl	8003d18 <__sfp>
 8003cea:	2200      	movs	r2, #0
 8003cec:	2104      	movs	r1, #4
 8003cee:	60e0      	str	r0, [r4, #12]
 8003cf0:	6860      	ldr	r0, [r4, #4]
 8003cf2:	f7ff ff81 	bl	8003bf8 <std>
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	2109      	movs	r1, #9
 8003cfa:	68a0      	ldr	r0, [r4, #8]
 8003cfc:	f7ff ff7c 	bl	8003bf8 <std>
 8003d00:	2202      	movs	r2, #2
 8003d02:	2112      	movs	r1, #18
 8003d04:	68e0      	ldr	r0, [r4, #12]
 8003d06:	f7ff ff77 	bl	8003bf8 <std>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61a3      	str	r3, [r4, #24]
 8003d0e:	e7d1      	b.n	8003cb4 <__sinit+0xc>
 8003d10:	08004ca8 	.word	0x08004ca8
 8003d14:	08003c41 	.word	0x08003c41

08003d18 <__sfp>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	4607      	mov	r7, r0
 8003d1c:	f7ff ffac 	bl	8003c78 <__sfp_lock_acquire>
 8003d20:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <__sfp+0x84>)
 8003d22:	681e      	ldr	r6, [r3, #0]
 8003d24:	69b3      	ldr	r3, [r6, #24]
 8003d26:	b913      	cbnz	r3, 8003d2e <__sfp+0x16>
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f7ff ffbd 	bl	8003ca8 <__sinit>
 8003d2e:	3648      	adds	r6, #72	; 0x48
 8003d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	d503      	bpl.n	8003d40 <__sfp+0x28>
 8003d38:	6833      	ldr	r3, [r6, #0]
 8003d3a:	b30b      	cbz	r3, 8003d80 <__sfp+0x68>
 8003d3c:	6836      	ldr	r6, [r6, #0]
 8003d3e:	e7f7      	b.n	8003d30 <__sfp+0x18>
 8003d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d44:	b9d5      	cbnz	r5, 8003d7c <__sfp+0x64>
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <__sfp+0x88>)
 8003d48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d4c:	60e3      	str	r3, [r4, #12]
 8003d4e:	6665      	str	r5, [r4, #100]	; 0x64
 8003d50:	f000 f847 	bl	8003de2 <__retarget_lock_init_recursive>
 8003d54:	f7ff ff96 	bl	8003c84 <__sfp_lock_release>
 8003d58:	2208      	movs	r2, #8
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d64:	6025      	str	r5, [r4, #0]
 8003d66:	61a5      	str	r5, [r4, #24]
 8003d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d6c:	f7ff fd10 	bl	8003790 <memset>
 8003d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d78:	4620      	mov	r0, r4
 8003d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d7c:	3468      	adds	r4, #104	; 0x68
 8003d7e:	e7d9      	b.n	8003d34 <__sfp+0x1c>
 8003d80:	2104      	movs	r1, #4
 8003d82:	4638      	mov	r0, r7
 8003d84:	f7ff ff62 	bl	8003c4c <__sfmoreglue>
 8003d88:	4604      	mov	r4, r0
 8003d8a:	6030      	str	r0, [r6, #0]
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d1d5      	bne.n	8003d3c <__sfp+0x24>
 8003d90:	f7ff ff78 	bl	8003c84 <__sfp_lock_release>
 8003d94:	230c      	movs	r3, #12
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	e7ee      	b.n	8003d78 <__sfp+0x60>
 8003d9a:	bf00      	nop
 8003d9c:	08004ca8 	.word	0x08004ca8
 8003da0:	ffff0001 	.word	0xffff0001

08003da4 <_fwalk_reent>:
 8003da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da8:	4606      	mov	r6, r0
 8003daa:	4688      	mov	r8, r1
 8003dac:	2700      	movs	r7, #0
 8003dae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003db2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003db6:	f1b9 0901 	subs.w	r9, r9, #1
 8003dba:	d505      	bpl.n	8003dc8 <_fwalk_reent+0x24>
 8003dbc:	6824      	ldr	r4, [r4, #0]
 8003dbe:	2c00      	cmp	r4, #0
 8003dc0:	d1f7      	bne.n	8003db2 <_fwalk_reent+0xe>
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dc8:	89ab      	ldrh	r3, [r5, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d907      	bls.n	8003dde <_fwalk_reent+0x3a>
 8003dce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	d003      	beq.n	8003dde <_fwalk_reent+0x3a>
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	4630      	mov	r0, r6
 8003dda:	47c0      	blx	r8
 8003ddc:	4307      	orrs	r7, r0
 8003dde:	3568      	adds	r5, #104	; 0x68
 8003de0:	e7e9      	b.n	8003db6 <_fwalk_reent+0x12>

08003de2 <__retarget_lock_init_recursive>:
 8003de2:	4770      	bx	lr

08003de4 <__retarget_lock_acquire_recursive>:
 8003de4:	4770      	bx	lr

08003de6 <__retarget_lock_release_recursive>:
 8003de6:	4770      	bx	lr

08003de8 <__swhatbuf_r>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	460e      	mov	r6, r1
 8003dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df0:	4614      	mov	r4, r2
 8003df2:	2900      	cmp	r1, #0
 8003df4:	461d      	mov	r5, r3
 8003df6:	b096      	sub	sp, #88	; 0x58
 8003df8:	da08      	bge.n	8003e0c <__swhatbuf_r+0x24>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e00:	602a      	str	r2, [r5, #0]
 8003e02:	061a      	lsls	r2, r3, #24
 8003e04:	d410      	bmi.n	8003e28 <__swhatbuf_r+0x40>
 8003e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e0a:	e00e      	b.n	8003e2a <__swhatbuf_r+0x42>
 8003e0c:	466a      	mov	r2, sp
 8003e0e:	f000 fded 	bl	80049ec <_fstat_r>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	dbf1      	blt.n	8003dfa <__swhatbuf_r+0x12>
 8003e16:	9a01      	ldr	r2, [sp, #4]
 8003e18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e20:	425a      	negs	r2, r3
 8003e22:	415a      	adcs	r2, r3
 8003e24:	602a      	str	r2, [r5, #0]
 8003e26:	e7ee      	b.n	8003e06 <__swhatbuf_r+0x1e>
 8003e28:	2340      	movs	r3, #64	; 0x40
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	b016      	add	sp, #88	; 0x58
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e34 <__smakebuf_r>:
 8003e34:	898b      	ldrh	r3, [r1, #12]
 8003e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e38:	079d      	lsls	r5, r3, #30
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	d507      	bpl.n	8003e50 <__smakebuf_r+0x1c>
 8003e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	6123      	str	r3, [r4, #16]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	6163      	str	r3, [r4, #20]
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	466a      	mov	r2, sp
 8003e52:	ab01      	add	r3, sp, #4
 8003e54:	f7ff ffc8 	bl	8003de8 <__swhatbuf_r>
 8003e58:	9900      	ldr	r1, [sp, #0]
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f000 f891 	bl	8003f84 <_malloc_r>
 8003e62:	b948      	cbnz	r0, 8003e78 <__smakebuf_r+0x44>
 8003e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e68:	059a      	lsls	r2, r3, #22
 8003e6a:	d4ef      	bmi.n	8003e4c <__smakebuf_r+0x18>
 8003e6c:	f023 0303 	bic.w	r3, r3, #3
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	81a3      	strh	r3, [r4, #12]
 8003e76:	e7e3      	b.n	8003e40 <__smakebuf_r+0xc>
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <__smakebuf_r+0x7c>)
 8003e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	6020      	str	r0, [r4, #0]
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	9b00      	ldr	r3, [sp, #0]
 8003e88:	6120      	str	r0, [r4, #16]
 8003e8a:	6163      	str	r3, [r4, #20]
 8003e8c:	9b01      	ldr	r3, [sp, #4]
 8003e8e:	b15b      	cbz	r3, 8003ea8 <__smakebuf_r+0x74>
 8003e90:	4630      	mov	r0, r6
 8003e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e96:	f000 fdbb 	bl	8004a10 <_isatty_r>
 8003e9a:	b128      	cbz	r0, 8003ea8 <__smakebuf_r+0x74>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	89a0      	ldrh	r0, [r4, #12]
 8003eaa:	4305      	orrs	r5, r0
 8003eac:	81a5      	strh	r5, [r4, #12]
 8003eae:	e7cd      	b.n	8003e4c <__smakebuf_r+0x18>
 8003eb0:	08003c41 	.word	0x08003c41

08003eb4 <_free_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d040      	beq.n	8003f3e <_free_r+0x8a>
 8003ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec0:	1f0c      	subs	r4, r1, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfb8      	it	lt
 8003ec6:	18e4      	addlt	r4, r4, r3
 8003ec8:	f000 fdfa 	bl	8004ac0 <__malloc_lock>
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <_free_r+0x8c>)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	b933      	cbnz	r3, 8003ee0 <_free_r+0x2c>
 8003ed2:	6063      	str	r3, [r4, #4]
 8003ed4:	6014      	str	r4, [r2, #0]
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003edc:	f000 bdf6 	b.w	8004acc <__malloc_unlock>
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	d908      	bls.n	8003ef6 <_free_r+0x42>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	1821      	adds	r1, r4, r0
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	bf01      	itttt	eq
 8003eec:	6819      	ldreq	r1, [r3, #0]
 8003eee:	685b      	ldreq	r3, [r3, #4]
 8003ef0:	1809      	addeq	r1, r1, r0
 8003ef2:	6021      	streq	r1, [r4, #0]
 8003ef4:	e7ed      	b.n	8003ed2 <_free_r+0x1e>
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b10b      	cbz	r3, 8003f00 <_free_r+0x4c>
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d9fa      	bls.n	8003ef6 <_free_r+0x42>
 8003f00:	6811      	ldr	r1, [r2, #0]
 8003f02:	1850      	adds	r0, r2, r1
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d10b      	bne.n	8003f20 <_free_r+0x6c>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	4401      	add	r1, r0
 8003f0c:	1850      	adds	r0, r2, r1
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	d1e0      	bne.n	8003ed6 <_free_r+0x22>
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4401      	add	r1, r0
 8003f1a:	6011      	str	r1, [r2, #0]
 8003f1c:	6053      	str	r3, [r2, #4]
 8003f1e:	e7da      	b.n	8003ed6 <_free_r+0x22>
 8003f20:	d902      	bls.n	8003f28 <_free_r+0x74>
 8003f22:	230c      	movs	r3, #12
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	e7d6      	b.n	8003ed6 <_free_r+0x22>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	1821      	adds	r1, r4, r0
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	bf01      	itttt	eq
 8003f30:	6819      	ldreq	r1, [r3, #0]
 8003f32:	685b      	ldreq	r3, [r3, #4]
 8003f34:	1809      	addeq	r1, r1, r0
 8003f36:	6021      	streq	r1, [r4, #0]
 8003f38:	6063      	str	r3, [r4, #4]
 8003f3a:	6054      	str	r4, [r2, #4]
 8003f3c:	e7cb      	b.n	8003ed6 <_free_r+0x22>
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	20000224 	.word	0x20000224

08003f44 <sbrk_aligned>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4e0e      	ldr	r6, [pc, #56]	; (8003f80 <sbrk_aligned+0x3c>)
 8003f48:	460c      	mov	r4, r1
 8003f4a:	6831      	ldr	r1, [r6, #0]
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	b911      	cbnz	r1, 8003f56 <sbrk_aligned+0x12>
 8003f50:	f000 fcd6 	bl	8004900 <_sbrk_r>
 8003f54:	6030      	str	r0, [r6, #0]
 8003f56:	4621      	mov	r1, r4
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 fcd1 	bl	8004900 <_sbrk_r>
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	d00a      	beq.n	8003f78 <sbrk_aligned+0x34>
 8003f62:	1cc4      	adds	r4, r0, #3
 8003f64:	f024 0403 	bic.w	r4, r4, #3
 8003f68:	42a0      	cmp	r0, r4
 8003f6a:	d007      	beq.n	8003f7c <sbrk_aligned+0x38>
 8003f6c:	1a21      	subs	r1, r4, r0
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 fcc6 	bl	8004900 <_sbrk_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d101      	bne.n	8003f7c <sbrk_aligned+0x38>
 8003f78:	f04f 34ff 	mov.w	r4, #4294967295
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	20000228 	.word	0x20000228

08003f84 <_malloc_r>:
 8003f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f88:	1ccd      	adds	r5, r1, #3
 8003f8a:	f025 0503 	bic.w	r5, r5, #3
 8003f8e:	3508      	adds	r5, #8
 8003f90:	2d0c      	cmp	r5, #12
 8003f92:	bf38      	it	cc
 8003f94:	250c      	movcc	r5, #12
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	4607      	mov	r7, r0
 8003f9a:	db01      	blt.n	8003fa0 <_malloc_r+0x1c>
 8003f9c:	42a9      	cmp	r1, r5
 8003f9e:	d905      	bls.n	8003fac <_malloc_r+0x28>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fac:	4e2e      	ldr	r6, [pc, #184]	; (8004068 <_malloc_r+0xe4>)
 8003fae:	f000 fd87 	bl	8004ac0 <__malloc_lock>
 8003fb2:	6833      	ldr	r3, [r6, #0]
 8003fb4:	461c      	mov	r4, r3
 8003fb6:	bb34      	cbnz	r4, 8004006 <_malloc_r+0x82>
 8003fb8:	4629      	mov	r1, r5
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f7ff ffc2 	bl	8003f44 <sbrk_aligned>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	d14d      	bne.n	8004062 <_malloc_r+0xde>
 8003fc6:	6834      	ldr	r4, [r6, #0]
 8003fc8:	4626      	mov	r6, r4
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	d140      	bne.n	8004050 <_malloc_r+0xcc>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	eb04 0803 	add.w	r8, r4, r3
 8003fd8:	f000 fc92 	bl	8004900 <_sbrk_r>
 8003fdc:	4580      	cmp	r8, r0
 8003fde:	d13a      	bne.n	8004056 <_malloc_r+0xd2>
 8003fe0:	6821      	ldr	r1, [r4, #0]
 8003fe2:	3503      	adds	r5, #3
 8003fe4:	1a6d      	subs	r5, r5, r1
 8003fe6:	f025 0503 	bic.w	r5, r5, #3
 8003fea:	3508      	adds	r5, #8
 8003fec:	2d0c      	cmp	r5, #12
 8003fee:	bf38      	it	cc
 8003ff0:	250c      	movcc	r5, #12
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7ff ffa5 	bl	8003f44 <sbrk_aligned>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d02b      	beq.n	8004056 <_malloc_r+0xd2>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	442b      	add	r3, r5
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	e00e      	b.n	8004024 <_malloc_r+0xa0>
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	1b52      	subs	r2, r2, r5
 800400a:	d41e      	bmi.n	800404a <_malloc_r+0xc6>
 800400c:	2a0b      	cmp	r2, #11
 800400e:	d916      	bls.n	800403e <_malloc_r+0xba>
 8004010:	1961      	adds	r1, r4, r5
 8004012:	42a3      	cmp	r3, r4
 8004014:	6025      	str	r5, [r4, #0]
 8004016:	bf18      	it	ne
 8004018:	6059      	strne	r1, [r3, #4]
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	bf08      	it	eq
 800401e:	6031      	streq	r1, [r6, #0]
 8004020:	5162      	str	r2, [r4, r5]
 8004022:	604b      	str	r3, [r1, #4]
 8004024:	4638      	mov	r0, r7
 8004026:	f104 060b 	add.w	r6, r4, #11
 800402a:	f000 fd4f 	bl	8004acc <__malloc_unlock>
 800402e:	f026 0607 	bic.w	r6, r6, #7
 8004032:	1d23      	adds	r3, r4, #4
 8004034:	1af2      	subs	r2, r6, r3
 8004036:	d0b6      	beq.n	8003fa6 <_malloc_r+0x22>
 8004038:	1b9b      	subs	r3, r3, r6
 800403a:	50a3      	str	r3, [r4, r2]
 800403c:	e7b3      	b.n	8003fa6 <_malloc_r+0x22>
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	42a3      	cmp	r3, r4
 8004042:	bf0c      	ite	eq
 8004044:	6032      	streq	r2, [r6, #0]
 8004046:	605a      	strne	r2, [r3, #4]
 8004048:	e7ec      	b.n	8004024 <_malloc_r+0xa0>
 800404a:	4623      	mov	r3, r4
 800404c:	6864      	ldr	r4, [r4, #4]
 800404e:	e7b2      	b.n	8003fb6 <_malloc_r+0x32>
 8004050:	4634      	mov	r4, r6
 8004052:	6876      	ldr	r6, [r6, #4]
 8004054:	e7b9      	b.n	8003fca <_malloc_r+0x46>
 8004056:	230c      	movs	r3, #12
 8004058:	4638      	mov	r0, r7
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	f000 fd36 	bl	8004acc <__malloc_unlock>
 8004060:	e7a1      	b.n	8003fa6 <_malloc_r+0x22>
 8004062:	6025      	str	r5, [r4, #0]
 8004064:	e7de      	b.n	8004024 <_malloc_r+0xa0>
 8004066:	bf00      	nop
 8004068:	20000224 	.word	0x20000224

0800406c <__ssputs_r>:
 800406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	688e      	ldr	r6, [r1, #8]
 8004072:	4682      	mov	sl, r0
 8004074:	429e      	cmp	r6, r3
 8004076:	460c      	mov	r4, r1
 8004078:	4690      	mov	r8, r2
 800407a:	461f      	mov	r7, r3
 800407c:	d838      	bhi.n	80040f0 <__ssputs_r+0x84>
 800407e:	898a      	ldrh	r2, [r1, #12]
 8004080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004084:	d032      	beq.n	80040ec <__ssputs_r+0x80>
 8004086:	6825      	ldr	r5, [r4, #0]
 8004088:	6909      	ldr	r1, [r1, #16]
 800408a:	3301      	adds	r3, #1
 800408c:	eba5 0901 	sub.w	r9, r5, r1
 8004090:	6965      	ldr	r5, [r4, #20]
 8004092:	444b      	add	r3, r9
 8004094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800409c:	106d      	asrs	r5, r5, #1
 800409e:	429d      	cmp	r5, r3
 80040a0:	bf38      	it	cc
 80040a2:	461d      	movcc	r5, r3
 80040a4:	0553      	lsls	r3, r2, #21
 80040a6:	d531      	bpl.n	800410c <__ssputs_r+0xa0>
 80040a8:	4629      	mov	r1, r5
 80040aa:	f7ff ff6b 	bl	8003f84 <_malloc_r>
 80040ae:	4606      	mov	r6, r0
 80040b0:	b950      	cbnz	r0, 80040c8 <__ssputs_r+0x5c>
 80040b2:	230c      	movs	r3, #12
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295
 80040b8:	f8ca 3000 	str.w	r3, [sl]
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	464a      	mov	r2, r9
 80040ca:	6921      	ldr	r1, [r4, #16]
 80040cc:	f000 fcd0 	bl	8004a70 <memcpy>
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040da:	81a3      	strh	r3, [r4, #12]
 80040dc:	6126      	str	r6, [r4, #16]
 80040de:	444e      	add	r6, r9
 80040e0:	6026      	str	r6, [r4, #0]
 80040e2:	463e      	mov	r6, r7
 80040e4:	6165      	str	r5, [r4, #20]
 80040e6:	eba5 0509 	sub.w	r5, r5, r9
 80040ea:	60a5      	str	r5, [r4, #8]
 80040ec:	42be      	cmp	r6, r7
 80040ee:	d900      	bls.n	80040f2 <__ssputs_r+0x86>
 80040f0:	463e      	mov	r6, r7
 80040f2:	4632      	mov	r2, r6
 80040f4:	4641      	mov	r1, r8
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	f000 fcc8 	bl	8004a8c <memmove>
 80040fc:	68a3      	ldr	r3, [r4, #8]
 80040fe:	2000      	movs	r0, #0
 8004100:	1b9b      	subs	r3, r3, r6
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	4433      	add	r3, r6
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	e7db      	b.n	80040c4 <__ssputs_r+0x58>
 800410c:	462a      	mov	r2, r5
 800410e:	f000 fce3 	bl	8004ad8 <_realloc_r>
 8004112:	4606      	mov	r6, r0
 8004114:	2800      	cmp	r0, #0
 8004116:	d1e1      	bne.n	80040dc <__ssputs_r+0x70>
 8004118:	4650      	mov	r0, sl
 800411a:	6921      	ldr	r1, [r4, #16]
 800411c:	f7ff feca 	bl	8003eb4 <_free_r>
 8004120:	e7c7      	b.n	80040b2 <__ssputs_r+0x46>
	...

08004124 <_svfiprintf_r>:
 8004124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	4698      	mov	r8, r3
 800412a:	898b      	ldrh	r3, [r1, #12]
 800412c:	4607      	mov	r7, r0
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	460d      	mov	r5, r1
 8004132:	4614      	mov	r4, r2
 8004134:	b09d      	sub	sp, #116	; 0x74
 8004136:	d50e      	bpl.n	8004156 <_svfiprintf_r+0x32>
 8004138:	690b      	ldr	r3, [r1, #16]
 800413a:	b963      	cbnz	r3, 8004156 <_svfiprintf_r+0x32>
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	f7ff ff21 	bl	8003f84 <_malloc_r>
 8004142:	6028      	str	r0, [r5, #0]
 8004144:	6128      	str	r0, [r5, #16]
 8004146:	b920      	cbnz	r0, 8004152 <_svfiprintf_r+0x2e>
 8004148:	230c      	movs	r3, #12
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	e0d1      	b.n	80042f6 <_svfiprintf_r+0x1d2>
 8004152:	2340      	movs	r3, #64	; 0x40
 8004154:	616b      	str	r3, [r5, #20]
 8004156:	2300      	movs	r3, #0
 8004158:	9309      	str	r3, [sp, #36]	; 0x24
 800415a:	2320      	movs	r3, #32
 800415c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004160:	2330      	movs	r3, #48	; 0x30
 8004162:	f04f 0901 	mov.w	r9, #1
 8004166:	f8cd 800c 	str.w	r8, [sp, #12]
 800416a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004310 <_svfiprintf_r+0x1ec>
 800416e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004172:	4623      	mov	r3, r4
 8004174:	469a      	mov	sl, r3
 8004176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800417a:	b10a      	cbz	r2, 8004180 <_svfiprintf_r+0x5c>
 800417c:	2a25      	cmp	r2, #37	; 0x25
 800417e:	d1f9      	bne.n	8004174 <_svfiprintf_r+0x50>
 8004180:	ebba 0b04 	subs.w	fp, sl, r4
 8004184:	d00b      	beq.n	800419e <_svfiprintf_r+0x7a>
 8004186:	465b      	mov	r3, fp
 8004188:	4622      	mov	r2, r4
 800418a:	4629      	mov	r1, r5
 800418c:	4638      	mov	r0, r7
 800418e:	f7ff ff6d 	bl	800406c <__ssputs_r>
 8004192:	3001      	adds	r0, #1
 8004194:	f000 80aa 	beq.w	80042ec <_svfiprintf_r+0x1c8>
 8004198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800419a:	445a      	add	r2, fp
 800419c:	9209      	str	r2, [sp, #36]	; 0x24
 800419e:	f89a 3000 	ldrb.w	r3, [sl]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a2 	beq.w	80042ec <_svfiprintf_r+0x1c8>
 80041a8:	2300      	movs	r3, #0
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b2:	f10a 0a01 	add.w	sl, sl, #1
 80041b6:	9304      	str	r3, [sp, #16]
 80041b8:	9307      	str	r3, [sp, #28]
 80041ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041be:	931a      	str	r3, [sp, #104]	; 0x68
 80041c0:	4654      	mov	r4, sl
 80041c2:	2205      	movs	r2, #5
 80041c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c8:	4851      	ldr	r0, [pc, #324]	; (8004310 <_svfiprintf_r+0x1ec>)
 80041ca:	f000 fc43 	bl	8004a54 <memchr>
 80041ce:	9a04      	ldr	r2, [sp, #16]
 80041d0:	b9d8      	cbnz	r0, 800420a <_svfiprintf_r+0xe6>
 80041d2:	06d0      	lsls	r0, r2, #27
 80041d4:	bf44      	itt	mi
 80041d6:	2320      	movmi	r3, #32
 80041d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041dc:	0711      	lsls	r1, r2, #28
 80041de:	bf44      	itt	mi
 80041e0:	232b      	movmi	r3, #43	; 0x2b
 80041e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ea:	2b2a      	cmp	r3, #42	; 0x2a
 80041ec:	d015      	beq.n	800421a <_svfiprintf_r+0xf6>
 80041ee:	4654      	mov	r4, sl
 80041f0:	2000      	movs	r0, #0
 80041f2:	f04f 0c0a 	mov.w	ip, #10
 80041f6:	9a07      	ldr	r2, [sp, #28]
 80041f8:	4621      	mov	r1, r4
 80041fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041fe:	3b30      	subs	r3, #48	; 0x30
 8004200:	2b09      	cmp	r3, #9
 8004202:	d94e      	bls.n	80042a2 <_svfiprintf_r+0x17e>
 8004204:	b1b0      	cbz	r0, 8004234 <_svfiprintf_r+0x110>
 8004206:	9207      	str	r2, [sp, #28]
 8004208:	e014      	b.n	8004234 <_svfiprintf_r+0x110>
 800420a:	eba0 0308 	sub.w	r3, r0, r8
 800420e:	fa09 f303 	lsl.w	r3, r9, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	46a2      	mov	sl, r4
 8004216:	9304      	str	r3, [sp, #16]
 8004218:	e7d2      	b.n	80041c0 <_svfiprintf_r+0x9c>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	1d19      	adds	r1, r3, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	9103      	str	r1, [sp, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfbb      	ittet	lt
 8004226:	425b      	neglt	r3, r3
 8004228:	f042 0202 	orrlt.w	r2, r2, #2
 800422c:	9307      	strge	r3, [sp, #28]
 800422e:	9307      	strlt	r3, [sp, #28]
 8004230:	bfb8      	it	lt
 8004232:	9204      	strlt	r2, [sp, #16]
 8004234:	7823      	ldrb	r3, [r4, #0]
 8004236:	2b2e      	cmp	r3, #46	; 0x2e
 8004238:	d10c      	bne.n	8004254 <_svfiprintf_r+0x130>
 800423a:	7863      	ldrb	r3, [r4, #1]
 800423c:	2b2a      	cmp	r3, #42	; 0x2a
 800423e:	d135      	bne.n	80042ac <_svfiprintf_r+0x188>
 8004240:	9b03      	ldr	r3, [sp, #12]
 8004242:	3402      	adds	r4, #2
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	9203      	str	r2, [sp, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	bfb8      	it	lt
 800424e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004314 <_svfiprintf_r+0x1f0>
 8004258:	2203      	movs	r2, #3
 800425a:	4650      	mov	r0, sl
 800425c:	7821      	ldrb	r1, [r4, #0]
 800425e:	f000 fbf9 	bl	8004a54 <memchr>
 8004262:	b140      	cbz	r0, 8004276 <_svfiprintf_r+0x152>
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	eba0 000a 	sub.w	r0, r0, sl
 800426a:	fa03 f000 	lsl.w	r0, r3, r0
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	3401      	adds	r4, #1
 8004272:	4303      	orrs	r3, r0
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427a:	2206      	movs	r2, #6
 800427c:	4826      	ldr	r0, [pc, #152]	; (8004318 <_svfiprintf_r+0x1f4>)
 800427e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004282:	f000 fbe7 	bl	8004a54 <memchr>
 8004286:	2800      	cmp	r0, #0
 8004288:	d038      	beq.n	80042fc <_svfiprintf_r+0x1d8>
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <_svfiprintf_r+0x1f8>)
 800428c:	bb1b      	cbnz	r3, 80042d6 <_svfiprintf_r+0x1b2>
 800428e:	9b03      	ldr	r3, [sp, #12]
 8004290:	3307      	adds	r3, #7
 8004292:	f023 0307 	bic.w	r3, r3, #7
 8004296:	3308      	adds	r3, #8
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800429c:	4433      	add	r3, r6
 800429e:	9309      	str	r3, [sp, #36]	; 0x24
 80042a0:	e767      	b.n	8004172 <_svfiprintf_r+0x4e>
 80042a2:	460c      	mov	r4, r1
 80042a4:	2001      	movs	r0, #1
 80042a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042aa:	e7a5      	b.n	80041f8 <_svfiprintf_r+0xd4>
 80042ac:	2300      	movs	r3, #0
 80042ae:	f04f 0c0a 	mov.w	ip, #10
 80042b2:	4619      	mov	r1, r3
 80042b4:	3401      	adds	r4, #1
 80042b6:	9305      	str	r3, [sp, #20]
 80042b8:	4620      	mov	r0, r4
 80042ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042be:	3a30      	subs	r2, #48	; 0x30
 80042c0:	2a09      	cmp	r2, #9
 80042c2:	d903      	bls.n	80042cc <_svfiprintf_r+0x1a8>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0c5      	beq.n	8004254 <_svfiprintf_r+0x130>
 80042c8:	9105      	str	r1, [sp, #20]
 80042ca:	e7c3      	b.n	8004254 <_svfiprintf_r+0x130>
 80042cc:	4604      	mov	r4, r0
 80042ce:	2301      	movs	r3, #1
 80042d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d4:	e7f0      	b.n	80042b8 <_svfiprintf_r+0x194>
 80042d6:	ab03      	add	r3, sp, #12
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	462a      	mov	r2, r5
 80042dc:	4638      	mov	r0, r7
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <_svfiprintf_r+0x1fc>)
 80042e0:	a904      	add	r1, sp, #16
 80042e2:	f3af 8000 	nop.w
 80042e6:	1c42      	adds	r2, r0, #1
 80042e8:	4606      	mov	r6, r0
 80042ea:	d1d6      	bne.n	800429a <_svfiprintf_r+0x176>
 80042ec:	89ab      	ldrh	r3, [r5, #12]
 80042ee:	065b      	lsls	r3, r3, #25
 80042f0:	f53f af2c 	bmi.w	800414c <_svfiprintf_r+0x28>
 80042f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042f6:	b01d      	add	sp, #116	; 0x74
 80042f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fc:	ab03      	add	r3, sp, #12
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	462a      	mov	r2, r5
 8004302:	4638      	mov	r0, r7
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <_svfiprintf_r+0x1fc>)
 8004306:	a904      	add	r1, sp, #16
 8004308:	f000 f9d4 	bl	80046b4 <_printf_i>
 800430c:	e7eb      	b.n	80042e6 <_svfiprintf_r+0x1c2>
 800430e:	bf00      	nop
 8004310:	08004d0c 	.word	0x08004d0c
 8004314:	08004d12 	.word	0x08004d12
 8004318:	08004d16 	.word	0x08004d16
 800431c:	00000000 	.word	0x00000000
 8004320:	0800406d 	.word	0x0800406d

08004324 <__sfputc_r>:
 8004324:	6893      	ldr	r3, [r2, #8]
 8004326:	b410      	push	{r4}
 8004328:	3b01      	subs	r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	6093      	str	r3, [r2, #8]
 800432e:	da07      	bge.n	8004340 <__sfputc_r+0x1c>
 8004330:	6994      	ldr	r4, [r2, #24]
 8004332:	42a3      	cmp	r3, r4
 8004334:	db01      	blt.n	800433a <__sfputc_r+0x16>
 8004336:	290a      	cmp	r1, #10
 8004338:	d102      	bne.n	8004340 <__sfputc_r+0x1c>
 800433a:	bc10      	pop	{r4}
 800433c:	f7ff bade 	b.w	80038fc <__swbuf_r>
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	1c58      	adds	r0, r3, #1
 8004344:	6010      	str	r0, [r2, #0]
 8004346:	7019      	strb	r1, [r3, #0]
 8004348:	4608      	mov	r0, r1
 800434a:	bc10      	pop	{r4}
 800434c:	4770      	bx	lr

0800434e <__sfputs_r>:
 800434e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004350:	4606      	mov	r6, r0
 8004352:	460f      	mov	r7, r1
 8004354:	4614      	mov	r4, r2
 8004356:	18d5      	adds	r5, r2, r3
 8004358:	42ac      	cmp	r4, r5
 800435a:	d101      	bne.n	8004360 <__sfputs_r+0x12>
 800435c:	2000      	movs	r0, #0
 800435e:	e007      	b.n	8004370 <__sfputs_r+0x22>
 8004360:	463a      	mov	r2, r7
 8004362:	4630      	mov	r0, r6
 8004364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004368:	f7ff ffdc 	bl	8004324 <__sfputc_r>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d1f3      	bne.n	8004358 <__sfputs_r+0xa>
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004374 <_vfiprintf_r>:
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	460d      	mov	r5, r1
 800437a:	4614      	mov	r4, r2
 800437c:	4698      	mov	r8, r3
 800437e:	4606      	mov	r6, r0
 8004380:	b09d      	sub	sp, #116	; 0x74
 8004382:	b118      	cbz	r0, 800438c <_vfiprintf_r+0x18>
 8004384:	6983      	ldr	r3, [r0, #24]
 8004386:	b90b      	cbnz	r3, 800438c <_vfiprintf_r+0x18>
 8004388:	f7ff fc8e 	bl	8003ca8 <__sinit>
 800438c:	4b89      	ldr	r3, [pc, #548]	; (80045b4 <_vfiprintf_r+0x240>)
 800438e:	429d      	cmp	r5, r3
 8004390:	d11b      	bne.n	80043ca <_vfiprintf_r+0x56>
 8004392:	6875      	ldr	r5, [r6, #4]
 8004394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004396:	07d9      	lsls	r1, r3, #31
 8004398:	d405      	bmi.n	80043a6 <_vfiprintf_r+0x32>
 800439a:	89ab      	ldrh	r3, [r5, #12]
 800439c:	059a      	lsls	r2, r3, #22
 800439e:	d402      	bmi.n	80043a6 <_vfiprintf_r+0x32>
 80043a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043a2:	f7ff fd1f 	bl	8003de4 <__retarget_lock_acquire_recursive>
 80043a6:	89ab      	ldrh	r3, [r5, #12]
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	d501      	bpl.n	80043b0 <_vfiprintf_r+0x3c>
 80043ac:	692b      	ldr	r3, [r5, #16]
 80043ae:	b9eb      	cbnz	r3, 80043ec <_vfiprintf_r+0x78>
 80043b0:	4629      	mov	r1, r5
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7ff faf4 	bl	80039a0 <__swsetup_r>
 80043b8:	b1c0      	cbz	r0, 80043ec <_vfiprintf_r+0x78>
 80043ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043bc:	07dc      	lsls	r4, r3, #31
 80043be:	d50e      	bpl.n	80043de <_vfiprintf_r+0x6a>
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	b01d      	add	sp, #116	; 0x74
 80043c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ca:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <_vfiprintf_r+0x244>)
 80043cc:	429d      	cmp	r5, r3
 80043ce:	d101      	bne.n	80043d4 <_vfiprintf_r+0x60>
 80043d0:	68b5      	ldr	r5, [r6, #8]
 80043d2:	e7df      	b.n	8004394 <_vfiprintf_r+0x20>
 80043d4:	4b79      	ldr	r3, [pc, #484]	; (80045bc <_vfiprintf_r+0x248>)
 80043d6:	429d      	cmp	r5, r3
 80043d8:	bf08      	it	eq
 80043da:	68f5      	ldreq	r5, [r6, #12]
 80043dc:	e7da      	b.n	8004394 <_vfiprintf_r+0x20>
 80043de:	89ab      	ldrh	r3, [r5, #12]
 80043e0:	0598      	lsls	r0, r3, #22
 80043e2:	d4ed      	bmi.n	80043c0 <_vfiprintf_r+0x4c>
 80043e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043e6:	f7ff fcfe 	bl	8003de6 <__retarget_lock_release_recursive>
 80043ea:	e7e9      	b.n	80043c0 <_vfiprintf_r+0x4c>
 80043ec:	2300      	movs	r3, #0
 80043ee:	9309      	str	r3, [sp, #36]	; 0x24
 80043f0:	2320      	movs	r3, #32
 80043f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043f6:	2330      	movs	r3, #48	; 0x30
 80043f8:	f04f 0901 	mov.w	r9, #1
 80043fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004400:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80045c0 <_vfiprintf_r+0x24c>
 8004404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004408:	4623      	mov	r3, r4
 800440a:	469a      	mov	sl, r3
 800440c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004410:	b10a      	cbz	r2, 8004416 <_vfiprintf_r+0xa2>
 8004412:	2a25      	cmp	r2, #37	; 0x25
 8004414:	d1f9      	bne.n	800440a <_vfiprintf_r+0x96>
 8004416:	ebba 0b04 	subs.w	fp, sl, r4
 800441a:	d00b      	beq.n	8004434 <_vfiprintf_r+0xc0>
 800441c:	465b      	mov	r3, fp
 800441e:	4622      	mov	r2, r4
 8004420:	4629      	mov	r1, r5
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff ff93 	bl	800434e <__sfputs_r>
 8004428:	3001      	adds	r0, #1
 800442a:	f000 80aa 	beq.w	8004582 <_vfiprintf_r+0x20e>
 800442e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004430:	445a      	add	r2, fp
 8004432:	9209      	str	r2, [sp, #36]	; 0x24
 8004434:	f89a 3000 	ldrb.w	r3, [sl]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80a2 	beq.w	8004582 <_vfiprintf_r+0x20e>
 800443e:	2300      	movs	r3, #0
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
 8004444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004448:	f10a 0a01 	add.w	sl, sl, #1
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	9307      	str	r3, [sp, #28]
 8004450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004454:	931a      	str	r3, [sp, #104]	; 0x68
 8004456:	4654      	mov	r4, sl
 8004458:	2205      	movs	r2, #5
 800445a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800445e:	4858      	ldr	r0, [pc, #352]	; (80045c0 <_vfiprintf_r+0x24c>)
 8004460:	f000 faf8 	bl	8004a54 <memchr>
 8004464:	9a04      	ldr	r2, [sp, #16]
 8004466:	b9d8      	cbnz	r0, 80044a0 <_vfiprintf_r+0x12c>
 8004468:	06d1      	lsls	r1, r2, #27
 800446a:	bf44      	itt	mi
 800446c:	2320      	movmi	r3, #32
 800446e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004472:	0713      	lsls	r3, r2, #28
 8004474:	bf44      	itt	mi
 8004476:	232b      	movmi	r3, #43	; 0x2b
 8004478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800447c:	f89a 3000 	ldrb.w	r3, [sl]
 8004480:	2b2a      	cmp	r3, #42	; 0x2a
 8004482:	d015      	beq.n	80044b0 <_vfiprintf_r+0x13c>
 8004484:	4654      	mov	r4, sl
 8004486:	2000      	movs	r0, #0
 8004488:	f04f 0c0a 	mov.w	ip, #10
 800448c:	9a07      	ldr	r2, [sp, #28]
 800448e:	4621      	mov	r1, r4
 8004490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004494:	3b30      	subs	r3, #48	; 0x30
 8004496:	2b09      	cmp	r3, #9
 8004498:	d94e      	bls.n	8004538 <_vfiprintf_r+0x1c4>
 800449a:	b1b0      	cbz	r0, 80044ca <_vfiprintf_r+0x156>
 800449c:	9207      	str	r2, [sp, #28]
 800449e:	e014      	b.n	80044ca <_vfiprintf_r+0x156>
 80044a0:	eba0 0308 	sub.w	r3, r0, r8
 80044a4:	fa09 f303 	lsl.w	r3, r9, r3
 80044a8:	4313      	orrs	r3, r2
 80044aa:	46a2      	mov	sl, r4
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	e7d2      	b.n	8004456 <_vfiprintf_r+0xe2>
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	1d19      	adds	r1, r3, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	9103      	str	r1, [sp, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bfbb      	ittet	lt
 80044bc:	425b      	neglt	r3, r3
 80044be:	f042 0202 	orrlt.w	r2, r2, #2
 80044c2:	9307      	strge	r3, [sp, #28]
 80044c4:	9307      	strlt	r3, [sp, #28]
 80044c6:	bfb8      	it	lt
 80044c8:	9204      	strlt	r2, [sp, #16]
 80044ca:	7823      	ldrb	r3, [r4, #0]
 80044cc:	2b2e      	cmp	r3, #46	; 0x2e
 80044ce:	d10c      	bne.n	80044ea <_vfiprintf_r+0x176>
 80044d0:	7863      	ldrb	r3, [r4, #1]
 80044d2:	2b2a      	cmp	r3, #42	; 0x2a
 80044d4:	d135      	bne.n	8004542 <_vfiprintf_r+0x1ce>
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	3402      	adds	r4, #2
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	9203      	str	r2, [sp, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bfb8      	it	lt
 80044e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80044e8:	9305      	str	r3, [sp, #20]
 80044ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80045c4 <_vfiprintf_r+0x250>
 80044ee:	2203      	movs	r2, #3
 80044f0:	4650      	mov	r0, sl
 80044f2:	7821      	ldrb	r1, [r4, #0]
 80044f4:	f000 faae 	bl	8004a54 <memchr>
 80044f8:	b140      	cbz	r0, 800450c <_vfiprintf_r+0x198>
 80044fa:	2340      	movs	r3, #64	; 0x40
 80044fc:	eba0 000a 	sub.w	r0, r0, sl
 8004500:	fa03 f000 	lsl.w	r0, r3, r0
 8004504:	9b04      	ldr	r3, [sp, #16]
 8004506:	3401      	adds	r4, #1
 8004508:	4303      	orrs	r3, r0
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004510:	2206      	movs	r2, #6
 8004512:	482d      	ldr	r0, [pc, #180]	; (80045c8 <_vfiprintf_r+0x254>)
 8004514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004518:	f000 fa9c 	bl	8004a54 <memchr>
 800451c:	2800      	cmp	r0, #0
 800451e:	d03f      	beq.n	80045a0 <_vfiprintf_r+0x22c>
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <_vfiprintf_r+0x258>)
 8004522:	bb1b      	cbnz	r3, 800456c <_vfiprintf_r+0x1f8>
 8004524:	9b03      	ldr	r3, [sp, #12]
 8004526:	3307      	adds	r3, #7
 8004528:	f023 0307 	bic.w	r3, r3, #7
 800452c:	3308      	adds	r3, #8
 800452e:	9303      	str	r3, [sp, #12]
 8004530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004532:	443b      	add	r3, r7
 8004534:	9309      	str	r3, [sp, #36]	; 0x24
 8004536:	e767      	b.n	8004408 <_vfiprintf_r+0x94>
 8004538:	460c      	mov	r4, r1
 800453a:	2001      	movs	r0, #1
 800453c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004540:	e7a5      	b.n	800448e <_vfiprintf_r+0x11a>
 8004542:	2300      	movs	r3, #0
 8004544:	f04f 0c0a 	mov.w	ip, #10
 8004548:	4619      	mov	r1, r3
 800454a:	3401      	adds	r4, #1
 800454c:	9305      	str	r3, [sp, #20]
 800454e:	4620      	mov	r0, r4
 8004550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004554:	3a30      	subs	r2, #48	; 0x30
 8004556:	2a09      	cmp	r2, #9
 8004558:	d903      	bls.n	8004562 <_vfiprintf_r+0x1ee>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0c5      	beq.n	80044ea <_vfiprintf_r+0x176>
 800455e:	9105      	str	r1, [sp, #20]
 8004560:	e7c3      	b.n	80044ea <_vfiprintf_r+0x176>
 8004562:	4604      	mov	r4, r0
 8004564:	2301      	movs	r3, #1
 8004566:	fb0c 2101 	mla	r1, ip, r1, r2
 800456a:	e7f0      	b.n	800454e <_vfiprintf_r+0x1da>
 800456c:	ab03      	add	r3, sp, #12
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	462a      	mov	r2, r5
 8004572:	4630      	mov	r0, r6
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <_vfiprintf_r+0x25c>)
 8004576:	a904      	add	r1, sp, #16
 8004578:	f3af 8000 	nop.w
 800457c:	4607      	mov	r7, r0
 800457e:	1c78      	adds	r0, r7, #1
 8004580:	d1d6      	bne.n	8004530 <_vfiprintf_r+0x1bc>
 8004582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004584:	07d9      	lsls	r1, r3, #31
 8004586:	d405      	bmi.n	8004594 <_vfiprintf_r+0x220>
 8004588:	89ab      	ldrh	r3, [r5, #12]
 800458a:	059a      	lsls	r2, r3, #22
 800458c:	d402      	bmi.n	8004594 <_vfiprintf_r+0x220>
 800458e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004590:	f7ff fc29 	bl	8003de6 <__retarget_lock_release_recursive>
 8004594:	89ab      	ldrh	r3, [r5, #12]
 8004596:	065b      	lsls	r3, r3, #25
 8004598:	f53f af12 	bmi.w	80043c0 <_vfiprintf_r+0x4c>
 800459c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800459e:	e711      	b.n	80043c4 <_vfiprintf_r+0x50>
 80045a0:	ab03      	add	r3, sp, #12
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	462a      	mov	r2, r5
 80045a6:	4630      	mov	r0, r6
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <_vfiprintf_r+0x25c>)
 80045aa:	a904      	add	r1, sp, #16
 80045ac:	f000 f882 	bl	80046b4 <_printf_i>
 80045b0:	e7e4      	b.n	800457c <_vfiprintf_r+0x208>
 80045b2:	bf00      	nop
 80045b4:	08004ccc 	.word	0x08004ccc
 80045b8:	08004cec 	.word	0x08004cec
 80045bc:	08004cac 	.word	0x08004cac
 80045c0:	08004d0c 	.word	0x08004d0c
 80045c4:	08004d12 	.word	0x08004d12
 80045c8:	08004d16 	.word	0x08004d16
 80045cc:	00000000 	.word	0x00000000
 80045d0:	0800434f 	.word	0x0800434f

080045d4 <_printf_common>:
 80045d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d8:	4616      	mov	r6, r2
 80045da:	4699      	mov	r9, r3
 80045dc:	688a      	ldr	r2, [r1, #8]
 80045de:	690b      	ldr	r3, [r1, #16]
 80045e0:	4607      	mov	r7, r0
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bfb8      	it	lt
 80045e6:	4613      	movlt	r3, r2
 80045e8:	6033      	str	r3, [r6, #0]
 80045ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ee:	460c      	mov	r4, r1
 80045f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045f4:	b10a      	cbz	r2, 80045fa <_printf_common+0x26>
 80045f6:	3301      	adds	r3, #1
 80045f8:	6033      	str	r3, [r6, #0]
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	0699      	lsls	r1, r3, #26
 80045fe:	bf42      	ittt	mi
 8004600:	6833      	ldrmi	r3, [r6, #0]
 8004602:	3302      	addmi	r3, #2
 8004604:	6033      	strmi	r3, [r6, #0]
 8004606:	6825      	ldr	r5, [r4, #0]
 8004608:	f015 0506 	ands.w	r5, r5, #6
 800460c:	d106      	bne.n	800461c <_printf_common+0x48>
 800460e:	f104 0a19 	add.w	sl, r4, #25
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	6832      	ldr	r2, [r6, #0]
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	42ab      	cmp	r3, r5
 800461a:	dc28      	bgt.n	800466e <_printf_common+0x9a>
 800461c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004620:	1e13      	subs	r3, r2, #0
 8004622:	6822      	ldr	r2, [r4, #0]
 8004624:	bf18      	it	ne
 8004626:	2301      	movne	r3, #1
 8004628:	0692      	lsls	r2, r2, #26
 800462a:	d42d      	bmi.n	8004688 <_printf_common+0xb4>
 800462c:	4649      	mov	r1, r9
 800462e:	4638      	mov	r0, r7
 8004630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004634:	47c0      	blx	r8
 8004636:	3001      	adds	r0, #1
 8004638:	d020      	beq.n	800467c <_printf_common+0xa8>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	68e5      	ldr	r5, [r4, #12]
 800463e:	f003 0306 	and.w	r3, r3, #6
 8004642:	2b04      	cmp	r3, #4
 8004644:	bf18      	it	ne
 8004646:	2500      	movne	r5, #0
 8004648:	6832      	ldr	r2, [r6, #0]
 800464a:	f04f 0600 	mov.w	r6, #0
 800464e:	68a3      	ldr	r3, [r4, #8]
 8004650:	bf08      	it	eq
 8004652:	1aad      	subeq	r5, r5, r2
 8004654:	6922      	ldr	r2, [r4, #16]
 8004656:	bf08      	it	eq
 8004658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800465c:	4293      	cmp	r3, r2
 800465e:	bfc4      	itt	gt
 8004660:	1a9b      	subgt	r3, r3, r2
 8004662:	18ed      	addgt	r5, r5, r3
 8004664:	341a      	adds	r4, #26
 8004666:	42b5      	cmp	r5, r6
 8004668:	d11a      	bne.n	80046a0 <_printf_common+0xcc>
 800466a:	2000      	movs	r0, #0
 800466c:	e008      	b.n	8004680 <_printf_common+0xac>
 800466e:	2301      	movs	r3, #1
 8004670:	4652      	mov	r2, sl
 8004672:	4649      	mov	r1, r9
 8004674:	4638      	mov	r0, r7
 8004676:	47c0      	blx	r8
 8004678:	3001      	adds	r0, #1
 800467a:	d103      	bne.n	8004684 <_printf_common+0xb0>
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	3501      	adds	r5, #1
 8004686:	e7c4      	b.n	8004612 <_printf_common+0x3e>
 8004688:	2030      	movs	r0, #48	; 0x30
 800468a:	18e1      	adds	r1, r4, r3
 800468c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004696:	4422      	add	r2, r4
 8004698:	3302      	adds	r3, #2
 800469a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800469e:	e7c5      	b.n	800462c <_printf_common+0x58>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4622      	mov	r2, r4
 80046a4:	4649      	mov	r1, r9
 80046a6:	4638      	mov	r0, r7
 80046a8:	47c0      	blx	r8
 80046aa:	3001      	adds	r0, #1
 80046ac:	d0e6      	beq.n	800467c <_printf_common+0xa8>
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7d9      	b.n	8004666 <_printf_common+0x92>
	...

080046b4 <_printf_i>:
 80046b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	7e0f      	ldrb	r7, [r1, #24]
 80046ba:	4691      	mov	r9, r2
 80046bc:	2f78      	cmp	r7, #120	; 0x78
 80046be:	4680      	mov	r8, r0
 80046c0:	460c      	mov	r4, r1
 80046c2:	469a      	mov	sl, r3
 80046c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046ca:	d807      	bhi.n	80046dc <_printf_i+0x28>
 80046cc:	2f62      	cmp	r7, #98	; 0x62
 80046ce:	d80a      	bhi.n	80046e6 <_printf_i+0x32>
 80046d0:	2f00      	cmp	r7, #0
 80046d2:	f000 80d9 	beq.w	8004888 <_printf_i+0x1d4>
 80046d6:	2f58      	cmp	r7, #88	; 0x58
 80046d8:	f000 80a4 	beq.w	8004824 <_printf_i+0x170>
 80046dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046e4:	e03a      	b.n	800475c <_printf_i+0xa8>
 80046e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ea:	2b15      	cmp	r3, #21
 80046ec:	d8f6      	bhi.n	80046dc <_printf_i+0x28>
 80046ee:	a101      	add	r1, pc, #4	; (adr r1, 80046f4 <_printf_i+0x40>)
 80046f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046f4:	0800474d 	.word	0x0800474d
 80046f8:	08004761 	.word	0x08004761
 80046fc:	080046dd 	.word	0x080046dd
 8004700:	080046dd 	.word	0x080046dd
 8004704:	080046dd 	.word	0x080046dd
 8004708:	080046dd 	.word	0x080046dd
 800470c:	08004761 	.word	0x08004761
 8004710:	080046dd 	.word	0x080046dd
 8004714:	080046dd 	.word	0x080046dd
 8004718:	080046dd 	.word	0x080046dd
 800471c:	080046dd 	.word	0x080046dd
 8004720:	0800486f 	.word	0x0800486f
 8004724:	08004791 	.word	0x08004791
 8004728:	08004851 	.word	0x08004851
 800472c:	080046dd 	.word	0x080046dd
 8004730:	080046dd 	.word	0x080046dd
 8004734:	08004891 	.word	0x08004891
 8004738:	080046dd 	.word	0x080046dd
 800473c:	08004791 	.word	0x08004791
 8004740:	080046dd 	.word	0x080046dd
 8004744:	080046dd 	.word	0x080046dd
 8004748:	08004859 	.word	0x08004859
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	602a      	str	r2, [r5, #0]
 8004754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800475c:	2301      	movs	r3, #1
 800475e:	e0a4      	b.n	80048aa <_printf_i+0x1f6>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	6829      	ldr	r1, [r5, #0]
 8004764:	0606      	lsls	r6, r0, #24
 8004766:	f101 0304 	add.w	r3, r1, #4
 800476a:	d50a      	bpl.n	8004782 <_printf_i+0xce>
 800476c:	680e      	ldr	r6, [r1, #0]
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	2e00      	cmp	r6, #0
 8004772:	da03      	bge.n	800477c <_printf_i+0xc8>
 8004774:	232d      	movs	r3, #45	; 0x2d
 8004776:	4276      	negs	r6, r6
 8004778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477c:	230a      	movs	r3, #10
 800477e:	485e      	ldr	r0, [pc, #376]	; (80048f8 <_printf_i+0x244>)
 8004780:	e019      	b.n	80047b6 <_printf_i+0x102>
 8004782:	680e      	ldr	r6, [r1, #0]
 8004784:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004788:	602b      	str	r3, [r5, #0]
 800478a:	bf18      	it	ne
 800478c:	b236      	sxthne	r6, r6
 800478e:	e7ef      	b.n	8004770 <_printf_i+0xbc>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	1d19      	adds	r1, r3, #4
 8004796:	6029      	str	r1, [r5, #0]
 8004798:	0601      	lsls	r1, r0, #24
 800479a:	d501      	bpl.n	80047a0 <_printf_i+0xec>
 800479c:	681e      	ldr	r6, [r3, #0]
 800479e:	e002      	b.n	80047a6 <_printf_i+0xf2>
 80047a0:	0646      	lsls	r6, r0, #25
 80047a2:	d5fb      	bpl.n	800479c <_printf_i+0xe8>
 80047a4:	881e      	ldrh	r6, [r3, #0]
 80047a6:	2f6f      	cmp	r7, #111	; 0x6f
 80047a8:	bf0c      	ite	eq
 80047aa:	2308      	moveq	r3, #8
 80047ac:	230a      	movne	r3, #10
 80047ae:	4852      	ldr	r0, [pc, #328]	; (80048f8 <_printf_i+0x244>)
 80047b0:	2100      	movs	r1, #0
 80047b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047b6:	6865      	ldr	r5, [r4, #4]
 80047b8:	2d00      	cmp	r5, #0
 80047ba:	bfa8      	it	ge
 80047bc:	6821      	ldrge	r1, [r4, #0]
 80047be:	60a5      	str	r5, [r4, #8]
 80047c0:	bfa4      	itt	ge
 80047c2:	f021 0104 	bicge.w	r1, r1, #4
 80047c6:	6021      	strge	r1, [r4, #0]
 80047c8:	b90e      	cbnz	r6, 80047ce <_printf_i+0x11a>
 80047ca:	2d00      	cmp	r5, #0
 80047cc:	d04d      	beq.n	800486a <_printf_i+0x1b6>
 80047ce:	4615      	mov	r5, r2
 80047d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80047d4:	fb03 6711 	mls	r7, r3, r1, r6
 80047d8:	5dc7      	ldrb	r7, [r0, r7]
 80047da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047de:	4637      	mov	r7, r6
 80047e0:	42bb      	cmp	r3, r7
 80047e2:	460e      	mov	r6, r1
 80047e4:	d9f4      	bls.n	80047d0 <_printf_i+0x11c>
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d10b      	bne.n	8004802 <_printf_i+0x14e>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	07de      	lsls	r6, r3, #31
 80047ee:	d508      	bpl.n	8004802 <_printf_i+0x14e>
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	6861      	ldr	r1, [r4, #4]
 80047f4:	4299      	cmp	r1, r3
 80047f6:	bfde      	ittt	le
 80047f8:	2330      	movle	r3, #48	; 0x30
 80047fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004802:	1b52      	subs	r2, r2, r5
 8004804:	6122      	str	r2, [r4, #16]
 8004806:	464b      	mov	r3, r9
 8004808:	4621      	mov	r1, r4
 800480a:	4640      	mov	r0, r8
 800480c:	f8cd a000 	str.w	sl, [sp]
 8004810:	aa03      	add	r2, sp, #12
 8004812:	f7ff fedf 	bl	80045d4 <_printf_common>
 8004816:	3001      	adds	r0, #1
 8004818:	d14c      	bne.n	80048b4 <_printf_i+0x200>
 800481a:	f04f 30ff 	mov.w	r0, #4294967295
 800481e:	b004      	add	sp, #16
 8004820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004824:	4834      	ldr	r0, [pc, #208]	; (80048f8 <_printf_i+0x244>)
 8004826:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800482a:	6829      	ldr	r1, [r5, #0]
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004832:	6029      	str	r1, [r5, #0]
 8004834:	061d      	lsls	r5, r3, #24
 8004836:	d514      	bpl.n	8004862 <_printf_i+0x1ae>
 8004838:	07df      	lsls	r7, r3, #31
 800483a:	bf44      	itt	mi
 800483c:	f043 0320 	orrmi.w	r3, r3, #32
 8004840:	6023      	strmi	r3, [r4, #0]
 8004842:	b91e      	cbnz	r6, 800484c <_printf_i+0x198>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	f023 0320 	bic.w	r3, r3, #32
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	2310      	movs	r3, #16
 800484e:	e7af      	b.n	80047b0 <_printf_i+0xfc>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	f043 0320 	orr.w	r3, r3, #32
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	2378      	movs	r3, #120	; 0x78
 800485a:	4828      	ldr	r0, [pc, #160]	; (80048fc <_printf_i+0x248>)
 800485c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004860:	e7e3      	b.n	800482a <_printf_i+0x176>
 8004862:	0659      	lsls	r1, r3, #25
 8004864:	bf48      	it	mi
 8004866:	b2b6      	uxthmi	r6, r6
 8004868:	e7e6      	b.n	8004838 <_printf_i+0x184>
 800486a:	4615      	mov	r5, r2
 800486c:	e7bb      	b.n	80047e6 <_printf_i+0x132>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	6826      	ldr	r6, [r4, #0]
 8004872:	1d18      	adds	r0, r3, #4
 8004874:	6961      	ldr	r1, [r4, #20]
 8004876:	6028      	str	r0, [r5, #0]
 8004878:	0635      	lsls	r5, r6, #24
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	d501      	bpl.n	8004882 <_printf_i+0x1ce>
 800487e:	6019      	str	r1, [r3, #0]
 8004880:	e002      	b.n	8004888 <_printf_i+0x1d4>
 8004882:	0670      	lsls	r0, r6, #25
 8004884:	d5fb      	bpl.n	800487e <_printf_i+0x1ca>
 8004886:	8019      	strh	r1, [r3, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	4615      	mov	r5, r2
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	e7ba      	b.n	8004806 <_printf_i+0x152>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	2100      	movs	r1, #0
 8004894:	1d1a      	adds	r2, r3, #4
 8004896:	602a      	str	r2, [r5, #0]
 8004898:	681d      	ldr	r5, [r3, #0]
 800489a:	6862      	ldr	r2, [r4, #4]
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f8d9 	bl	8004a54 <memchr>
 80048a2:	b108      	cbz	r0, 80048a8 <_printf_i+0x1f4>
 80048a4:	1b40      	subs	r0, r0, r5
 80048a6:	6060      	str	r0, [r4, #4]
 80048a8:	6863      	ldr	r3, [r4, #4]
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	2300      	movs	r3, #0
 80048ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b2:	e7a8      	b.n	8004806 <_printf_i+0x152>
 80048b4:	462a      	mov	r2, r5
 80048b6:	4649      	mov	r1, r9
 80048b8:	4640      	mov	r0, r8
 80048ba:	6923      	ldr	r3, [r4, #16]
 80048bc:	47d0      	blx	sl
 80048be:	3001      	adds	r0, #1
 80048c0:	d0ab      	beq.n	800481a <_printf_i+0x166>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	079b      	lsls	r3, r3, #30
 80048c6:	d413      	bmi.n	80048f0 <_printf_i+0x23c>
 80048c8:	68e0      	ldr	r0, [r4, #12]
 80048ca:	9b03      	ldr	r3, [sp, #12]
 80048cc:	4298      	cmp	r0, r3
 80048ce:	bfb8      	it	lt
 80048d0:	4618      	movlt	r0, r3
 80048d2:	e7a4      	b.n	800481e <_printf_i+0x16a>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4632      	mov	r2, r6
 80048d8:	4649      	mov	r1, r9
 80048da:	4640      	mov	r0, r8
 80048dc:	47d0      	blx	sl
 80048de:	3001      	adds	r0, #1
 80048e0:	d09b      	beq.n	800481a <_printf_i+0x166>
 80048e2:	3501      	adds	r5, #1
 80048e4:	68e3      	ldr	r3, [r4, #12]
 80048e6:	9903      	ldr	r1, [sp, #12]
 80048e8:	1a5b      	subs	r3, r3, r1
 80048ea:	42ab      	cmp	r3, r5
 80048ec:	dcf2      	bgt.n	80048d4 <_printf_i+0x220>
 80048ee:	e7eb      	b.n	80048c8 <_printf_i+0x214>
 80048f0:	2500      	movs	r5, #0
 80048f2:	f104 0619 	add.w	r6, r4, #25
 80048f6:	e7f5      	b.n	80048e4 <_printf_i+0x230>
 80048f8:	08004d1d 	.word	0x08004d1d
 80048fc:	08004d2e 	.word	0x08004d2e

08004900 <_sbrk_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	2300      	movs	r3, #0
 8004904:	4d05      	ldr	r5, [pc, #20]	; (800491c <_sbrk_r+0x1c>)
 8004906:	4604      	mov	r4, r0
 8004908:	4608      	mov	r0, r1
 800490a:	602b      	str	r3, [r5, #0]
 800490c:	f7fc fc26 	bl	800115c <_sbrk>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_sbrk_r+0x1a>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_sbrk_r+0x1a>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	2000022c 	.word	0x2000022c

08004920 <__sread>:
 8004920:	b510      	push	{r4, lr}
 8004922:	460c      	mov	r4, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	f000 f906 	bl	8004b38 <_read_r>
 800492c:	2800      	cmp	r0, #0
 800492e:	bfab      	itete	ge
 8004930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004932:	89a3      	ldrhlt	r3, [r4, #12]
 8004934:	181b      	addge	r3, r3, r0
 8004936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800493a:	bfac      	ite	ge
 800493c:	6563      	strge	r3, [r4, #84]	; 0x54
 800493e:	81a3      	strhlt	r3, [r4, #12]
 8004940:	bd10      	pop	{r4, pc}

08004942 <__swrite>:
 8004942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004946:	461f      	mov	r7, r3
 8004948:	898b      	ldrh	r3, [r1, #12]
 800494a:	4605      	mov	r5, r0
 800494c:	05db      	lsls	r3, r3, #23
 800494e:	460c      	mov	r4, r1
 8004950:	4616      	mov	r6, r2
 8004952:	d505      	bpl.n	8004960 <__swrite+0x1e>
 8004954:	2302      	movs	r3, #2
 8004956:	2200      	movs	r2, #0
 8004958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495c:	f000 f868 	bl	8004a30 <_lseek_r>
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	4632      	mov	r2, r6
 8004964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	4628      	mov	r0, r5
 800496c:	463b      	mov	r3, r7
 800496e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004976:	f000 b817 	b.w	80049a8 <_write_r>

0800497a <__sseek>:
 800497a:	b510      	push	{r4, lr}
 800497c:	460c      	mov	r4, r1
 800497e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004982:	f000 f855 	bl	8004a30 <_lseek_r>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	bf15      	itete	ne
 800498c:	6560      	strne	r0, [r4, #84]	; 0x54
 800498e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004996:	81a3      	strheq	r3, [r4, #12]
 8004998:	bf18      	it	ne
 800499a:	81a3      	strhne	r3, [r4, #12]
 800499c:	bd10      	pop	{r4, pc}

0800499e <__sclose>:
 800499e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a2:	f000 b813 	b.w	80049cc <_close_r>
	...

080049a8 <_write_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4604      	mov	r4, r0
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	2200      	movs	r2, #0
 80049b2:	4d05      	ldr	r5, [pc, #20]	; (80049c8 <_write_r+0x20>)
 80049b4:	602a      	str	r2, [r5, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f7fc fb84 	bl	80010c4 <_write>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_write_r+0x1e>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_write_r+0x1e>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	2000022c 	.word	0x2000022c

080049cc <_close_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	2300      	movs	r3, #0
 80049d0:	4d05      	ldr	r5, [pc, #20]	; (80049e8 <_close_r+0x1c>)
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	f7fc fb90 	bl	80010fc <_close>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d102      	bne.n	80049e6 <_close_r+0x1a>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	b103      	cbz	r3, 80049e6 <_close_r+0x1a>
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	2000022c 	.word	0x2000022c

080049ec <_fstat_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	2300      	movs	r3, #0
 80049f0:	4d06      	ldr	r5, [pc, #24]	; (8004a0c <_fstat_r+0x20>)
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	f7fc fb8a 	bl	8001112 <_fstat>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	d102      	bne.n	8004a08 <_fstat_r+0x1c>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	b103      	cbz	r3, 8004a08 <_fstat_r+0x1c>
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
 8004a0a:	bf00      	nop
 8004a0c:	2000022c 	.word	0x2000022c

08004a10 <_isatty_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	2300      	movs	r3, #0
 8004a14:	4d05      	ldr	r5, [pc, #20]	; (8004a2c <_isatty_r+0x1c>)
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f7fc fb88 	bl	8001130 <_isatty>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_isatty_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_isatty_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	2000022c 	.word	0x2000022c

08004a30 <_lseek_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4604      	mov	r4, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4d05      	ldr	r5, [pc, #20]	; (8004a50 <_lseek_r+0x20>)
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7fc fb80 	bl	8001144 <_lseek>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_lseek_r+0x1e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_lseek_r+0x1e>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	2000022c 	.word	0x2000022c

08004a54 <memchr>:
 8004a54:	4603      	mov	r3, r0
 8004a56:	b510      	push	{r4, lr}
 8004a58:	b2c9      	uxtb	r1, r1
 8004a5a:	4402      	add	r2, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	d101      	bne.n	8004a66 <memchr+0x12>
 8004a62:	2000      	movs	r0, #0
 8004a64:	e003      	b.n	8004a6e <memchr+0x1a>
 8004a66:	7804      	ldrb	r4, [r0, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	428c      	cmp	r4, r1
 8004a6c:	d1f6      	bne.n	8004a5c <memchr+0x8>
 8004a6e:	bd10      	pop	{r4, pc}

08004a70 <memcpy>:
 8004a70:	440a      	add	r2, r1
 8004a72:	4291      	cmp	r1, r2
 8004a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a78:	d100      	bne.n	8004a7c <memcpy+0xc>
 8004a7a:	4770      	bx	lr
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a82:	4291      	cmp	r1, r2
 8004a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a88:	d1f9      	bne.n	8004a7e <memcpy+0xe>
 8004a8a:	bd10      	pop	{r4, pc}

08004a8c <memmove>:
 8004a8c:	4288      	cmp	r0, r1
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	eb01 0402 	add.w	r4, r1, r2
 8004a94:	d902      	bls.n	8004a9c <memmove+0x10>
 8004a96:	4284      	cmp	r4, r0
 8004a98:	4623      	mov	r3, r4
 8004a9a:	d807      	bhi.n	8004aac <memmove+0x20>
 8004a9c:	1e43      	subs	r3, r0, #1
 8004a9e:	42a1      	cmp	r1, r4
 8004aa0:	d008      	beq.n	8004ab4 <memmove+0x28>
 8004aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aaa:	e7f8      	b.n	8004a9e <memmove+0x12>
 8004aac:	4601      	mov	r1, r0
 8004aae:	4402      	add	r2, r0
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	d100      	bne.n	8004ab6 <memmove+0x2a>
 8004ab4:	bd10      	pop	{r4, pc}
 8004ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004abe:	e7f7      	b.n	8004ab0 <memmove+0x24>

08004ac0 <__malloc_lock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__malloc_lock+0x8>)
 8004ac2:	f7ff b98f 	b.w	8003de4 <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000220 	.word	0x20000220

08004acc <__malloc_unlock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__malloc_unlock+0x8>)
 8004ace:	f7ff b98a 	b.w	8003de6 <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20000220 	.word	0x20000220

08004ad8 <_realloc_r>:
 8004ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004adc:	4680      	mov	r8, r0
 8004ade:	4614      	mov	r4, r2
 8004ae0:	460e      	mov	r6, r1
 8004ae2:	b921      	cbnz	r1, 8004aee <_realloc_r+0x16>
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aea:	f7ff ba4b 	b.w	8003f84 <_malloc_r>
 8004aee:	b92a      	cbnz	r2, 8004afc <_realloc_r+0x24>
 8004af0:	f7ff f9e0 	bl	8003eb4 <_free_r>
 8004af4:	4625      	mov	r5, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004afc:	f000 f82e 	bl	8004b5c <_malloc_usable_size_r>
 8004b00:	4284      	cmp	r4, r0
 8004b02:	4607      	mov	r7, r0
 8004b04:	d802      	bhi.n	8004b0c <_realloc_r+0x34>
 8004b06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b0a:	d812      	bhi.n	8004b32 <_realloc_r+0x5a>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f7ff fa38 	bl	8003f84 <_malloc_r>
 8004b14:	4605      	mov	r5, r0
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d0ed      	beq.n	8004af6 <_realloc_r+0x1e>
 8004b1a:	42bc      	cmp	r4, r7
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	4631      	mov	r1, r6
 8004b20:	bf28      	it	cs
 8004b22:	463a      	movcs	r2, r7
 8004b24:	f7ff ffa4 	bl	8004a70 <memcpy>
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	f7ff f9c2 	bl	8003eb4 <_free_r>
 8004b30:	e7e1      	b.n	8004af6 <_realloc_r+0x1e>
 8004b32:	4635      	mov	r5, r6
 8004b34:	e7df      	b.n	8004af6 <_realloc_r+0x1e>
	...

08004b38 <_read_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	2200      	movs	r2, #0
 8004b42:	4d05      	ldr	r5, [pc, #20]	; (8004b58 <_read_r+0x20>)
 8004b44:	602a      	str	r2, [r5, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7fc fa9f 	bl	800108a <_read>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_read_r+0x1e>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_read_r+0x1e>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	2000022c 	.word	0x2000022c

08004b5c <_malloc_usable_size_r>:
 8004b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b60:	1f18      	subs	r0, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfbc      	itt	lt
 8004b66:	580b      	ldrlt	r3, [r1, r0]
 8004b68:	18c0      	addlt	r0, r0, r3
 8004b6a:	4770      	bx	lr

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
