
ADC_Internal_temperature_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000249c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e4  080025e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025e4  080025e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e4  080025e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000000c  080025f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  080025f8  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000046ad  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001231  00000000  00000000  000246e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00025918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000460  00000000  00000000  00025e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162b9  00000000  00000000  00026280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ecc  00000000  00000000  0003c539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b6c  00000000  00000000  00042405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2f71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001334  00000000  00000000  000c2fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002594 	.word	0x08002594

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002594 	.word	0x08002594

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	0000      	movs	r0, r0
	...

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fa0c 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f8a0 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f000 f92c 	bl	8000a28 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007d0:	f000 f8ec 	bl	80009ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80007d4:	4848      	ldr	r0, [pc, #288]	; (80008f8 <main+0x138>)
 80007d6:	f000 fb61 	bl	8000e9c <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80007da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007de:	4846      	ldr	r0, [pc, #280]	; (80008f8 <main+0x138>)
 80007e0:	f000 fc0a 	bl	8000ff8 <HAL_ADC_PollForConversion>
	      readValue = HAL_ADC_GetValue(&hadc1);
 80007e4:	4844      	ldr	r0, [pc, #272]	; (80008f8 <main+0x138>)
 80007e6:	f000 fd0d 	bl	8001204 <HAL_ADC_GetValue>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b43      	ldr	r3, [pc, #268]	; (80008fc <main+0x13c>)
 80007f0:	801a      	strh	r2, [r3, #0]
	      tCelsius = 357.558 - 0.187364 * readValue;
 80007f2:	4b42      	ldr	r3, [pc, #264]	; (80008fc <main+0x13c>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff26 	bl	8000648 <__aeabi_i2d>
 80007fc:	a336      	add	r3, pc, #216	; (adr r3, 80008d8 <main+0x118>)
 80007fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000802:	f7ff fca5 	bl	8000150 <__aeabi_dmul>
 8000806:	4602      	mov	r2, r0
 8000808:	460b      	mov	r3, r1
 800080a:	a135      	add	r1, pc, #212	; (adr r1, 80008e0 <main+0x120>)
 800080c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000810:	f7ff fdcc 	bl	80003ac <__aeabi_dsub>
 8000814:	4602      	mov	r2, r0
 8000816:	460b      	mov	r3, r1
 8000818:	4610      	mov	r0, r2
 800081a:	4619      	mov	r1, r3
 800081c:	f7ff ff7e 	bl	800071c <__aeabi_d2f>
 8000820:	4603      	mov	r3, r0
 8000822:	4a37      	ldr	r2, [pc, #220]	; (8000900 <main+0x140>)
 8000824:	6013      	str	r3, [r2, #0]
	      tFahrenheit = 675.6 - 0.337255 * readValue;
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <main+0x13c>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff0c 	bl	8000648 <__aeabi_i2d>
 8000830:	a32d      	add	r3, pc, #180	; (adr r3, 80008e8 <main+0x128>)
 8000832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000836:	f7ff fc8b 	bl	8000150 <__aeabi_dmul>
 800083a:	4602      	mov	r2, r0
 800083c:	460b      	mov	r3, r1
 800083e:	a12c      	add	r1, pc, #176	; (adr r1, 80008f0 <main+0x130>)
 8000840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000844:	f7ff fdb2 	bl	80003ac <__aeabi_dsub>
 8000848:	4602      	mov	r2, r0
 800084a:	460b      	mov	r3, r1
 800084c:	4610      	mov	r0, r2
 800084e:	4619      	mov	r1, r3
 8000850:	f7ff ff64 	bl	800071c <__aeabi_d2f>
 8000854:	4603      	mov	r3, r0
 8000856:	4a2b      	ldr	r2, [pc, #172]	; (8000904 <main+0x144>)
 8000858:	6013      	str	r3, [r2, #0]
	      if (readValue > 1740)
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <main+0x13c>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8000862:	4293      	cmp	r3, r2
 8000864:	d90f      	bls.n	8000886 <main+0xc6>
	      {
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	4827      	ldr	r0, [pc, #156]	; (8000908 <main+0x148>)
 800086c:	f001 f8d2 	bl	8001a14 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2110      	movs	r1, #16
 8000874:	4824      	ldr	r0, [pc, #144]	; (8000908 <main+0x148>)
 8000876:	f001 f8cd 	bl	8001a14 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2102      	movs	r1, #2
 800087e:	4822      	ldr	r0, [pc, #136]	; (8000908 <main+0x148>)
 8000880:	f001 f8c8 	bl	8001a14 <HAL_GPIO_WritePin>
 8000884:	e023      	b.n	80008ce <main+0x10e>
	      }
	      else if (readValue > 1720 )
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <main+0x13c>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	f5b3 6fd7 	cmp.w	r3, #1720	; 0x6b8
 800088e:	d90f      	bls.n	80008b0 <main+0xf0>
	      {
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	481c      	ldr	r0, [pc, #112]	; (8000908 <main+0x148>)
 8000896:	f001 f8bd 	bl	8001a14 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800089a:	2201      	movs	r2, #1
 800089c:	2110      	movs	r1, #16
 800089e:	481a      	ldr	r0, [pc, #104]	; (8000908 <main+0x148>)
 80008a0:	f001 f8b8 	bl	8001a14 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2102      	movs	r1, #2
 80008a8:	4817      	ldr	r0, [pc, #92]	; (8000908 <main+0x148>)
 80008aa:	f001 f8b3 	bl	8001a14 <HAL_GPIO_WritePin>
 80008ae:	e00e      	b.n	80008ce <main+0x10e>
	      }
	      else
	      {
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <main+0x148>)
 80008b6:	f001 f8ad 	bl	8001a14 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2110      	movs	r1, #16
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <main+0x148>)
 80008c0:	f001 f8a8 	bl	8001a14 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2102      	movs	r1, #2
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <main+0x148>)
 80008ca:	f001 f8a3 	bl	8001a14 <HAL_GPIO_WritePin>
	      }
	      HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 f9e8 	bl	8000ca4 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80008d4:	e781      	b.n	80007da <main+0x1a>
 80008d6:	bf00      	nop
 80008d8:	26394fad 	.word	0x26394fad
 80008dc:	3fc7fb8b 	.word	0x3fc7fb8b
 80008e0:	916872b0 	.word	0x916872b0
 80008e4:	407658ed 	.word	0x407658ed
 80008e8:	feda6613 	.word	0xfeda6613
 80008ec:	3fd59595 	.word	0x3fd59595
 80008f0:	cccccccd 	.word	0xcccccccd
 80008f4:	40851ccc 	.word	0x40851ccc
 80008f8:	20000028 	.word	0x20000028
 80008fc:	20000058 	.word	0x20000058
 8000900:	2000005c 	.word	0x2000005c
 8000904:	20000060 	.word	0x20000060
 8000908:	40010800 	.word	0x40010800

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000916:	2228      	movs	r2, #40	; 0x28
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fe32 	bl	8002584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000948:	2300      	movs	r3, #0
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f877 	bl	8001a44 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800095c:	f000 f896 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fae4 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000986:	f000 f881 	bl	8000a8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800098a:	2302      	movs	r3, #2
 800098c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fc5b 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a0:	f000 f874 	bl	8000a8c <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3750      	adds	r7, #80	; 0x50
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <MX_ADC1_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009ea:	f000 f97f 	bl	8000cec <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f84a 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009f8:	2310      	movs	r3, #16
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000a00:	2305      	movs	r3, #5
 8000a02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_ADC1_Init+0x74>)
 8000a0a:	f000 fc07 	bl	800121c <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a14:	f000 f83a 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000028 	.word	0x20000028
 8000a24:	40012400 	.word	0x40012400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_GPIO_Init+0x5c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <MX_GPIO_Init+0x5c>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_GPIO_Init+0x5c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2192      	movs	r1, #146	; 0x92
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x60>)
 8000a5a:	f000 ffdb 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 8000a5e:	2392      	movs	r3, #146	; 0x92
 8000a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0x60>)
 8000a76:	f000 fe49 	bl	800170c <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010800 	.word	0x40010800

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x5c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x60>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_MspInit+0x60>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <HAL_ADC_MspInit+0x34>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10b      	bne.n	8000b26 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_ADC_MspInit+0x38>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_ADC_MspInit+0x38>)
 8000b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_ADC_MspInit+0x38>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40012400 	.word	0x40012400
 8000b34:	40021000 	.word	0x40021000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7e:	f000 f875 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bba:	f7ff ffe4 	bl	8000b86 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f001 fcbd 	bl	800253c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fdfd 	bl	80007c0 <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	20000068 	.word	0x20000068

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 fd57 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff ff4c 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fd61 	bl	80016f2 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 fd37 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000064 	.word	0x20000064

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000064 	.word	0x20000064

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0be      	b.n	8000e8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fee6 	bl	8000afc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fbc5 	bl	80014c0 <ADC_ConversionStop_Disable>
 8000d36:	4603      	mov	r3, r0
 8000d38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8099 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 8095 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d58:	f023 0302 	bic.w	r3, r3, #2
 8000d5c:	f043 0202 	orr.w	r2, r3, #2
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7b1b      	ldrb	r3, [r3, #12]
 8000d72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d84:	d003      	beq.n	8000d8e <HAL_ADC_Init+0xa2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d102      	bne.n	8000d94 <HAL_ADC_Init+0xa8>
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	e000      	b.n	8000d96 <HAL_ADC_Init+0xaa>
 8000d94:	2300      	movs	r3, #0
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7d1b      	ldrb	r3, [r3, #20]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d119      	bne.n	8000dd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7b1b      	ldrb	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	035a      	lsls	r2, r3, #13
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e00b      	b.n	8000dd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f043 0220 	orr.w	r2, r3, #32
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_ADC_Init+0x1a8>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e08:	d003      	beq.n	8000e12 <HAL_ADC_Init+0x126>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	051b      	lsls	r3, r3, #20
 8000e1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_ADC_Init+0x1ac>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10b      	bne.n	8000e58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e56:	e018      	b.n	8000e8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f023 0312 	bic.w	r3, r3, #18
 8000e60:	f043 0210 	orr.w	r2, r3, #16
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e78:	e007      	b.n	8000e8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f043 0210 	orr.w	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	ffe1f7fd 	.word	0xffe1f7fd
 8000e98:	ff1f0efe 	.word	0xff1f0efe

08000e9c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Start+0x1a>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e098      	b.n	8000fe8 <HAL_ADC_Start+0x14c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 faa4 	bl	800140c <ADC_Enable>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 8087 	bne.w	8000fde <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a41      	ldr	r2, [pc, #260]	; (8000ff0 <HAL_ADC_Start+0x154>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d105      	bne.n	8000efa <HAL_ADC_Start+0x5e>
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <HAL_ADC_Start+0x158>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d115      	bne.n	8000f26 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d026      	beq.n	8000f62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f24:	e01d      	b.n	8000f62 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <HAL_ADC_Start+0x158>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d004      	beq.n	8000f46 <HAL_ADC_Start+0xaa>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <HAL_ADC_Start+0x154>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_ADC_Start+0xc6>
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_ADC_Start+0x158>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	f023 0206 	bic.w	r2, r3, #6
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f7a:	e002      	b.n	8000f82 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f06f 0202 	mvn.w	r2, #2
 8000f92:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fa2:	d113      	bne.n	8000fcc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_ADC_Start+0x154>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d105      	bne.n	8000fba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_ADC_Start+0x158>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d108      	bne.n	8000fcc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	e00c      	b.n	8000fe6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	e003      	b.n	8000fe6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40012800 	.word	0x40012800
 8000ff4:	40012400 	.word	0x40012400

08000ff8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800100e:	f7ff fe3f 	bl	8000c90 <HAL_GetTick>
 8001012:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00b      	beq.n	800103a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	f043 0220 	orr.w	r2, r3, #32
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0d3      	b.n	80011e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d131      	bne.n	80010ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001052:	2b00      	cmp	r3, #0
 8001054:	d12a      	bne.n	80010ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001056:	e021      	b.n	800109c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105e:	d01d      	beq.n	800109c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_ADC_PollForConversion+0x7e>
 8001066:	f7ff fe13 	bl	8000c90 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d212      	bcs.n	800109c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10b      	bne.n	800109c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f043 0204 	orr.w	r2, r3, #4
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e0a2      	b.n	80011e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0d6      	beq.n	8001058 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010aa:	e070      	b.n	800118e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <HAL_ADC_PollForConversion+0x1f4>)
 80010ae:	681c      	ldr	r4, [r3, #0]
 80010b0:	2002      	movs	r0, #2
 80010b2:	f001 f983 	bl	80023bc <HAL_RCCEx_GetPeriphCLKFreq>
 80010b6:	4603      	mov	r3, r0
 80010b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6919      	ldr	r1, [r3, #16]
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_ADC_PollForConversion+0x1f8>)
 80010c4:	400b      	ands	r3, r1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d118      	bne.n	80010fc <HAL_ADC_PollForConversion+0x104>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68d9      	ldr	r1, [r3, #12]
 80010d0:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <HAL_ADC_PollForConversion+0x1fc>)
 80010d2:	400b      	ands	r3, r1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d111      	bne.n	80010fc <HAL_ADC_PollForConversion+0x104>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6919      	ldr	r1, [r3, #16]
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_ADC_PollForConversion+0x200>)
 80010e0:	400b      	ands	r3, r1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d108      	bne.n	80010f8 <HAL_ADC_PollForConversion+0x100>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68d9      	ldr	r1, [r3, #12]
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_ADC_PollForConversion+0x204>)
 80010ee:	400b      	ands	r3, r1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_ADC_PollForConversion+0x100>
 80010f4:	2314      	movs	r3, #20
 80010f6:	e020      	b.n	800113a <HAL_ADC_PollForConversion+0x142>
 80010f8:	2329      	movs	r3, #41	; 0x29
 80010fa:	e01e      	b.n	800113a <HAL_ADC_PollForConversion+0x142>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6919      	ldr	r1, [r3, #16]
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_ADC_PollForConversion+0x200>)
 8001104:	400b      	ands	r3, r1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <HAL_ADC_PollForConversion+0x120>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68d9      	ldr	r1, [r3, #12]
 8001110:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <HAL_ADC_PollForConversion+0x204>)
 8001112:	400b      	ands	r3, r1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00d      	beq.n	8001134 <HAL_ADC_PollForConversion+0x13c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6919      	ldr	r1, [r3, #16]
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <HAL_ADC_PollForConversion+0x208>)
 8001120:	400b      	ands	r3, r1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d108      	bne.n	8001138 <HAL_ADC_PollForConversion+0x140>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68d9      	ldr	r1, [r3, #12]
 800112c:	4b34      	ldr	r3, [pc, #208]	; (8001200 <HAL_ADC_PollForConversion+0x208>)
 800112e:	400b      	ands	r3, r1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_ADC_PollForConversion+0x140>
 8001134:	2354      	movs	r3, #84	; 0x54
 8001136:	e000      	b.n	800113a <HAL_ADC_PollForConversion+0x142>
 8001138:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001140:	e021      	b.n	8001186 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d01a      	beq.n	8001180 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_ADC_PollForConversion+0x168>
 8001150:	f7ff fd9e 	bl	8000c90 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d20f      	bcs.n	8001180 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d90b      	bls.n	8001180 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f043 0204 	orr.w	r2, r3, #4
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e030      	b.n	80011e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	429a      	cmp	r2, r3
 800118c:	d8d9      	bhi.n	8001142 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f06f 0212 	mvn.w	r2, #18
 8001196:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011b2:	d115      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d111      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000
 80011f0:	24924924 	.word	0x24924924
 80011f4:	00924924 	.word	0x00924924
 80011f8:	12492492 	.word	0x12492492
 80011fc:	00492492 	.word	0x00492492
 8001200:	00249249 	.word	0x00249249

08001204 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_ADC_ConfigChannel+0x20>
 8001238:	2302      	movs	r3, #2
 800123a:	e0dc      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x1da>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b06      	cmp	r3, #6
 800124a:	d81c      	bhi.n	8001286 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b05      	subs	r3, #5
 800125e:	221f      	movs	r2, #31
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b05      	subs	r3, #5
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
 8001284:	e03c      	b.n	8001300 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d81c      	bhi.n	80012c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	3b23      	subs	r3, #35	; 0x23
 80012a0:	221f      	movs	r2, #31
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	4019      	ands	r1, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b23      	subs	r3, #35	; 0x23
 80012ba:	fa00 f203 	lsl.w	r2, r0, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
 80012c6:	e01b      	b.n	8001300 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	3b41      	subs	r3, #65	; 0x41
 80012da:	221f      	movs	r2, #31
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4019      	ands	r1, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	3b41      	subs	r3, #65	; 0x41
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d91c      	bls.n	8001342 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68d9      	ldr	r1, [r3, #12]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	3b1e      	subs	r3, #30
 800131a:	2207      	movs	r2, #7
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	4019      	ands	r1, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	6898      	ldr	r0, [r3, #8]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	3b1e      	subs	r3, #30
 8001334:	fa00 f203 	lsl.w	r2, r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	e019      	b.n	8001376 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6919      	ldr	r1, [r3, #16]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	2207      	movs	r2, #7
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	4019      	ands	r1, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6898      	ldr	r0, [r3, #8]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b10      	cmp	r3, #16
 800137c:	d003      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001382:	2b11      	cmp	r3, #17
 8001384:	d132      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_ADC_ConfigChannel+0x1e4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d125      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d126      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d11a      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_ADC_ConfigChannel+0x1e8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_ADC_ConfigChannel+0x1ec>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9a      	lsrs	r2, r3, #18
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x1b2>
 80013da:	e007      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f043 0220 	orr.w	r2, r3, #32
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40012400 	.word	0x40012400
 8001404:	20000000 	.word	0x20000000
 8001408:	431bde83 	.word	0x431bde83

0800140c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b01      	cmp	r3, #1
 8001428:	d040      	beq.n	80014ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <ADC_Enable+0xac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <ADC_Enable+0xb0>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001448:	e002      	b.n	8001450 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	3b01      	subs	r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001456:	f7ff fc1b 	bl	8000c90 <HAL_GetTick>
 800145a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800145c:	e01f      	b.n	800149e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800145e:	f7ff fc17 	bl	8000c90 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d918      	bls.n	800149e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b01      	cmp	r3, #1
 8001478:	d011      	beq.n	800149e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	f043 0210 	orr.w	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e007      	b.n	80014ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d1d8      	bne.n	800145e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000000 	.word	0x20000000
 80014bc:	431bde83 	.word	0x431bde83

080014c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d12e      	bne.n	8001538 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ea:	f7ff fbd1 	bl	8000c90 <HAL_GetTick>
 80014ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014f0:	e01b      	b.n	800152a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014f2:	f7ff fbcd 	bl	8000c90 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d914      	bls.n	800152a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10d      	bne.n	800152a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e007      	b.n	800153a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b01      	cmp	r3, #1
 8001536:	d0dc      	beq.n	80014f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff90 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff49 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff5e 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffb0 	bl	8001660 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b08b      	sub	sp, #44	; 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e169      	b.n	80019f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001720:	2201      	movs	r2, #1
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8158 	bne.w	80019ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a9a      	ldr	r2, [pc, #616]	; (80019ac <HAL_GPIO_Init+0x2a0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d05e      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001748:	4a98      	ldr	r2, [pc, #608]	; (80019ac <HAL_GPIO_Init+0x2a0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d875      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800174e:	4a98      	ldr	r2, [pc, #608]	; (80019b0 <HAL_GPIO_Init+0x2a4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d058      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001754:	4a96      	ldr	r2, [pc, #600]	; (80019b0 <HAL_GPIO_Init+0x2a4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d86f      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800175a:	4a96      	ldr	r2, [pc, #600]	; (80019b4 <HAL_GPIO_Init+0x2a8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d052      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001760:	4a94      	ldr	r2, [pc, #592]	; (80019b4 <HAL_GPIO_Init+0x2a8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d869      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001766:	4a94      	ldr	r2, [pc, #592]	; (80019b8 <HAL_GPIO_Init+0x2ac>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d04c      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 800176c:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <HAL_GPIO_Init+0x2ac>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d863      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001772:	4a92      	ldr	r2, [pc, #584]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d046      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001778:	4a90      	ldr	r2, [pc, #576]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d85d      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d82a      	bhi.n	80017d8 <HAL_GPIO_Init+0xcc>
 8001782:	2b12      	cmp	r3, #18
 8001784:	d859      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_GPIO_Init+0x80>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	08001807 	.word	0x08001807
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017f3 	.word	0x080017f3
 8001798:	08001835 	.word	0x08001835
 800179c:	0800183b 	.word	0x0800183b
 80017a0:	0800183b 	.word	0x0800183b
 80017a4:	0800183b 	.word	0x0800183b
 80017a8:	0800183b 	.word	0x0800183b
 80017ac:	0800183b 	.word	0x0800183b
 80017b0:	0800183b 	.word	0x0800183b
 80017b4:	0800183b 	.word	0x0800183b
 80017b8:	0800183b 	.word	0x0800183b
 80017bc:	0800183b 	.word	0x0800183b
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	0800183b 	.word	0x0800183b
 80017c8:	0800183b 	.word	0x0800183b
 80017cc:	0800183b 	.word	0x0800183b
 80017d0:	080017e9 	.word	0x080017e9
 80017d4:	080017fd 	.word	0x080017fd
 80017d8:	4a79      	ldr	r2, [pc, #484]	; (80019c0 <HAL_GPIO_Init+0x2b4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017de:	e02c      	b.n	800183a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e029      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	3304      	adds	r3, #4
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e024      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	3308      	adds	r3, #8
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e01f      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	330c      	adds	r3, #12
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e01a      	b.n	800183c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180e:	2304      	movs	r3, #4
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e013      	b.n	800183c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800181c:	2308      	movs	r3, #8
 800181e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]
          break;
 8001826:	e009      	b.n	800183c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	615a      	str	r2, [r3, #20]
          break;
 8001832:	e003      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x130>
          break;
 800183a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2bff      	cmp	r3, #255	; 0xff
 8001840:	d801      	bhi.n	8001846 <HAL_GPIO_Init+0x13a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	e001      	b.n	800184a <HAL_GPIO_Init+0x13e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3304      	adds	r3, #4
 800184a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d802      	bhi.n	8001858 <HAL_GPIO_Init+0x14c>
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x152>
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	3b08      	subs	r3, #8
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	210f      	movs	r1, #15
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	401a      	ands	r2, r3
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80b1 	beq.w	80019ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_GPIO_Init+0x2b8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_GPIO_Init+0x2b8>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x2b8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a4:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <HAL_GPIO_Init+0x2bc>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a40      	ldr	r2, [pc, #256]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d013      	beq.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3f      	ldr	r2, [pc, #252]	; (80019d0 <HAL_GPIO_Init+0x2c4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d00d      	beq.n	80018f4 <HAL_GPIO_Init+0x1e8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a3e      	ldr	r2, [pc, #248]	; (80019d4 <HAL_GPIO_Init+0x2c8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d007      	beq.n	80018f0 <HAL_GPIO_Init+0x1e4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d101      	bne.n	80018ec <HAL_GPIO_Init+0x1e0>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e006      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018ec:	2304      	movs	r3, #4
 80018ee:	e004      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018f8:	2300      	movs	r3, #0
 80018fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fc:	f002 0203 	and.w	r2, r2, #3
 8001900:	0092      	lsls	r2, r2, #2
 8001902:	4093      	lsls	r3, r2
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800190a:	492f      	ldr	r1, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x2bc>)
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	492c      	ldr	r1, [pc, #176]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	4928      	ldr	r1, [pc, #160]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800193c:	4013      	ands	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4922      	ldr	r1, [pc, #136]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	491e      	ldr	r1, [pc, #120]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001964:	4013      	ands	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4918      	ldr	r1, [pc, #96]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	4914      	ldr	r1, [pc, #80]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800198c:	4013      	ands	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d021      	beq.n	80019e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e021      	b.n	80019ee <HAL_GPIO_Init+0x2e2>
 80019aa:	bf00      	nop
 80019ac:	10320000 	.word	0x10320000
 80019b0:	10310000 	.word	0x10310000
 80019b4:	10220000 	.word	0x10220000
 80019b8:	10210000 	.word	0x10210000
 80019bc:	10120000 	.word	0x10120000
 80019c0:	10110000 	.word	0x10110000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40010800 	.word	0x40010800
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40011400 	.word	0x40011400
 80019dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_GPIO_Init+0x304>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	4909      	ldr	r1, [pc, #36]	; (8001a10 <HAL_GPIO_Init+0x304>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f47f ae8e 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	372c      	adds	r7, #44	; 0x2c
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e272      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a70:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e24c      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b80      	ldr	r3, [pc, #512]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7f      	ldr	r2, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b78      	ldr	r3, [pc, #480]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a77      	ldr	r2, [pc, #476]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b6b      	ldr	r3, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a67      	ldr	r2, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f8b6 	bl	8000c90 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff f8b2 	bl	8000c90 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e200      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f8a2 	bl	8000c90 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f89e 	bl	8000c90 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1ec      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1c0      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4939      	ldr	r1, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff f857 	bl	8000c90 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff f853 	bl	8000c90 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1a1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f836 	bl	8000c90 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff f832 	bl	8000c90 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e180      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff f816 	bl	8000c90 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f812 	bl	8000c90 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e160      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 fac4 	bl	8002214 <RCC_Delay>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7fe fffc 	bl	8000c90 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7fe fff8 	bl	8000c90 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e146      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	42420000 	.word	0x42420000
 8001cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b92      	ldr	r3, [pc, #584]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a87      	ldr	r2, [pc, #540]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b85      	ldr	r3, [pc, #532]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b82      	ldr	r3, [pc, #520]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe ffb9 	bl	8000c90 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7fe ffb5 	bl	8000c90 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	; 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e103      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x312>
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a69      	ldr	r2, [pc, #420]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a66      	ldr	r2, [pc, #408]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x356>
 8001d80:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a60      	ldr	r2, [pc, #384]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a57      	ldr	r2, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7fe ff69 	bl	8000c90 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe ff65 	bl	8000c90 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0b1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7fe ff53 	bl	8000c90 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7fe ff4f 	bl	8000c90 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e09b      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8087 	beq.w	8001f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d061      	beq.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d146      	bne.n	8001ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe ff23 	bl	8000c90 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe ff1f 	bl	8000c90 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e06d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4921      	ldr	r1, [pc, #132]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a19      	ldr	r1, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	491b      	ldr	r1, [pc, #108]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fef3 	bl	8000c90 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe feef 	bl	8000c90 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e03d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x46a>
 8001ecc:	e035      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fedc 	bl	8000c90 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fed8 	bl	8000c90 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e026      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
 8001efa:	e01e      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e019      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x500>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0d0      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4965      	ldr	r1, [pc, #404]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d040      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b41      	ldr	r3, [pc, #260]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e073      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b39      	ldr	r3, [pc, #228]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4936      	ldr	r1, [pc, #216]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7fe fe2a 	bl	8000c90 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fe26 	bl	8000c90 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e053      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d210      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4922      	ldr	r1, [pc, #136]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490a      	ldr	r1, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1cc>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1d0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fd88 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000
 800210c:	40021000 	.word	0x40021000
 8002110:	080025cc 	.word	0x080025cc
 8002114:	20000000 	.word	0x20000000
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b490      	push	{r4, r7}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002124:	1d3c      	adds	r4, r7, #4
 8002126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800212c:	f240 2301 	movw	r3, #513	; 0x201
 8002130:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d002      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x40>
 8002156:	2b08      	cmp	r3, #8
 8002158:	d003      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x46>
 800215a:	e02b      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800215e:	623b      	str	r3, [r7, #32]
      break;
 8002160:	e02b      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3328      	adds	r3, #40	; 0x28
 800216c:	443b      	add	r3, r7
 800216e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002172:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0c5b      	lsrs	r3, r3, #17
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	3328      	adds	r3, #40	; 0x28
 800218a:	443b      	add	r3, r7
 800218c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002190:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002196:	fb03 f202 	mul.w	r2, r3, r2
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	e004      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	623b      	str	r3, [r7, #32]
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b6:	623b      	str	r3, [r7, #32]
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	6a3b      	ldr	r3, [r7, #32]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc90      	pop	{r4, r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	080025ac 	.word	0x080025ac
 80021cc:	40021000 	.word	0x40021000
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021f0:	f7ff fff2 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0adb      	lsrs	r3, r3, #11
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	080025dc 	.word	0x080025dc

08002214 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <RCC_Delay+0x34>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <RCC_Delay+0x38>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0a5b      	lsrs	r3, r3, #9
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002230:	bf00      	nop
  }
  while (Delay --);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1e5a      	subs	r2, r3, #1
 8002236:	60fa      	str	r2, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f9      	bne.n	8002230 <RCC_Delay+0x1c>
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	20000000 	.word	0x20000000
 800224c:	10624dd3 	.word	0x10624dd3

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d07d      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002270:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a4b      	ldr	r2, [pc, #300]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d118      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a4:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b0:	f7fe fcee 	bl	8000c90 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	e008      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b8:	f7fe fcea 	bl	8000c90 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e06d      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d6:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d02e      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d027      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f4:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022fe:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800230a:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d014      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fcb9 	bl	8000c90 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fcb5 	bl	8000c90 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e036      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4917      	ldr	r1, [pc, #92]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	4313      	orrs	r3, r2
 8002354:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002366:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	490b      	ldr	r1, [pc, #44]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4904      	ldr	r1, [pc, #16]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
 80023b8:	42420440 	.word	0x42420440

080023bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b08d      	sub	sp, #52	; 0x34
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023c4:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80023c6:	f107 040c 	add.w	r4, r7, #12
 80023ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023d0:	f240 2301 	movw	r3, #513	; 0x201
 80023d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	2300      	movs	r3, #0
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	f200 808e 	bhi.w	8002514 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d049      	beq.n	8002492 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d079      	beq.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002404:	e086      	b.n	8002514 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d07f      	beq.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	3330      	adds	r3, #48	; 0x30
 8002422:	443b      	add	r3, r7
 8002424:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002428:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d017      	beq.n	8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	0c5b      	lsrs	r3, r3, #17
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	3330      	adds	r3, #48	; 0x30
 8002440:	443b      	add	r3, r7
 8002442:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002452:	4a37      	ldr	r2, [pc, #220]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	fbb2 f2f3 	udiv	r2, r2, r3
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002462:	e004      	b.n	800246e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	4a33      	ldr	r2, [pc, #204]	; (8002534 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800246e:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d102      	bne.n	8002482 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002480:	e04a      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002490:	e042      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a2:	d108      	bne.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80024ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b4:	e01f      	b.n	80024f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c0:	d109      	bne.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80024ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d4:	e00f      	b.n	80024f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e0:	d11c      	bne.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80024ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024f4:	e012      	b.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80024f6:	e011      	b.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024f8:	f7ff fe78 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0b9b      	lsrs	r3, r3, #14
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	3301      	adds	r3, #1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002512:	e004      	b.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002514:	bf00      	nop
 8002516:	e002      	b.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002518:	bf00      	nop
 800251a:	e000      	b.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800251c:	bf00      	nop
    }
  }
  return (frequency);
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002520:	4618      	mov	r0, r3
 8002522:	3734      	adds	r7, #52	; 0x34
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	080025bc 	.word	0x080025bc
 800252c:	40021000 	.word	0x40021000
 8002530:	007a1200 	.word	0x007a1200
 8002534:	003d0900 	.word	0x003d0900
 8002538:	aaaaaaab 	.word	0xaaaaaaab

0800253c <__libc_init_array>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	2600      	movs	r6, #0
 8002540:	4d0c      	ldr	r5, [pc, #48]	; (8002574 <__libc_init_array+0x38>)
 8002542:	4c0d      	ldr	r4, [pc, #52]	; (8002578 <__libc_init_array+0x3c>)
 8002544:	1b64      	subs	r4, r4, r5
 8002546:	10a4      	asrs	r4, r4, #2
 8002548:	42a6      	cmp	r6, r4
 800254a:	d109      	bne.n	8002560 <__libc_init_array+0x24>
 800254c:	f000 f822 	bl	8002594 <_init>
 8002550:	2600      	movs	r6, #0
 8002552:	4d0a      	ldr	r5, [pc, #40]	; (800257c <__libc_init_array+0x40>)
 8002554:	4c0a      	ldr	r4, [pc, #40]	; (8002580 <__libc_init_array+0x44>)
 8002556:	1b64      	subs	r4, r4, r5
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	42a6      	cmp	r6, r4
 800255c:	d105      	bne.n	800256a <__libc_init_array+0x2e>
 800255e:	bd70      	pop	{r4, r5, r6, pc}
 8002560:	f855 3b04 	ldr.w	r3, [r5], #4
 8002564:	4798      	blx	r3
 8002566:	3601      	adds	r6, #1
 8002568:	e7ee      	b.n	8002548 <__libc_init_array+0xc>
 800256a:	f855 3b04 	ldr.w	r3, [r5], #4
 800256e:	4798      	blx	r3
 8002570:	3601      	adds	r6, #1
 8002572:	e7f2      	b.n	800255a <__libc_init_array+0x1e>
 8002574:	080025e4 	.word	0x080025e4
 8002578:	080025e4 	.word	0x080025e4
 800257c:	080025e4 	.word	0x080025e4
 8002580:	080025e8 	.word	0x080025e8

08002584 <memset>:
 8002584:	4603      	mov	r3, r0
 8002586:	4402      	add	r2, r0
 8002588:	4293      	cmp	r3, r2
 800258a:	d100      	bne.n	800258e <memset+0xa>
 800258c:	4770      	bx	lr
 800258e:	f803 1b01 	strb.w	r1, [r3], #1
 8002592:	e7f9      	b.n	8002588 <memset+0x4>

08002594 <_init>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr

080025a0 <_fini>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	bf00      	nop
 80025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a6:	bc08      	pop	{r3}
 80025a8:	469e      	mov	lr, r3
 80025aa:	4770      	bx	lr
