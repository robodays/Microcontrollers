
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000062c  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053e  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000316  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000103  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	93 c0       	rjmp	.+294    	; 0x13a <__vector_9>
  14:	26 c1       	rjmp	.+588    	; 0x262 <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ed       	ldi	r30, 0xD8	; 216
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 38       	cpi	r26, 0x80	; 128
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1a d1       	rcall	.+564    	; 0x28e <main>
  5a:	3c c1       	rjmp	.+632    	; 0x2d4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <number>:
};



void number (unsigned int num)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ac 01       	movw	r20, r24
	r1_1000 = num/1000;		// Тысячи
  64:	ec 01       	movw	r28, r24
  66:	d6 95       	lsr	r29
  68:	c7 95       	ror	r28
  6a:	d6 95       	lsr	r29
  6c:	c7 95       	ror	r28
  6e:	d6 95       	lsr	r29
  70:	c7 95       	ror	r28
  72:	9e 01       	movw	r18, r28
  74:	a5 ec       	ldi	r26, 0xC5	; 197
  76:	b0 e2       	ldi	r27, 0x20	; 32
  78:	21 d1       	rcall	.+578    	; 0x2bc <__umulhisi3>
  7a:	fc 01       	movw	r30, r24
  7c:	f2 95       	swap	r31
  7e:	e2 95       	swap	r30
  80:	ef 70       	andi	r30, 0x0F	; 15
  82:	ef 27       	eor	r30, r31
  84:	ff 70       	andi	r31, 0x0F	; 15
  86:	ef 27       	eor	r30, r31
  88:	f0 93 7d 00 	sts	0x007D, r31	; 0x80007d <r1_1000+0x1>
  8c:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <r1_1000>
	r2_100 = num%1000/100;	// Сотни
  90:	28 ee       	ldi	r18, 0xE8	; 232
  92:	33 e0       	ldi	r19, 0x03	; 3
  94:	e2 9f       	mul	r30, r18
  96:	c0 01       	movw	r24, r0
  98:	e3 9f       	mul	r30, r19
  9a:	90 0d       	add	r25, r0
  9c:	f2 9f       	mul	r31, r18
  9e:	90 0d       	add	r25, r0
  a0:	11 24       	eor	r1, r1
  a2:	9a 01       	movw	r18, r20
  a4:	28 1b       	sub	r18, r24
  a6:	39 0b       	sbc	r19, r25
  a8:	36 95       	lsr	r19
  aa:	27 95       	ror	r18
  ac:	36 95       	lsr	r19
  ae:	27 95       	ror	r18
  b0:	ab e7       	ldi	r26, 0x7B	; 123
  b2:	b4 e1       	ldi	r27, 0x14	; 20
  b4:	03 d1       	rcall	.+518    	; 0x2bc <__umulhisi3>
  b6:	96 95       	lsr	r25
  b8:	87 95       	ror	r24
  ba:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <r2_100+0x1>
  be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <r2_100>
	r3_10 = num%100/10;		// Десятки
  c2:	9a 01       	movw	r18, r20
  c4:	36 95       	lsr	r19
  c6:	27 95       	ror	r18
  c8:	36 95       	lsr	r19
  ca:	27 95       	ror	r18
  cc:	f7 d0       	rcall	.+494    	; 0x2bc <__umulhisi3>
  ce:	9c 01       	movw	r18, r24
  d0:	36 95       	lsr	r19
  d2:	27 95       	ror	r18
  d4:	64 e6       	ldi	r22, 0x64	; 100
  d6:	62 9f       	mul	r22, r18
  d8:	c0 01       	movw	r24, r0
  da:	63 9f       	mul	r22, r19
  dc:	90 0d       	add	r25, r0
  de:	11 24       	eor	r1, r1
  e0:	9a 01       	movw	r18, r20
  e2:	28 1b       	sub	r18, r24
  e4:	39 0b       	sbc	r19, r25
  e6:	ad ec       	ldi	r26, 0xCD	; 205
  e8:	bc ec       	ldi	r27, 0xCC	; 204
  ea:	e8 d0       	rcall	.+464    	; 0x2bc <__umulhisi3>
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
  f8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <r3_10+0x1>
  fc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <r3_10>
	r4_1 = num%10;			// Единицы
 100:	9a 01       	movw	r18, r20
 102:	dc d0       	rcall	.+440    	; 0x2bc <__umulhisi3>
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	9c 01       	movw	r18, r24
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	9a 01       	movw	r18, r20
 128:	28 1b       	sub	r18, r24
 12a:	39 0b       	sbc	r19, r25
 12c:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <r4_1+0x1>
 130:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <r4_1>
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <__vector_9>:

ISR(TIMER0_OVF_vect)
{	
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	if (cnt==1)
 14c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 150:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 05       	cpc	r25, r1
 158:	89 f4       	brne	.+34     	; 0x17c <__vector_9+0x42>
	{
		PORTC |= (1<<3) | (1<<2) | (1<<1);
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	8e 60       	ori	r24, 0x0E	; 14
 15e:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<0);
 160:	85 b3       	in	r24, 0x15	; 21
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r1_1000]; // Сотни
 166:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <r1_1000>
 16a:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <r1_1000+0x1>
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 5a       	subi	r30, 0xA0	; 160
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 81       	ld	r24, Z
 178:	82 bb       	out	0x12, r24	; 18
 17a:	3a c0       	rjmp	.+116    	; 0x1f0 <__vector_9+0xb6>
		
	}
	else if (cnt==2)
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	91 05       	cpc	r25, r1
 180:	89 f4       	brne	.+34     	; 0x1a4 <__vector_9+0x6a>
	{
		PORTC |= (1<<3) | (1<<2) | (1<<0);
 182:	85 b3       	in	r24, 0x15	; 21
 184:	8d 60       	ori	r24, 0x0D	; 13
 186:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<1);
 188:	85 b3       	in	r24, 0x15	; 21
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r2_100]; // Десятки
 18e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <r2_100>
 192:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <r2_100+0x1>
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	e0 5a       	subi	r30, 0xA0	; 160
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 81       	ld	r24, Z
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	26 c0       	rjmp	.+76     	; 0x1f0 <__vector_9+0xb6>
	}
	else if (cnt==3)
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	91 05       	cpc	r25, r1
 1a8:	89 f4       	brne	.+34     	; 0x1cc <__vector_9+0x92>
	{
		PORTC |= (1<<3) | (1<<1) | (1<<0);
 1aa:	85 b3       	in	r24, 0x15	; 21
 1ac:	8b 60       	ori	r24, 0x0B	; 11
 1ae:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<2);
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r3_10]; // Единици
 1b6:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <r3_10>
 1ba:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <r3_10+0x1>
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 5a       	subi	r30, 0xA0	; 160
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <__vector_9+0xb6>
	}
	else if (cnt==4)
 1cc:	04 97       	sbiw	r24, 0x04	; 4
 1ce:	81 f4       	brne	.+32     	; 0x1f0 <__vector_9+0xb6>
	{
		PORTC |= (1<<2) | (1<<1) | (1<<0);
 1d0:	85 b3       	in	r24, 0x15	; 21
 1d2:	87 60       	ori	r24, 0x07	; 7
 1d4:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<3);
 1d6:	85 b3       	in	r24, 0x15	; 21
 1d8:	87 7f       	andi	r24, 0xF7	; 247
 1da:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r4_1]; // Единици
 1dc:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <r4_1>
 1e0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <r4_1+0x1>
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e0 5a       	subi	r30, 0xA0	; 160
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	82 bb       	out	0x12, r24	; 18
	}
	
	cnt++;
 1f0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1f4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 1fe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	if(cnt>8) cnt=1;
 202:	09 97       	sbiw	r24, 0x09	; 9
 204:	34 f0       	brlt	.+12     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 20e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <SPI_Slave_Settings>:


// Настройки SPI_Slave
void SPI_Slave_Settings (void)
{
	DDRB &= ~((1<<MOSI) | (1<<SCK));
 224:	87 b3       	in	r24, 0x17	; 23
 226:	87 7d       	andi	r24, 0xD7	; 215
 228:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<MISO);
 22a:	87 b3       	in	r24, 0x17	; 23
 22c:	80 61       	ori	r24, 0x10	; 16
 22e:	87 bb       	out	0x17, r24	; 23
	
	SPCR |= (1<<SPIE); // Разрешаем прерывания по SPI
 230:	8d b1       	in	r24, 0x0d	; 13
 232:	80 68       	ori	r24, 0x80	; 128
 234:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<<SPE); // Включаем SPI
 236:	8d b1       	in	r24, 0x0d	; 13
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1<<MSTR); // МК Slave
 23c:	8d b1       	in	r24, 0x0d	; 13
 23e:	8f 7e       	andi	r24, 0xEF	; 239
 240:	8d b9       	out	0x0d, r24	; 13
	
	// Частота не требуется, т.к. зависит от мастера
	
	SPCR |= (1<<CPOL); // Импульсы отрицательной полярности
 242:	8d b1       	in	r24, 0x0d	; 13
 244:	88 60       	ori	r24, 0x08	; 8
 246:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<<CPHA); // Выборка данных по заднему фронту
 248:	8d b1       	in	r24, 0x0d	; 13
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1<<DORD); // Первым передается старший бит
 24e:	8d b1       	in	r24, 0x0d	; 13
 250:	8f 7d       	andi	r24, 0xDF	; 223
 252:	8d b9       	out	0x0d, r24	; 13
	
	DDRB &= ~(1<<SS);
 254:	87 b3       	in	r24, 0x17	; 23
 256:	8b 7f       	andi	r24, 0xFB	; 251
 258:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS);
 25a:	88 b3       	in	r24, 0x18	; 24
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	88 bb       	out	0x18, r24	; 24
 260:	08 95       	ret

00000262 <__vector_10>:
	
}

ISR(SPI_STC_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
	while(~SPSR&(1<<SPIF))
 270:	77 9b       	sbis	0x0e, 7	; 14
 272:	fe cf       	rjmp	.-4      	; 0x270 <__vector_10+0xe>
	;
	counter = SPDR;
 274:	8f b1       	in	r24, 0x0f	; 15
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <counter+0x1>
 27c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <counter>
}
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <main>:


int main(void)
{
	// Сегменты индикатора
	DDRD = 0xff;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 292:	12 ba       	out	0x12, r1	; 18
	
	// Разряды индикатора
	DDRC |= (1<<3) | (1<<2) | (1<<1) | (1<<0);
 294:	84 b3       	in	r24, 0x14	; 20
 296:	8f 60       	ori	r24, 0x0F	; 15
 298:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<3) | (1<<2) | (1<<1) | (1<<0);
 29a:	85 b3       	in	r24, 0x15	; 21
 29c:	8f 60       	ori	r24, 0x0F	; 15
 29e:	85 bb       	out	0x15, r24	; 21
	
	TCCR0 = 0b00000010; // Делим частоту МК на 8
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 2a4:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1<<TOIE0); // Разрешаем прерывания при переполнении 0-от ТС
 2a6:	89 b7       	in	r24, 0x39	; 57
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	89 bf       	out	0x39, r24	; 57
	
	SPI_Slave_Settings();
 2ac:	bb df       	rcall	.-138    	; 0x224 <SPI_Slave_Settings>
	
	sei();
 2ae:	78 94       	sei

	while (1)
	{
		number(counter);
 2b0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <counter>
 2b4:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <counter+0x1>
 2b8:	d2 de       	rcall	.-604    	; 0x5e <number>
 2ba:	fa cf       	rjmp	.-12     	; 0x2b0 <main+0x22>

000002bc <__umulhisi3>:
 2bc:	a2 9f       	mul	r26, r18
 2be:	b0 01       	movw	r22, r0
 2c0:	b3 9f       	mul	r27, r19
 2c2:	c0 01       	movw	r24, r0
 2c4:	a3 9f       	mul	r26, r19
 2c6:	01 d0       	rcall	.+2      	; 0x2ca <__umulhisi3+0xe>
 2c8:	b2 9f       	mul	r27, r18
 2ca:	70 0d       	add	r23, r0
 2cc:	81 1d       	adc	r24, r1
 2ce:	11 24       	eor	r1, r1
 2d0:	91 1d       	adc	r25, r1
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
