
13_Timer_device.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800076  00800076  0000039c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070f  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bf  00000000  00000000  00000b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000342  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	59 c0       	rjmp	.+178    	; 0xc6 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ef       	ldi	r30, 0xF2	; 242
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 38       	cpi	r26, 0x80	; 128
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b5 d0       	rcall	.+362    	; 0x1c4 <main>
  5a:	49 c1       	rjmp	.+658    	; 0x2ee <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <start>:
char discharge = 1; // digit of a number

int num = 0;

void start() {
	TCCR1B &= ~(1<<CS12);
  5e:	8e b5       	in	r24, 0x2e	; 46
  60:	8b 7f       	andi	r24, 0xFB	; 251
  62:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS11) | (1<<CS10); // 1000000 / 64 = 15625 tickû
  64:	8e b5       	in	r24, 0x2e	; 46
  66:	83 60       	ori	r24, 0x03	; 3
  68:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK |= (1<<OCIE1A); // Bit 4 – OCIE1A: Timer/Counter1, Output Compare A Match Interrupt Enable
  6a:	89 b7       	in	r24, 0x39	; 57
  6c:	80 61       	ori	r24, 0x10	; 16
  6e:	89 bf       	out	0x39, r24	; 57
	
	// comparison register 15625
	OCR1AH = 0b00111101;
  70:	8d e3       	ldi	r24, 0x3D	; 61
  72:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00001001;
  74:	89 e0       	ldi	r24, 0x09	; 9
  76:	8a bd       	out	0x2a, r24	; 42
	
	TCNT1 = 0;
  78:	1d bc       	out	0x2d, r1	; 45
  7a:	1c bc       	out	0x2c, r1	; 44
	
	TCCR1B |= (1<<WGM12); // automatic reset when comparing
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8e bd       	out	0x2e, r24	; 46
  82:	08 95       	ret

00000084 <number>:
	
	
	
}

void number(int num) {
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	9c 01       	movw	r18, r24
	
	digits[0] = num/1000;
  8a:	68 ee       	ldi	r22, 0xE8	; 232
  8c:	73 e0       	ldi	r23, 0x03	; 3
  8e:	08 d1       	rcall	.+528    	; 0x2a0 <__divmodhi4>
  90:	e8 e7       	ldi	r30, 0x78	; 120
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	71 83       	std	Z+1, r23	; 0x01
  96:	60 83       	st	Z, r22
	digits[1] = num % 1000 / 100;
  98:	c4 e6       	ldi	r28, 0x64	; 100
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	be 01       	movw	r22, r28
  9e:	00 d1       	rcall	.+512    	; 0x2a0 <__divmodhi4>
  a0:	73 83       	std	Z+3, r23	; 0x03
  a2:	62 83       	std	Z+2, r22	; 0x02
	digits[2] = num % 100 / 10;
  a4:	c9 01       	movw	r24, r18
  a6:	be 01       	movw	r22, r28
  a8:	fb d0       	rcall	.+502    	; 0x2a0 <__divmodhi4>
  aa:	ca e0       	ldi	r28, 0x0A	; 10
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	be 01       	movw	r22, r28
  b0:	f7 d0       	rcall	.+494    	; 0x2a0 <__divmodhi4>
  b2:	75 83       	std	Z+5, r23	; 0x05
  b4:	64 83       	std	Z+4, r22	; 0x04
	digits[3] = num % 10;
  b6:	c9 01       	movw	r24, r18
  b8:	be 01       	movw	r22, r28
  ba:	f2 d0       	rcall	.+484    	; 0x2a0 <__divmodhi4>
  bc:	97 83       	std	Z+7, r25	; 0x07
  be:	86 83       	std	Z+6, r24	; 0x06
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <__vector_9>:

ISR (TIMER0_OVF_vect) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	if (discharge == 1) {PORTB = 0b00000001; PORTD = digits16[digits[0]];}
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	59 f4       	brne	.+22     	; 0xf4 <__vector_9+0x2e>
  de:	88 bb       	out	0x18, r24	; 24
  e0:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <digits>
  e4:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <digits+0x1>
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ef 59       	subi	r30, 0x9F	; 159
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	82 bb       	out	0x12, r24	; 18
	if (discharge == 2) {PORTB = 0b00000010; PORTD = digits16[digits[1]];}
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	59 f4       	brne	.+22     	; 0x112 <__vector_9+0x4c>
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <digits+0x2>
 102:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <digits+0x3>
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	ef 59       	subi	r30, 0x9F	; 159
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	80 81       	ld	r24, Z
 110:	82 bb       	out	0x12, r24	; 18
	if (discharge == 3) {PORTB = 0b00000100; PORTD = digits16[digits[2]];}
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	61 f4       	brne	.+24     	; 0x132 <__vector_9+0x6c>
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <digits+0x4>
 122:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <digits+0x5>
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ef 59       	subi	r30, 0x9F	; 159
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	82 bb       	out	0x12, r24	; 18
	if (discharge == 4) {PORTB = 0b00001000; PORTD = digits16[digits[3]]; discharge = 0;}
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	84 30       	cpi	r24, 0x04	; 4
 138:	71 f4       	brne	.+28     	; 0x156 <__vector_9+0x90>
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <digits+0x6>
 142:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <digits+0x7>
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ef 59       	subi	r30, 0x9F	; 159
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	80 81       	ld	r24, Z
 150:	82 bb       	out	0x12, r24	; 18
 152:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	discharge++;
 156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_6>:

ISR (TIMER1_COMPA_vect) {
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	num--;
 17e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 182:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 18c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	if (num < 0) {
 190:	99 23       	and	r25, r25
 192:	24 f4       	brge	.+8      	; 0x19c <__vector_6+0x2c>
		num = 0;
 194:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x1>
 198:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
	}
	if (num == 0) {
 19c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 1a0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 1a4:	89 2b       	or	r24, r25
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <__vector_6+0x40>
		PORTC |= (1<<2);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	84 60       	ori	r24, 0x04	; 4
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <__vector_6+0x46>
	} else {
		PORTC &= ~(1<<2);
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	85 bb       	out	0x15, r24	; 21
	}
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:

int main(void)
{
	DDRD = 0b11111111;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00001111;
 1c8:	9f e0       	ldi	r25, 0x0F	; 15
 1ca:	97 bb       	out	0x17, r25	; 23

	DDRC &= ~((1<<3) |(1<<4) | (1<<5)); // button
 1cc:	84 b3       	in	r24, 0x14	; 20
 1ce:	87 7c       	andi	r24, 0xC7	; 199
 1d0:	84 bb       	out	0x14, r24	; 20
	DDRC |= (1<<2); // speaker
 1d2:	84 b3       	in	r24, 0x14	; 20
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	84 bb       	out	0x14, r24	; 20
	
	PORTD = 0b00000000;
 1d8:	12 ba       	out	0x12, r1	; 18
	PORTB = 0b00001111;
 1da:	98 bb       	out	0x18, r25	; 24

	PORTC |= (1<<3) | (1<<4) | (1<<5); // button
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	88 63       	ori	r24, 0x38	; 56
 1e0:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<2); // speaker
 1e2:	85 b3       	in	r24, 0x15	; 21
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	85 bb       	out	0x15, r24	; 21
	

	
	// 1000000/64
	TCCR0 |= (1<<0) | (1<<1);
 1e8:	83 b7       	in	r24, 0x33	; 51
 1ea:	83 60       	ori	r24, 0x03	; 3
 1ec:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<2);
 1ee:	83 b7       	in	r24, 0x33	; 51
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	83 bf       	out	0x33, r24	; 51

	TIMSK |= (1<<0); //Timer/Counter0 Overflow Interrupt Enable
 1f4:	89 b7       	in	r24, 0x39	; 57
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0; // Timer/Counter Register
 1fa:	12 be       	out	0x32, r1	; 50
	sei();  // Status Register / Bit 7 – I: Global Interrupt Enable
 1fc:	78 94       	sei
	
	while (1)
	{
		number(num);
 1fe:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 202:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 206:	3e df       	rcall	.-388    	; 0x84 <number>
		if (~PINC & (1<<4))
 208:	9c 99       	sbic	0x13, 4	; 19
 20a:	1d c0       	rjmp	.+58     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		{
			num++;
 20c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 210:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 21a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	2f e5       	ldi	r18, 0x5F	; 95
 220:	8a ee       	ldi	r24, 0xEA	; 234
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 22e:	00 00       	nop
			_delay_ms(DELAY);
			if (num > 9999) num = 0;
 230:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 234:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 238:	80 31       	cpi	r24, 0x10	; 16
 23a:	97 42       	sbci	r25, 0x27	; 39
 23c:	24 f0       	brlt	.+8      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 23e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x1>
 242:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
		}
		if (~PINC & (1<<5))
 246:	9d 99       	sbic	0x13, 5	; 19
 248:	1e c0       	rjmp	.+60     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
		{
			num--;
 24a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 24e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 258:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 25c:	8f e5       	ldi	r24, 0x5F	; 95
 25e:	9a ee       	ldi	r25, 0xEA	; 234
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	81 50       	subi	r24, 0x01	; 1
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	20 40       	sbci	r18, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 26c:	00 00       	nop
			_delay_ms(DELAY);
			if (num < 0) num = 9999;
 26e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 272:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 276:	99 23       	and	r25, r25
 278:	34 f4       	brge	.+12     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	97 e2       	ldi	r25, 0x27	; 39
 27e:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 282:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
		}
		
		if (~PINC & (1<<3))
 286:	9b 99       	sbic	0x13, 3	; 19
 288:	ba cf       	rjmp	.-140    	; 0x1fe <main+0x3a>
		{
			start();
 28a:	e9 de       	rcall	.-558    	; 0x5e <start>
 28c:	8f e5       	ldi	r24, 0x5F	; 95
 28e:	9a ee       	ldi	r25, 0xEA	; 234
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	81 50       	subi	r24, 0x01	; 1
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 29c:	00 00       	nop
 29e:	af cf       	rjmp	.-162    	; 0x1fe <main+0x3a>

000002a0 <__divmodhi4>:
 2a0:	97 fb       	bst	r25, 7
 2a2:	07 2e       	mov	r0, r23
 2a4:	16 f4       	brtc	.+4      	; 0x2aa <__divmodhi4+0xa>
 2a6:	00 94       	com	r0
 2a8:	06 d0       	rcall	.+12     	; 0x2b6 <__divmodhi4_neg1>
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	08 d0       	rcall	.+16     	; 0x2be <__divmodhi4_neg2>
 2ae:	0b d0       	rcall	.+22     	; 0x2c6 <__udivmodhi4>
 2b0:	07 fc       	sbrc	r0, 7
 2b2:	05 d0       	rcall	.+10     	; 0x2be <__divmodhi4_neg2>
 2b4:	3e f4       	brtc	.+14     	; 0x2c4 <__divmodhi4_exit>

000002b6 <__divmodhi4_neg1>:
 2b6:	90 95       	com	r25
 2b8:	81 95       	neg	r24
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
 2bc:	08 95       	ret

000002be <__divmodhi4_neg2>:
 2be:	70 95       	com	r23
 2c0:	61 95       	neg	r22
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255

000002c4 <__divmodhi4_exit>:
 2c4:	08 95       	ret

000002c6 <__udivmodhi4>:
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	51 e1       	ldi	r21, 0x11	; 17
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__udivmodhi4_ep>

000002ce <__udivmodhi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	a6 17       	cp	r26, r22
 2d4:	b7 07       	cpc	r27, r23
 2d6:	10 f0       	brcs	.+4      	; 0x2dc <__udivmodhi4_ep>
 2d8:	a6 1b       	sub	r26, r22
 2da:	b7 0b       	sbc	r27, r23

000002dc <__udivmodhi4_ep>:
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	5a 95       	dec	r21
 2e2:	a9 f7       	brne	.-22     	; 0x2ce <__udivmodhi4_loop>
 2e4:	80 95       	com	r24
 2e6:	90 95       	com	r25
 2e8:	bc 01       	movw	r22, r24
 2ea:	cd 01       	movw	r24, r26
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
