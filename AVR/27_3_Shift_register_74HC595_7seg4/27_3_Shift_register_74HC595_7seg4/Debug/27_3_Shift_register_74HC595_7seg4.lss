
27_3_Shift_register_74HC595_7seg4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084e  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ea  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027e  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	bb c0       	rjmp	.+374    	; 0x18a <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ee       	ldi	r30, 0xEC	; 236
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 37       	cpi	r26, 0x7E	; 126
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	29 d1       	rcall	.+594    	; 0x2ac <main>
  5a:	46 c1       	rjmp	.+652    	; 0x2e8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <HC595>:
};


void HC595 (uint8_t byte)
{
	for(int i=0; i<8; i++)
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	21 c0       	rjmp	.+66     	; 0xa6 <HC595+0x48>
	{
		if (byte&(1<<i)) PORTD |= (1<<0);
  64:	48 2f       	mov	r20, r24
  66:	50 e0       	ldi	r21, 0x00	; 0
  68:	02 2e       	mov	r0, r18
  6a:	02 c0       	rjmp	.+4      	; 0x70 <HC595+0x12>
  6c:	55 95       	asr	r21
  6e:	47 95       	ror	r20
  70:	0a 94       	dec	r0
  72:	e2 f7       	brpl	.-8      	; 0x6c <HC595+0xe>
  74:	40 ff       	sbrs	r20, 0
  76:	04 c0       	rjmp	.+8      	; 0x80 <HC595+0x22>
  78:	92 b3       	in	r25, 0x12	; 18
  7a:	91 60       	ori	r25, 0x01	; 1
  7c:	92 bb       	out	0x12, r25	; 18
  7e:	03 c0       	rjmp	.+6      	; 0x86 <HC595+0x28>
		else PORTD &= ~(1<<0);
  80:	92 b3       	in	r25, 0x12	; 18
  82:	9e 7f       	andi	r25, 0xFE	; 254
  84:	92 bb       	out	0x12, r25	; 18
		
		PORTD |= (1<<1); // Линия тактирования
  86:	92 b3       	in	r25, 0x12	; 18
  88:	92 60       	ori	r25, 0x02	; 2
  8a:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	93 e0       	ldi	r25, 0x03	; 3
  8e:	9a 95       	dec	r25
  90:	f1 f7       	brne	.-4      	; 0x8e <HC595+0x30>
  92:	00 00       	nop
		_delay_us(10);
		PORTD &= ~(1<<1);
  94:	92 b3       	in	r25, 0x12	; 18
  96:	9d 7f       	andi	r25, 0xFD	; 253
  98:	92 bb       	out	0x12, r25	; 18
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	9a 95       	dec	r25
  9e:	f1 f7       	brne	.-4      	; 0x9c <HC595+0x3e>
  a0:	00 00       	nop
};


void HC595 (uint8_t byte)
{
	for(int i=0; i<8; i++)
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
  a6:	28 30       	cpi	r18, 0x08	; 8
  a8:	31 05       	cpc	r19, r1
  aa:	e4 f2       	brlt	.-72     	; 0x64 <HC595+0x6>
	// 	_delay_us(10);
	// 	PORTD &= ~(1<<2);
	// 	_delay_us(10);
	
	
}
  ac:	08 95       	ret

000000ae <number>:


void number (unsigned int num)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ac 01       	movw	r20, r24
	r1_1000 = num/1000;		// Тысячи
  b4:	ec 01       	movw	r28, r24
  b6:	d6 95       	lsr	r29
  b8:	c7 95       	ror	r28
  ba:	d6 95       	lsr	r29
  bc:	c7 95       	ror	r28
  be:	d6 95       	lsr	r29
  c0:	c7 95       	ror	r28
  c2:	9e 01       	movw	r18, r28
  c4:	a5 ec       	ldi	r26, 0xC5	; 197
  c6:	b0 e2       	ldi	r27, 0x20	; 32
  c8:	03 d1       	rcall	.+518    	; 0x2d0 <__umulhisi3>
  ca:	fc 01       	movw	r30, r24
  cc:	f2 95       	swap	r31
  ce:	e2 95       	swap	r30
  d0:	ef 70       	andi	r30, 0x0F	; 15
  d2:	ef 27       	eor	r30, r31
  d4:	ff 70       	andi	r31, 0x0F	; 15
  d6:	ef 27       	eor	r30, r31
  d8:	f0 93 7d 00 	sts	0x007D, r31	; 0x80007d <r1_1000+0x1>
  dc:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <r1_1000>
	r2_100 = num%1000/100;	// Сотни
  e0:	28 ee       	ldi	r18, 0xE8	; 232
  e2:	33 e0       	ldi	r19, 0x03	; 3
  e4:	e2 9f       	mul	r30, r18
  e6:	c0 01       	movw	r24, r0
  e8:	e3 9f       	mul	r30, r19
  ea:	90 0d       	add	r25, r0
  ec:	f2 9f       	mul	r31, r18
  ee:	90 0d       	add	r25, r0
  f0:	11 24       	eor	r1, r1
  f2:	9a 01       	movw	r18, r20
  f4:	28 1b       	sub	r18, r24
  f6:	39 0b       	sbc	r19, r25
  f8:	36 95       	lsr	r19
  fa:	27 95       	ror	r18
  fc:	36 95       	lsr	r19
  fe:	27 95       	ror	r18
 100:	ab e7       	ldi	r26, 0x7B	; 123
 102:	b4 e1       	ldi	r27, 0x14	; 20
 104:	e5 d0       	rcall	.+458    	; 0x2d0 <__umulhisi3>
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <r2_100+0x1>
 10e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <r2_100>
	r3_10 = num%100/10;		// Десятки
 112:	9a 01       	movw	r18, r20
 114:	36 95       	lsr	r19
 116:	27 95       	ror	r18
 118:	36 95       	lsr	r19
 11a:	27 95       	ror	r18
 11c:	d9 d0       	rcall	.+434    	; 0x2d0 <__umulhisi3>
 11e:	9c 01       	movw	r18, r24
 120:	36 95       	lsr	r19
 122:	27 95       	ror	r18
 124:	64 e6       	ldi	r22, 0x64	; 100
 126:	62 9f       	mul	r22, r18
 128:	c0 01       	movw	r24, r0
 12a:	63 9f       	mul	r22, r19
 12c:	90 0d       	add	r25, r0
 12e:	11 24       	eor	r1, r1
 130:	9a 01       	movw	r18, r20
 132:	28 1b       	sub	r18, r24
 134:	39 0b       	sbc	r19, r25
 136:	ad ec       	ldi	r26, 0xCD	; 205
 138:	bc ec       	ldi	r27, 0xCC	; 204
 13a:	ca d0       	rcall	.+404    	; 0x2d0 <__umulhisi3>
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <r3_10+0x1>
 14c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <r3_10>
	r4_1 = num%10;			// Единицы
 150:	9a 01       	movw	r18, r20
 152:	be d0       	rcall	.+380    	; 0x2d0 <__umulhisi3>
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	9c 01       	movw	r18, r24
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	82 0f       	add	r24, r18
 174:	93 1f       	adc	r25, r19
 176:	9a 01       	movw	r18, r20
 178:	28 1b       	sub	r18, r24
 17a:	39 0b       	sbc	r19, r25
 17c:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <r4_1+0x1>
 180:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <r4_1>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	//reset
	PORTD &= ~(1<<3); 
 1ac:	82 b3       	in	r24, 0x12	; 18
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	82 bb       	out	0x12, r24	; 18
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <__vector_9+0x2a>
 1b8:	00 00       	nop
	_delay_us(10);
	PORTD |= (1<<3);
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <__vector_9+0x38>
 1c6:	00 00       	nop
	_delay_us(10);
	
	
	cnt++;
 1c8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1cc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 1d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	if(cnt>8) cnt=1;
 1da:	09 97       	sbiw	r24, 0x09	; 9
 1dc:	34 f0       	brlt	.+12     	; 0x1ea <__vector_9+0x60>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 1e6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	if (cnt==2)
 1ea:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1ee:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	91 05       	cpc	r25, r1
 1f6:	69 f4       	brne	.+26     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
	{
		HC595(0b11111110); // Включаем первый разряд
 1f8:	8e ef       	ldi	r24, 0xFE	; 254
 1fa:	31 df       	rcall	.-414    	; 0x5e <HC595>
		HC595(digits [r1_1000]); // Отображаем тысячи
 1fc:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <r1_1000>
 200:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <r1_1000+0x1>
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e0 5a       	subi	r30, 0xA0	; 160
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 81       	ld	r24, Z
 20e:	27 df       	rcall	.-434    	; 0x5e <HC595>
 210:	2e c0       	rjmp	.+92     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
		
	}
	else if (cnt==4)
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	91 05       	cpc	r25, r1
 216:	69 f4       	brne	.+26     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
	{
		HC595(0b11111101); // Включаем второй разряд
 218:	8d ef       	ldi	r24, 0xFD	; 253
 21a:	21 df       	rcall	.-446    	; 0x5e <HC595>
		HC595(digits [r2_100]); // Отображаем сотни
 21c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <r2_100>
 220:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <r2_100+0x1>
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	e0 5a       	subi	r30, 0xA0	; 160
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	80 81       	ld	r24, Z
 22e:	17 df       	rcall	.-466    	; 0x5e <HC595>
 230:	1e c0       	rjmp	.+60     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
	}
	else if (cnt==6)
 232:	86 30       	cpi	r24, 0x06	; 6
 234:	91 05       	cpc	r25, r1
 236:	69 f4       	brne	.+26     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
	{
		HC595(0b11111011); // Включаем третий разряд
 238:	8b ef       	ldi	r24, 0xFB	; 251
 23a:	11 df       	rcall	.-478    	; 0x5e <HC595>
		HC595(digits [r3_10]); // Отображаем десятки
 23c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <r3_10>
 240:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <r3_10+0x1>
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e0 5a       	subi	r30, 0xA0	; 160
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	80 81       	ld	r24, Z
 24e:	07 df       	rcall	.-498    	; 0x5e <HC595>
 250:	0e c0       	rjmp	.+28     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
	}
	else if (cnt==8)
 252:	08 97       	sbiw	r24, 0x08	; 8
 254:	61 f4       	brne	.+24     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		HC595(0b11110111); // Включаем четвертый разряд
 256:	87 ef       	ldi	r24, 0xF7	; 247
 258:	02 df       	rcall	.-508    	; 0x5e <HC595>
		HC595(digits [r4_1]); // Отображаем единицы
 25a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <r4_1>
 25e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <r4_1+0x1>
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	e0 5a       	subi	r30, 0xA0	; 160
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	80 81       	ld	r24, Z
 26c:	f8 de       	rcall	.-528    	; 0x5e <HC595>
	}
	
	
	PORTD |= (1<<2); // Линия защелки
 26e:	82 b3       	in	r24, 0x12	; 18
 270:	84 60       	ori	r24, 0x04	; 4
 272:	82 bb       	out	0x12, r24	; 18
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
 27a:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1<<2);
 27c:	82 b3       	in	r24, 0x12	; 18
 27e:	8b 7f       	andi	r24, 0xFB	; 251
 280:	82 bb       	out	0x12, r24	; 18
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
 288:	00 00       	nop
	_delay_us(10);
	
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <main>:



int main(void)
{
	DDRD = 0xff;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1<<2) | (1<<1) | (1<<0));
 2b0:	82 b3       	in	r24, 0x12	; 18
 2b2:	88 7f       	andi	r24, 0xF8	; 248
 2b4:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<3); // Reset
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	88 60       	ori	r24, 0x08	; 8
 2ba:	82 bb       	out	0x12, r24	; 18
	
	TCCR0 = 0b00000010;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 2c0:	89 b7       	in	r24, 0x39	; 57
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	89 bf       	out	0x39, r24	; 57
	sei();
 2c6:	78 94       	sei

	while (1)
	{
		number(3857);
 2c8:	81 e1       	ldi	r24, 0x11	; 17
 2ca:	9f e0       	ldi	r25, 0x0F	; 15
 2cc:	f0 de       	rcall	.-544    	; 0xae <number>
 2ce:	fc cf       	rjmp	.-8      	; 0x2c8 <main+0x1c>

000002d0 <__umulhisi3>:
 2d0:	a2 9f       	mul	r26, r18
 2d2:	b0 01       	movw	r22, r0
 2d4:	b3 9f       	mul	r27, r19
 2d6:	c0 01       	movw	r24, r0
 2d8:	a3 9f       	mul	r26, r19
 2da:	01 d0       	rcall	.+2      	; 0x2de <__umulhisi3+0xe>
 2dc:	b2 9f       	mul	r27, r18
 2de:	70 0d       	add	r23, r0
 2e0:	81 1d       	adc	r24, r1
 2e2:	11 24       	eor	r1, r1
 2e4:	91 1d       	adc	r25, r1
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
