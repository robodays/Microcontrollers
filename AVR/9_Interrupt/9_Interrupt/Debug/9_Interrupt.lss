
9_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c0  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056a  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f8  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f0  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1a c0       	rjmp	.+52     	; 0x38 <__vector_1>
   4:	38 c0       	rjmp	.+112    	; 0x76 <__vector_2>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	40 d0       	rcall	.+128    	; 0xb4 <main>
  34:	87 c0       	rjmp	.+270    	; 0x144 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_1>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(INT0_vect) {
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1
  42:	2f 93       	push	r18
  44:	8f 93       	push	r24
  46:	9f 93       	push	r25
	PORTD |=(1<<0);
  48:	82 b3       	in	r24, 0x12	; 18
  4a:	81 60       	ori	r24, 0x01	; 1
  4c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	2f e3       	ldi	r18, 0x3F	; 63
  50:	8d e0       	ldi	r24, 0x0D	; 13
  52:	93 e0       	ldi	r25, 0x03	; 3
  54:	21 50       	subi	r18, 0x01	; 1
  56:	80 40       	sbci	r24, 0x00	; 0
  58:	90 40       	sbci	r25, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <__SREG__+0x15>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__SREG__+0x1f>
  5e:	00 00       	nop
	_delay_ms(1000);
	PORTD &=~(1<<0);
  60:	82 b3       	in	r24, 0x12	; 18
  62:	8e 7f       	andi	r24, 0xFE	; 254
  64:	82 bb       	out	0x12, r24	; 18
	
}
  66:	9f 91       	pop	r25
  68:	8f 91       	pop	r24
  6a:	2f 91       	pop	r18
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  74:	18 95       	reti

00000076 <__vector_2>:

ISR(INT1_vect) {
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	2f 93       	push	r18
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
	PORTD |=(1<<0);
  86:	82 b3       	in	r24, 0x12	; 18
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	2f e3       	ldi	r18, 0x3F	; 63
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	93 e0       	ldi	r25, 0x03	; 3
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <__vector_2+0x1c>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <__vector_2+0x26>
  9c:	00 00       	nop
	_delay_ms(1000);
	PORTD &=~(1<<0);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	82 bb       	out	0x12, r24	; 18
	
}
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	2f 91       	pop	r18
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <main>:

int main(void)
{
	GICR = 0b11000000; // External Interrupt Request 0 AND External Interrupt Request 1
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0b00001110; // The falling edge of INT0 generates an interrupt request AND The rising edge of INT1 generates an interrupt request
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	85 bf       	out	0x35, r24	; 53
	SREG |= (1<<7); // Status Register -> Bit 7 – I: Global Interrupt Enable
  bc:	8f b7       	in	r24, 0x3f	; 63
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8f bf       	out	0x3f, r24	; 63
	// or
	//sei();
	
	DDRC = 0b0111111;
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b0000000; // 6 LED
  c6:	15 ba       	out	0x15, r1	; 21
	
	DDRD = 0b00000001;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b10000100; // One LED and Button
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	82 bb       	out	0x12, r24	; 18
    while (1) 
    {
		for(int i = 0; i < 6; i++) {
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	16 c0       	rjmp	.+44     	; 0x102 <main+0x4e>
			PORTC |= (1<<i);
  d6:	45 b3       	in	r20, 0x15	; 21
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 2e       	mov	r0, r18
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x30>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x2c>
  e8:	84 2b       	or	r24, r20
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	4f e5       	ldi	r20, 0x5F	; 95
  ee:	8a ee       	ldi	r24, 0xEA	; 234
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x3e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x48>
  fc:	00 00       	nop
	
	DDRD = 0b00000001;
	PORTD = 0b10000100; // One LED and Button
    while (1) 
    {
		for(int i = 0; i < 6; i++) {
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	26 30       	cpi	r18, 0x06	; 6
 104:	31 05       	cpc	r19, r1
 106:	3c f3       	brlt	.-50     	; 0xd6 <main+0x22>
			PORTC |= (1<<i);
			_delay_ms(300);
		}
		
		// if Button push -> on LED
		if (~PIND & (1<<7)) {
 108:	87 99       	sbic	0x10, 7	; 16
 10a:	0c c0       	rjmp	.+24     	; 0x124 <main+0x70>
			PORTD |=(1<<0);
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	82 bb       	out	0x12, r24	; 18
 112:	2f e3       	ldi	r18, 0x3F	; 63
 114:	4d e0       	ldi	r20, 0x0D	; 13
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	40 40       	sbci	r20, 0x00	; 0
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x64>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x6e>
 122:	00 00       	nop
			_delay_ms(1000);
		}
		// if on LED -> off
		if (PIND & (1<<0)) {
 124:	80 9b       	sbis	0x10, 0	; 16
 126:	03 c0       	rjmp	.+6      	; 0x12e <main+0x7a>
			PORTD &=~(1<<0);
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	82 bb       	out	0x12, r24	; 18
		}

		PORTC = 0b0000000;
 12e:	15 ba       	out	0x15, r1	; 21
 130:	9f e5       	ldi	r25, 0x5F	; 95
 132:	2a ee       	ldi	r18, 0xEA	; 234
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	91 50       	subi	r25, 0x01	; 1
 138:	20 40       	sbci	r18, 0x00	; 0
 13a:	40 40       	sbci	r20, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x82>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x8c>
 140:	00 00       	nop
 142:	c6 cf       	rjmp	.-116    	; 0xd0 <main+0x1c>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
