
21_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000680  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000532  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cd  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ef       	ldi	r30, 0xF2	; 242
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	10 d0       	rcall	.+32     	; 0x6a <main>
  4a:	51 c0       	rjmp	.+162    	; 0xee <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <UART_settings>:

// Baud Rate Registers
void UART_settings (unsigned int ubrr) {
	
	// Baud Rate Registers
	UBRRH = (unsigned char) (ubrr >> 8);
  4e:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) (ubrr);
  50:	89 b9       	out	0x09, r24	; 9
	
	// Bit 1 – U2X: Double the USART transmission speed
	UCSRA |= (1<<U2X);
  52:	8b b1       	in	r24, 0x0b	; 11
  54:	82 60       	ori	r24, 0x02	; 2
  56:	8b b9       	out	0x0b, r24	; 11
	
	//Bit 4 – RXEN: Receiver Enable
	//Bit 3 – TXEN: Transmitter Enable
	UCSRB = (1<<RXEN) | (1<<TXEN);
  58:	88 e1       	ldi	r24, 0x18	; 24
  5a:	8a b9       	out	0x0a, r24	; 10
	
	//Bit 7 – URSEL: Register Select
	//Bit 3 – USBS: Stop Bit Select -> 2bits
	//Bit 2:1 – UCSZ1:0: Character Size -> 8bits
	UCSRC = (1<<URSEL) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0);
  5c:	8e e8       	ldi	r24, 0x8E	; 142
  5e:	80 bd       	out	0x20, r24	; 32
  60:	08 95       	ret

00000062 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	// Bit 5 – UDRE: USART Data Register Empty
	// If UDRE is one, the buffer is empty, and therefore ready to be written.
	while ( !( UCSRA & (1<<UDRE)) )
  62:	5d 9b       	sbis	0x0b, 5	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  66:	8c b9       	out	0x0c, r24	; 12
  68:	08 95       	ret

0000006a <main>:
}

int main(void)
{
  6a:	cf 93       	push	r28
  6c:	df 93       	push	r29
  6e:	cd b7       	in	r28, 0x3d	; 61
  70:	de b7       	in	r29, 0x3e	; 62
  72:	2c 97       	sbiw	r28, 0x0c	; 12
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	f8 94       	cli
  78:	de bf       	out	0x3e, r29	; 62
  7a:	0f be       	out	0x3f, r0	; 63
  7c:	cd bf       	out	0x3d, r28	; 61
	UART_settings(12); // data transfer rate 9600, by Fmc = 1000000 Hz, U2X = 1
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	e5 df       	rcall	.-54     	; 0x4e <UART_settings>

	USART_Transmit('T');
  84:	84 e5       	ldi	r24, 0x54	; 84
  86:	ed df       	rcall	.-38     	; 0x62 <USART_Transmit>
	USART_Transmit('e');
  88:	85 e6       	ldi	r24, 0x65	; 101
  8a:	eb df       	rcall	.-42     	; 0x62 <USART_Transmit>
	USART_Transmit('s');
  8c:	83 e7       	ldi	r24, 0x73	; 115
  8e:	e9 df       	rcall	.-46     	; 0x62 <USART_Transmit>
	USART_Transmit('t');
  90:	84 e7       	ldi	r24, 0x74	; 116
  92:	e7 df       	rcall	.-50     	; 0x62 <USART_Transmit>
	USART_Transmit('\r');
  94:	8d e0       	ldi	r24, 0x0D	; 13
  96:	e5 df       	rcall	.-54     	; 0x62 <USART_Transmit>
	USART_Transmit('Ò');
  98:	82 ed       	ldi	r24, 0xD2	; 210
  9a:	e3 df       	rcall	.-58     	; 0x62 <USART_Transmit>
	USART_Transmit('å');
  9c:	85 ee       	ldi	r24, 0xE5	; 229
  9e:	e1 df       	rcall	.-62     	; 0x62 <USART_Transmit>
	USART_Transmit('ñ');
  a0:	81 ef       	ldi	r24, 0xF1	; 241
  a2:	df df       	rcall	.-66     	; 0x62 <USART_Transmit>
	USART_Transmit('ò');
  a4:	82 ef       	ldi	r24, 0xF2	; 242
  a6:	dd df       	rcall	.-70     	; 0x62 <USART_Transmit>
	
	USART_Transmit('\r');
  a8:	8d e0       	ldi	r24, 0x0D	; 13
  aa:	db df       	rcall	.-74     	; 0x62 <USART_Transmit>
	
	char str[] = "Hello World";
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4c>
	uint8_t iStr = 0; 
  be:	20 e0       	ldi	r18, 0x00	; 0
	
    while (1) 
    {
		if (UCSRA & (1<<UDRE) && (iStr < strlen(str)))
  c0:	5d 9b       	sbis	0x0b, 5	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x56>
  c4:	82 2f       	mov	r24, r18
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	de 01       	movw	r26, r28
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	fd 01       	movw	r30, r26
  ce:	01 90       	ld	r0, Z+
  d0:	00 20       	and	r0, r0
  d2:	e9 f7       	brne	.-6      	; 0xce <main+0x64>
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	ea 1b       	sub	r30, r26
  d8:	fb 0b       	sbc	r31, r27
  da:	8e 17       	cp	r24, r30
  dc:	9f 07       	cpc	r25, r31
  de:	80 f7       	brcc	.-32     	; 0xc0 <main+0x56>
		{
			UDR = str[iStr];
  e0:	fd 01       	movw	r30, r26
  e2:	e2 0f       	add	r30, r18
  e4:	f1 1d       	adc	r31, r1
  e6:	80 81       	ld	r24, Z
  e8:	8c b9       	out	0x0c, r24	; 12
			iStr++;
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	e9 cf       	rjmp	.-46     	; 0xc0 <main+0x56>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
