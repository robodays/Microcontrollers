
14_Analog-to-digital_converter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051f  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000239  00000000  00000000  00000b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cf  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	51 c0       	rjmp	.+162    	; 0xd8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main(void)
{
	//LED
	DDRB |= (1<<2) | (1<<1) | (1<<0);
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	87 60       	ori	r24, 0x07	; 7
  3c:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<2) | (1<<1) | (1<<0));
  3e:	88 b3       	in	r24, 0x18	; 24
  40:	88 7f       	andi	r24, 0xF8	; 248
  42:	88 bb       	out	0x18, r24	; 24
	
	// potentiometer
	DDRC &= ~(1<<1);
  44:	84 b3       	in	r24, 0x14	; 20
  46:	8d 7f       	andi	r24, 0xFD	; 253
  48:	84 bb       	out	0x14, r24	; 20
	
	ADCSRA |= (1<<ADEN); // Bit 7 – ADEN: ADC Enable
  4a:	86 b1       	in	r24, 0x06	; 6
  4c:	80 68       	ori	r24, 0x80	; 128
  4e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADFR); // Bit 5 – ADFR: ADC Free Running Select
  50:	86 b1       	in	r24, 0x06	; 6
  52:	80 62       	ori	r24, 0x20	; 32
  54:	86 b9       	out	0x06, r24	; 6
	
	//Bits 2:0 – ADPS2:0: ADC Prescaler Select Bits
	//These bits determine the division factor between the XTAL frequency and the input clock to the ADC.
	//125kHz
	ADCSRA &= ~(1<<ADPS2);
  56:	86 b1       	in	r24, 0x06	; 6
  58:	8b 7f       	andi	r24, 0xFB	; 251
  5a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);
  5c:	86 b1       	in	r24, 0x06	; 6
  5e:	83 60       	ori	r24, 0x03	; 3
  60:	86 b9       	out	0x06, r24	; 6
	
	//Bit 7:6 – REFS1:0: Reference Selection Bits
	//These bits select the voltage reference for the ADC 
	//Internal 2.56V Voltage Reference with external capacitor at AREF pin
	ADMUX |= (1<<REFS1) | (1<<REFS0);
  62:	87 b1       	in	r24, 0x07	; 7
  64:	80 6c       	ori	r24, 0xC0	; 192
  66:	87 b9       	out	0x07, r24	; 7
	
	// Bit 5 – ADLAR: ADC Left/Right Adjust Result
	ADMUX &= ~(1<<ADLAR); // 0 -> Right
  68:	87 b1       	in	r24, 0x07	; 7
  6a:	8f 7d       	andi	r24, 0xDF	; 223
  6c:	87 b9       	out	0x07, r24	; 7
	
	//Bits 3:0 – MUX3:0: Analog Channel Selection Bits
	//ADC1(POTR PC1)
	ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1));
  6e:	87 b1       	in	r24, 0x07	; 7
  70:	81 7f       	andi	r24, 0xF1	; 241
  72:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX0);
  74:	87 b1       	in	r24, 0x07	; 7
  76:	81 60       	ori	r24, 0x01	; 1
  78:	87 b9       	out	0x07, r24	; 7
	
	//Bit 6 – ADSC: ADC Start Conversion
	ADCSRA |= (1<<ADSC);
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	86 b9       	out	0x06, r24	; 6
	
	
    while (1) 
    {
		//Bit 4 – ADIF: ADC Interrupt Flag
		if (ADCSRA & (1<<ADIF)) {
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <__SREG__+0x41>
			if (ADC >= 600) { // >= 1.5V
  84:	84 b1       	in	r24, 0x04	; 4
  86:	95 b1       	in	r25, 0x05	; 5
  88:	88 35       	cpi	r24, 0x58	; 88
  8a:	92 40       	sbci	r25, 0x02	; 2
  8c:	30 f0       	brcs	.+12     	; 0x9a <__SREG__+0x5b>
				PORTB |= (1<<0); // Green on
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	81 60       	ori	r24, 0x01	; 1
  92:	88 bb       	out	0x18, r24	; 24
				PORTB &= ~((1<<1) | (1<<2)); // Yellow and Red off
  94:	88 b3       	in	r24, 0x18	; 24
  96:	89 7f       	andi	r24, 0xF9	; 249
  98:	88 bb       	out	0x18, r24	; 24
			}
			if (ADC >= 560 && ADC < 600) { // >= 1.4V and < 1.5V
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	80 33       	cpi	r24, 0x30	; 48
  a0:	92 40       	sbci	r25, 0x02	; 2
  a2:	58 f0       	brcs	.+22     	; 0xba <__SREG__+0x7b>
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	88 35       	cpi	r24, 0x58	; 88
  aa:	92 40       	sbci	r25, 0x02	; 2
  ac:	30 f4       	brcc	.+12     	; 0xba <__SREG__+0x7b>
				PORTB |= (1<<1); // Yellow on
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	88 bb       	out	0x18, r24	; 24
				PORTB &= ~((1<<0) | (1<<2)); // Green and Red off
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	8a 7f       	andi	r24, 0xFA	; 250
  b8:	88 bb       	out	0x18, r24	; 24
			}
			
			if (ADC < 560) { // < 1.4V
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	80 33       	cpi	r24, 0x30	; 48
  c0:	92 40       	sbci	r25, 0x02	; 2
  c2:	30 f4       	brcc	.+12     	; 0xd0 <__SREG__+0x91>
				PORTB |= (1<<2); // Red on
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	88 bb       	out	0x18, r24	; 24
				PORTB &= ~((1<<0) | (1<<1)); // Green and Yellow off
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	8c 7f       	andi	r24, 0xFC	; 252
  ce:	88 bb       	out	0x18, r24	; 24
			}
			
			ADCSRA |= (1<<ADIF);
  d0:	86 b1       	in	r24, 0x06	; 6
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	86 b9       	out	0x06, r24	; 6
  d6:	d4 cf       	rjmp	.-88     	; 0x80 <__SREG__+0x41>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
