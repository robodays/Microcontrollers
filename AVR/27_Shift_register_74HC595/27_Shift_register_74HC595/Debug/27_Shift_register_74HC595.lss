
27_Shift_register_74HC595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000824  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b8  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039d  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022f  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	38 d0       	rcall	.+112    	; 0xa4 <main>
  34:	97 c0       	rjmp	.+302    	; 0x164 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <HC595>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void HC595 (uint8_t byte) {
	for (int i = 0; i < 8; i++) {
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	21 c0       	rjmp	.+66     	; 0x80 <__SREG__+0x41>
		if (byte&(1<<i)) { // >0
  3e:	48 2f       	mov	r20, r24
  40:	50 e0       	ldi	r21, 0x00	; 0
  42:	02 2e       	mov	r0, r18
  44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
  46:	55 95       	asr	r21
  48:	47 95       	ror	r20
  4a:	0a 94       	dec	r0
  4c:	e2 f7       	brpl	.-8      	; 0x46 <__SREG__+0x7>
  4e:	40 ff       	sbrs	r20, 0
  50:	04 c0       	rjmp	.+8      	; 0x5a <__SREG__+0x1b>
			PORTD |= (1<<0);
  52:	92 b3       	in	r25, 0x12	; 18
  54:	91 60       	ori	r25, 0x01	; 1
  56:	92 bb       	out	0x12, r25	; 18
  58:	03 c0       	rjmp	.+6      	; 0x60 <__SREG__+0x21>
			} else {
			PORTD &= ~(1<<0);
  5a:	92 b3       	in	r25, 0x12	; 18
  5c:	9e 7f       	andi	r25, 0xFE	; 254
  5e:	92 bb       	out	0x12, r25	; 18
		}
		PORTD |= (1<<1); // линия тактирования 
  60:	92 b3       	in	r25, 0x12	; 18
  62:	92 60       	ori	r25, 0x02	; 2
  64:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	93 e0       	ldi	r25, 0x03	; 3
  68:	9a 95       	dec	r25
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
  6c:	00 00       	nop
		_delay_us(10);
		PORTD &= ~(1<<1);
  6e:	92 b3       	in	r25, 0x12	; 18
  70:	9d 7f       	andi	r25, 0xFD	; 253
  72:	92 bb       	out	0x12, r25	; 18
  74:	93 e0       	ldi	r25, 0x03	; 3
  76:	9a 95       	dec	r25
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
  7a:	00 00       	nop
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void HC595 (uint8_t byte) {
	for (int i = 0; i < 8; i++) {
  7c:	2f 5f       	subi	r18, 0xFF	; 255
  7e:	3f 4f       	sbci	r19, 0xFF	; 255
  80:	28 30       	cpi	r18, 0x08	; 8
  82:	31 05       	cpc	r19, r1
  84:	e4 f2       	brlt	.-72     	; 0x3e <__SP_H__>
		PORTD |= (1<<1); // линия тактирования 
		_delay_us(10);
		PORTD &= ~(1<<1);
		_delay_us(10);
	}
	PORTD |= (1<<2); // линия защелки
  86:	82 b3       	in	r24, 0x12	; 18
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <__SREG__+0x4f>
  92:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1<<2);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	82 bb       	out	0x12, r24	; 18
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	9a 95       	dec	r25
  9e:	f1 f7       	brne	.-4      	; 0x9c <__SREG__+0x5d>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <main>:

}

int main(void)
{
	DDRD = 0xff;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1<<2) | (1<<1) | (1<<0));
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<3); //reset
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	82 bb       	out	0x12, r24	; 18
//			//HC595 (1<<i);
//			HC595 (byte);
//			_delay_ms(300);
//		}

		for (uint8_t i = 0; i < 8; i++)
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	17 c0       	rjmp	.+46     	; 0xe6 <main+0x42>
		{
			HC595(1<<i);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0c 2e       	mov	r0, r28
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x1c>
  be:	88 0f       	add	r24, r24
  c0:	0a 94       	dec	r0
  c2:	ea f7       	brpl	.-6      	; 0xbe <main+0x1a>
  c4:	b9 df       	rcall	.-142    	; 0x38 <HC595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e5       	ldi	r18, 0x5F	; 95
  c8:	8a ee       	ldi	r24, 0xEA	; 234
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x28>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x32>
  d6:	00 00       	nop
			_delay_ms(300);
			
			PORTD &= ~(1<<3);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	82 bb       	out	0x12, r24	; 18
			//_delay_us(10);
			PORTD |= (1<<3);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	82 bb       	out	0x12, r24	; 18
//			//HC595 (1<<i);
//			HC595 (byte);
//			_delay_ms(300);
//		}

		for (uint8_t i = 0; i < 8; i++)
  e4:	cf 5f       	subi	r28, 0xFF	; 255
  e6:	c8 30       	cpi	r28, 0x08	; 8
  e8:	38 f3       	brcs	.-50     	; 0xb8 <main+0x14>
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	19 c0       	rjmp	.+50     	; 0x120 <main+0x7c>
		}
		
		
		for (uint8_t i = 0; i < 8; i++)
		{
			HC595(1<<i);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0c 2e       	mov	r0, r28
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <main+0x52>
  f4:	88 0f       	add	r24, r24
  f6:	0a 94       	dec	r0
  f8:	ea f7       	brpl	.-6      	; 0xf4 <main+0x50>
  fa:	9e df       	rcall	.-196    	; 0x38 <HC595>
			HC595(0);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	9c df       	rcall	.-200    	; 0x38 <HC595>
 100:	2f e5       	ldi	r18, 0x5F	; 95
 102:	8a ee       	ldi	r24, 0xEA	; 234
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x62>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x6c>
 110:	00 00       	nop
			_delay_ms(300);
			
			PORTD &= ~(1<<3);
 112:	82 b3       	in	r24, 0x12	; 18
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	82 bb       	out	0x12, r24	; 18
			//_delay_us(10);
			PORTD |= (1<<3);
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	82 bb       	out	0x12, r24	; 18
			PORTD |= (1<<3);
			
		}
		
		
		for (uint8_t i = 0; i < 8; i++)
 11e:	cf 5f       	subi	r28, 0xFF	; 255
 120:	c8 30       	cpi	r28, 0x08	; 8
 122:	28 f3       	brcs	.-54     	; 0xee <main+0x4a>
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	1b c0       	rjmp	.+54     	; 0x15e <main+0xba>
		}
		
		
		for (uint8_t i = 0;  i < 8; i++)
		{
			HC595(1<<i);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0c 2e       	mov	r0, r28
 12c:	01 c0       	rjmp	.+2      	; 0x130 <main+0x8c>
 12e:	88 0f       	add	r24, r24
 130:	0a 94       	dec	r0
 132:	ea f7       	brpl	.-6      	; 0x12e <main+0x8a>
 134:	81 df       	rcall	.-254    	; 0x38 <HC595>
			HC595(0b00000000);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	7f df       	rcall	.-258    	; 0x38 <HC595>
			HC595(0b00000000);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	7d df       	rcall	.-262    	; 0x38 <HC595>
 13e:	2f e5       	ldi	r18, 0x5F	; 95
 140:	8a ee       	ldi	r24, 0xEA	; 234
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xa0>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xaa>
 14e:	00 00       	nop
			_delay_ms(300);
			
			PORTD &= ~(1<<3);
 150:	82 b3       	in	r24, 0x12	; 18
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	82 bb       	out	0x12, r24	; 18
			//_delay_us(10);
			PORTD |= (1<<3);
 156:	82 b3       	in	r24, 0x12	; 18
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	82 bb       	out	0x12, r24	; 18
			PORTD |= (1<<3);
			
		}
		
		
		for (uint8_t i = 0;  i < 8; i++)
 15c:	cf 5f       	subi	r28, 0xFF	; 255
 15e:	c8 30       	cpi	r28, 0x08	; 8
 160:	18 f3       	brcs	.-58     	; 0x128 <main+0x84>
 162:	a8 cf       	rjmp	.-176    	; 0xb4 <main+0x10>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
