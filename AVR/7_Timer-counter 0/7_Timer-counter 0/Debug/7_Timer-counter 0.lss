
7_Timer-counter 0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000522  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b3  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fd  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	23 c0       	rjmp	.+70     	; 0x7c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main(void)
{
	
	DDRD = 0b11111111;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	
	PORTD = 0b00000000;
  3c:	12 ba       	out	0x12, r1	; 18
	
	TCCR0 = 0b00000101; // initialization Timer/Counter Control Register – TCCR0 clkI/O/1024 (From prescaler) // T = 1024/1000000 = 0,001024 sec
  3e:	85 e0       	ldi	r24, 0x05	; 5
  40:	83 bf       	out	0x33, r24	; 51
	// clkI/O/256 (From prescaler)
	//TCCR0 |= (1<<2);
	//TCCR0 &= ~((1<<0) | (1<<1));
	
	
	TCNT0 = 0; // Timer/Counter Register – TCNT0 8bit (max255)  1Bt = 0,001024 * 256 = 0,262144 sec
  42:	12 be       	out	0x32, r1	; 50
	
	int d = 0;
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	02 c0       	rjmp	.+4      	; 0x4e <__SREG__+0xf>
			//PORTD = 0b01010100;

			PORTD &= ~(1<<0);
		}
		if (d >= 40) {
			d = 0;
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
	TCNT0 = 0; // Timer/Counter Register – TCNT0 8bit (max255)  1Bt = 0,001024 * 256 = 0,262144 sec
	
	int d = 0;
    while (1) 
    {
		if (TCNT0 == 128)
  4e:	22 b7       	in	r18, 0x32	; 50
		{
			//PORTD = 0b10101000;
		}
		
		if (TCNT0 == 255)
  50:	22 b7       	in	r18, 0x32	; 50
  52:	2f 3f       	cpi	r18, 0xFF	; 255
  54:	11 f4       	brne	.+4      	; 0x5a <__SREG__+0x1b>
		{
			//PORTD = 0b01010100;
			d++;
  56:	01 96       	adiw	r24, 0x01	; 1
			TCNT0 = 0;
  58:	12 be       	out	0x32, r1	; 50
		}
		
		if (d < 20)
  5a:	84 31       	cpi	r24, 0x14	; 20
  5c:	91 05       	cpc	r25, r1
  5e:	24 f4       	brge	.+8      	; 0x68 <__SREG__+0x29>
		{
			//PORTD = 0b10101000;
			
			PORTD |= (1<<0);
  60:	22 b3       	in	r18, 0x12	; 18
  62:	21 60       	ori	r18, 0x01	; 1
  64:	22 bb       	out	0x12, r18	; 18
  66:	06 c0       	rjmp	.+12     	; 0x74 <__SREG__+0x35>
		} else
		if (d > 20) {
  68:	85 31       	cpi	r24, 0x15	; 21
  6a:	91 05       	cpc	r25, r1
  6c:	1c f0       	brlt	.+6      	; 0x74 <__SREG__+0x35>
			//PORTD = 0b01010100;

			PORTD &= ~(1<<0);
  6e:	22 b3       	in	r18, 0x12	; 18
  70:	2e 7f       	andi	r18, 0xFE	; 254
  72:	22 bb       	out	0x12, r18	; 18
		}
		if (d >= 40) {
  74:	88 32       	cpi	r24, 0x28	; 40
  76:	91 05       	cpc	r25, r1
  78:	44 f7       	brge	.-48     	; 0x4a <__SREG__+0xb>
  7a:	e9 cf       	rjmp	.-46     	; 0x4e <__SREG__+0xf>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
