
29_SPI_MAX6675_converter_and_thermocouple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000054c  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800074  00800074  000005f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067d  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000554  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035f  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000371  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ba  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e4       	ldi	r30, 0x4C	; 76
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 38       	cpi	r26, 0x86	; 134
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	0d d1       	rcall	.+538    	; 0x274 <main>
  5a:	76 c2       	rjmp	.+1260   	; 0x548 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_9>:
	0b01101111 //9
};


ISR(TIMER0_OVF_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	ef 93       	push	r30
  6e:	ff 93       	push	r31
	if (cnt==1)
  70:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <cnt>
  74:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <cnt+0x1>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	91 05       	cpc	r25, r1
  7c:	89 f4       	brne	.+34     	; 0xa0 <__vector_9+0x42>
	{
		PORTC |= (1<<3) | (1<<2) | (1<<1);
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	8e 60       	ori	r24, 0x0E	; 14
  82:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<0);
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r1_1000]; // Сотни
  8a:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <r1_1000>
  8e:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <r1_1000+0x1>
  92:	ee 0f       	add	r30, r30
  94:	ff 1f       	adc	r31, r31
  96:	e0 5a       	subi	r30, 0xA0	; 160
  98:	ff 4f       	sbci	r31, 0xFF	; 255
  9a:	80 81       	ld	r24, Z
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	3a c0       	rjmp	.+116    	; 0x114 <__vector_9+0xb6>
	}
	else if (cnt==2)
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	91 05       	cpc	r25, r1
  a4:	89 f4       	brne	.+34     	; 0xc8 <__vector_9+0x6a>
	{
		PORTC |= (1<<3) | (1<<2) | (1<<0);
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	8d 60       	ori	r24, 0x0D	; 13
  aa:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<1);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r2_100]; // Десятки
  b2:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <r2_100>
  b6:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <r2_100+0x1>
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	e0 5a       	subi	r30, 0xA0	; 160
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	80 81       	ld	r24, Z
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	26 c0       	rjmp	.+76     	; 0x114 <__vector_9+0xb6>
	}
	else if (cnt==3)
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	91 05       	cpc	r25, r1
  cc:	89 f4       	brne	.+34     	; 0xf0 <__vector_9+0x92>
	{
		PORTC |= (1<<3) | (1<<1) | (1<<0);
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	8b 60       	ori	r24, 0x0B	; 11
  d2:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<2);
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r3_10]; // Единици
  da:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <r3_10>
  de:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <r3_10+0x1>
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	e0 5a       	subi	r30, 0xA0	; 160
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 81       	ld	r24, Z
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	12 c0       	rjmp	.+36     	; 0x114 <__vector_9+0xb6>
	}
	else if (cnt==4)
  f0:	04 97       	sbiw	r24, 0x04	; 4
  f2:	81 f4       	brne	.+32     	; 0x114 <__vector_9+0xb6>
	{
		PORTC |= (1<<2) | (1<<1) | (1<<0);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<3);
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	85 bb       	out	0x15, r24	; 21
		PORTD = digits [r4_1]; // Единици
 100:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <r4_1>
 104:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <r4_1+0x1>
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	e0 5a       	subi	r30, 0xA0	; 160
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	82 bb       	out	0x12, r24	; 18
	}
	
	cnt++;
 114:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <cnt>
 118:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <cnt+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <cnt+0x1>
 122:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <cnt>
	
	if (cnt>4) cnt=1;
 126:	05 97       	sbiw	r24, 0x05	; 5
 128:	34 f0       	brlt	.+12     	; 0x136 <__vector_9+0xd8>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <cnt+0x1>
 132:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <cnt>
	
	
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <number>:

void number(unsigned int num)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ac 01       	movw	r20, r24
	r1_1000 = num/1000; // Тысячи
 14e:	ec 01       	movw	r28, r24
 150:	d6 95       	lsr	r29
 152:	c7 95       	ror	r28
 154:	d6 95       	lsr	r29
 156:	c7 95       	ror	r28
 158:	d6 95       	lsr	r29
 15a:	c7 95       	ror	r28
 15c:	9e 01       	movw	r18, r28
 15e:	a5 ec       	ldi	r26, 0xC5	; 197
 160:	b0 e2       	ldi	r27, 0x20	; 32
 162:	e6 d1       	rcall	.+972    	; 0x530 <__umulhisi3>
 164:	fc 01       	movw	r30, r24
 166:	f2 95       	swap	r31
 168:	e2 95       	swap	r30
 16a:	ef 70       	andi	r30, 0x0F	; 15
 16c:	ef 27       	eor	r30, r31
 16e:	ff 70       	andi	r31, 0x0F	; 15
 170:	ef 27       	eor	r30, r31
 172:	f0 93 85 00 	sts	0x0085, r31	; 0x800085 <r1_1000+0x1>
 176:	e0 93 84 00 	sts	0x0084, r30	; 0x800084 <r1_1000>
	r2_100 = num%1000/100; // Сотни
 17a:	28 ee       	ldi	r18, 0xE8	; 232
 17c:	33 e0       	ldi	r19, 0x03	; 3
 17e:	e2 9f       	mul	r30, r18
 180:	c0 01       	movw	r24, r0
 182:	e3 9f       	mul	r30, r19
 184:	90 0d       	add	r25, r0
 186:	f2 9f       	mul	r31, r18
 188:	90 0d       	add	r25, r0
 18a:	11 24       	eor	r1, r1
 18c:	9a 01       	movw	r18, r20
 18e:	28 1b       	sub	r18, r24
 190:	39 0b       	sbc	r19, r25
 192:	36 95       	lsr	r19
 194:	27 95       	ror	r18
 196:	36 95       	lsr	r19
 198:	27 95       	ror	r18
 19a:	ab e7       	ldi	r26, 0x7B	; 123
 19c:	b4 e1       	ldi	r27, 0x14	; 20
 19e:	c8 d1       	rcall	.+912    	; 0x530 <__umulhisi3>
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <r2_100+0x1>
 1a8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <r2_100>
	r3_10  = num%100/10; // Десятки
 1ac:	9a 01       	movw	r18, r20
 1ae:	36 95       	lsr	r19
 1b0:	27 95       	ror	r18
 1b2:	36 95       	lsr	r19
 1b4:	27 95       	ror	r18
 1b6:	bc d1       	rcall	.+888    	; 0x530 <__umulhisi3>
 1b8:	9c 01       	movw	r18, r24
 1ba:	36 95       	lsr	r19
 1bc:	27 95       	ror	r18
 1be:	64 e6       	ldi	r22, 0x64	; 100
 1c0:	62 9f       	mul	r22, r18
 1c2:	c0 01       	movw	r24, r0
 1c4:	63 9f       	mul	r22, r19
 1c6:	90 0d       	add	r25, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	9a 01       	movw	r18, r20
 1cc:	28 1b       	sub	r18, r24
 1ce:	39 0b       	sbc	r19, r25
 1d0:	ad ec       	ldi	r26, 0xCD	; 205
 1d2:	bc ec       	ldi	r27, 0xCC	; 204
 1d4:	ad d1       	rcall	.+858    	; 0x530 <__umulhisi3>
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <r3_10+0x1>
 1e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <r3_10>
	r4_1   = num%10; // Единици
 1ea:	9a 01       	movw	r18, r20
 1ec:	a1 d1       	rcall	.+834    	; 0x530 <__umulhisi3>
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	96 95       	lsr	r25
 1f8:	87 95       	ror	r24
 1fa:	9c 01       	movw	r18, r24
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	82 0f       	add	r24, r18
 20e:	93 1f       	adc	r25, r19
 210:	9a 01       	movw	r18, r20
 212:	28 1b       	sub	r18, r24
 214:	39 0b       	sbc	r19, r25
 216:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <r4_1+0x1>
 21a:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <r4_1>

}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <SPI_Master_Settings>:

// Настройки SPI_Master
void SPI_Master_Settings ()
{
	//DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
	DDRB |= (1<<SCK) | (1<<SS);
 224:	87 b3       	in	r24, 0x17	; 23
 226:	84 62       	ori	r24, 0x24	; 36
 228:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS); // "Этот пин нужно установить раньше
 22a:	88 b3       	in	r24, 0x18	; 24
 22c:	84 60       	ori	r24, 0x04	; 4
 22e:	88 bb       	out	0x18, r24	; 24
	// настроек регистра контроля, т.е. раньше команды SPCR |= (1<<MSTR)
	DDRB &= ~(1<<MISO);
 230:	87 b3       	in	r24, 0x17	; 23
 232:	8f 7e       	andi	r24, 0xEF	; 239
 234:	87 bb       	out	0x17, r24	; 23
	//SPCR |= (1<<SPIE); // Разрешаем прерывания по SPI
	SPCR |= (1<<SPE); // Включаем SPI
 236:	8d b1       	in	r24, 0x0d	; 13
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<<MSTR); // МК Master
 23c:	8d b1       	in	r24, 0x0d	; 13
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X); // Без удвоения частоты
 242:	8e b1       	in	r24, 0x0e	; 14
 244:	8e 7f       	andi	r24, 0xFE	; 254
 246:	8e b9       	out	0x0e, r24	; 14
	// Делим частоту МК на 16
	SPCR &= ~(1<<SPR1);
 248:	8d b1       	in	r24, 0x0d	; 13
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<<SPR0);
 24e:	8d b1       	in	r24, 0x0d	; 13
 250:	81 60       	ori	r24, 0x01	; 1
 252:	8d b9       	out	0x0d, r24	; 13
	//SPCR |= (1<<CPOL); // Импульсы отрицательной полярности
	SPCR &= ~(1<<CPOL); // Импульсы положительной полярности
 254:	8d b1       	in	r24, 0x0d	; 13
 256:	87 7f       	andi	r24, 0xF7	; 247
 258:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<<CPHA); // Выборка данных по заднему фронту
 25a:	8d b1       	in	r24, 0x0d	; 13
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1<<DORD); // Первым передается старший бит
 260:	8d b1       	in	r24, 0x0d	; 13
 262:	8f 7d       	andi	r24, 0xDF	; 223
 264:	8d b9       	out	0x0d, r24	; 13
 266:	08 95       	ret

00000268 <Receiver_SPI_Master>:
}

// Функция приема данных
unsigned char Receiver_SPI_Master ()
{
	SPDR = 0xff;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	8f b9       	out	0x0f, r24	; 15
	while(~SPSR&(1<<SPIF))
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <Receiver_SPI_Master+0x4>
	;
	return SPDR;
 270:	8f b1       	in	r24, 0x0f	; 15
}
 272:	08 95       	ret

00000274 <main>:

int main(void)
{
    // Сегменты индикатора
    DDRD = 0xff;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	81 bb       	out	0x11, r24	; 17
    PORTD = 0x00;
 278:	12 ba       	out	0x12, r1	; 18
    
    // Разряды индикатора
    DDRC |= (1<<3) | (1<<2) | (1<<1) | (1<<0);
 27a:	84 b3       	in	r24, 0x14	; 20
 27c:	8f 60       	ori	r24, 0x0F	; 15
 27e:	84 bb       	out	0x14, r24	; 20
    PORTC |= (1<<3) | (1<<2) | (1<<1) | (1<<0);
 280:	85 b3       	in	r24, 0x15	; 21
 282:	8f 60       	ori	r24, 0x0F	; 15
 284:	85 bb       	out	0x15, r24	; 21
    
    TCCR0 = 0b00000010; // Делим частоту МК на 8
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0;
 28a:	12 be       	out	0x32, r1	; 50
    TIMSK |= (1<<TOIE0); // Разрешаем прерывания при переполнении 0-от ТС
 28c:	89 b7       	in	r24, 0x39	; 57
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	89 bf       	out	0x39, r24	; 57

    SPI_Master_Settings ();
 292:	c8 df       	rcall	.-112    	; 0x224 <SPI_Master_Settings>
    

    sei();
 294:	78 94       	sei
	
    while (1) 
    {
		//_delay_ms(250); // Задержка на преобразование АЦП
		PORTB &= ~(1<<SS);
 296:	88 b3       	in	r24, 0x18	; 24
 298:	8b 7f       	andi	r24, 0xFB	; 251
 29a:	88 bb       	out	0x18, r24	; 24
		High_Byte = Receiver_SPI_Master();
 29c:	e5 df       	rcall	.-54     	; 0x268 <Receiver_SPI_Master>
 29e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <High_Byte>
		Low_Byte = Receiver_SPI_Master();
 2a2:	e2 df       	rcall	.-60     	; 0x268 <Receiver_SPI_Master>
 2a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Low_Byte>
		PORTB |= (1<<SS);
 2a8:	88 b3       	in	r24, 0x18	; 24
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	88 bb       	out	0x18, r24	; 24
		Temper_bits = (High_Byte << 5) | (Low_Byte >> 3);
 2ae:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <High_Byte>
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	68 9f       	mul	r22, r24
 2b6:	b0 01       	movw	r22, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Low_Byte>
 2be:	86 95       	lsr	r24
 2c0:	86 95       	lsr	r24
 2c2:	86 95       	lsr	r24
 2c4:	68 2b       	or	r22, r24
 2c6:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <Temper_bits+0x1>
 2ca:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <Temper_bits>
		Temperature = (float)Temper_bits*0.25; // Температура в Цельсиях
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	3d d0       	rcall	.+122    	; 0x34e <__floatunsisf>
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e8       	ldi	r20, 0x80	; 128
 2da:	5e e3       	ldi	r21, 0x3E	; 62
 2dc:	9e d0       	rcall	.+316    	; 0x41a <__mulsf3>
 2de:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <__data_end>
 2e2:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <__data_end+0x1>
 2e6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end+0x2>
 2ea:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x3>
		//Temperature = (float)Temper_bits*9.0/5.0 + 32; // Температура в Фаренгейтах

		//number(1234);
		number(Temperature);
 2ee:	03 d0       	rcall	.+6      	; 0x2f6 <__fixunssfsi>
 2f0:	cb 01       	movw	r24, r22
 2f2:	2a df       	rcall	.-428    	; 0x148 <number>
 2f4:	d0 cf       	rjmp	.-96     	; 0x296 <main+0x22>

000002f6 <__fixunssfsi>:
 2f6:	70 d0       	rcall	.+224    	; 0x3d8 <__fp_splitA>
 2f8:	88 f0       	brcs	.+34     	; 0x31c <__fixunssfsi+0x26>
 2fa:	9f 57       	subi	r25, 0x7F	; 127
 2fc:	90 f0       	brcs	.+36     	; 0x322 <__fixunssfsi+0x2c>
 2fe:	b9 2f       	mov	r27, r25
 300:	99 27       	eor	r25, r25
 302:	b7 51       	subi	r27, 0x17	; 23
 304:	a0 f0       	brcs	.+40     	; 0x32e <__fixunssfsi+0x38>
 306:	d1 f0       	breq	.+52     	; 0x33c <__fixunssfsi+0x46>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	1a f0       	brmi	.+6      	; 0x318 <__fixunssfsi+0x22>
 312:	ba 95       	dec	r27
 314:	c9 f7       	brne	.-14     	; 0x308 <__fixunssfsi+0x12>
 316:	12 c0       	rjmp	.+36     	; 0x33c <__fixunssfsi+0x46>
 318:	b1 30       	cpi	r27, 0x01	; 1
 31a:	81 f0       	breq	.+32     	; 0x33c <__fixunssfsi+0x46>
 31c:	77 d0       	rcall	.+238    	; 0x40c <__fp_zero>
 31e:	b1 e0       	ldi	r27, 0x01	; 1
 320:	08 95       	ret
 322:	74 c0       	rjmp	.+232    	; 0x40c <__fp_zero>
 324:	67 2f       	mov	r22, r23
 326:	78 2f       	mov	r23, r24
 328:	88 27       	eor	r24, r24
 32a:	b8 5f       	subi	r27, 0xF8	; 248
 32c:	39 f0       	breq	.+14     	; 0x33c <__fixunssfsi+0x46>
 32e:	b9 3f       	cpi	r27, 0xF9	; 249
 330:	cc f3       	brlt	.-14     	; 0x324 <__fixunssfsi+0x2e>
 332:	86 95       	lsr	r24
 334:	77 95       	ror	r23
 336:	67 95       	ror	r22
 338:	b3 95       	inc	r27
 33a:	d9 f7       	brne	.-10     	; 0x332 <__fixunssfsi+0x3c>
 33c:	3e f4       	brtc	.+14     	; 0x34c <__fixunssfsi+0x56>
 33e:	90 95       	com	r25
 340:	80 95       	com	r24
 342:	70 95       	com	r23
 344:	61 95       	neg	r22
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	8f 4f       	sbci	r24, 0xFF	; 255
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	08 95       	ret

0000034e <__floatunsisf>:
 34e:	e8 94       	clt
 350:	09 c0       	rjmp	.+18     	; 0x364 <__floatsisf+0x12>

00000352 <__floatsisf>:
 352:	97 fb       	bst	r25, 7
 354:	3e f4       	brtc	.+14     	; 0x364 <__floatsisf+0x12>
 356:	90 95       	com	r25
 358:	80 95       	com	r24
 35a:	70 95       	com	r23
 35c:	61 95       	neg	r22
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	8f 4f       	sbci	r24, 0xFF	; 255
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	99 23       	and	r25, r25
 366:	a9 f0       	breq	.+42     	; 0x392 <__floatsisf+0x40>
 368:	f9 2f       	mov	r31, r25
 36a:	96 e9       	ldi	r25, 0x96	; 150
 36c:	bb 27       	eor	r27, r27
 36e:	93 95       	inc	r25
 370:	f6 95       	lsr	r31
 372:	87 95       	ror	r24
 374:	77 95       	ror	r23
 376:	67 95       	ror	r22
 378:	b7 95       	ror	r27
 37a:	f1 11       	cpse	r31, r1
 37c:	f8 cf       	rjmp	.-16     	; 0x36e <__floatsisf+0x1c>
 37e:	fa f4       	brpl	.+62     	; 0x3be <__floatsisf+0x6c>
 380:	bb 0f       	add	r27, r27
 382:	11 f4       	brne	.+4      	; 0x388 <__floatsisf+0x36>
 384:	60 ff       	sbrs	r22, 0
 386:	1b c0       	rjmp	.+54     	; 0x3be <__floatsisf+0x6c>
 388:	6f 5f       	subi	r22, 0xFF	; 255
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	8f 4f       	sbci	r24, 0xFF	; 255
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	16 c0       	rjmp	.+44     	; 0x3be <__floatsisf+0x6c>
 392:	88 23       	and	r24, r24
 394:	11 f0       	breq	.+4      	; 0x39a <__floatsisf+0x48>
 396:	96 e9       	ldi	r25, 0x96	; 150
 398:	11 c0       	rjmp	.+34     	; 0x3bc <__floatsisf+0x6a>
 39a:	77 23       	and	r23, r23
 39c:	21 f0       	breq	.+8      	; 0x3a6 <__floatsisf+0x54>
 39e:	9e e8       	ldi	r25, 0x8E	; 142
 3a0:	87 2f       	mov	r24, r23
 3a2:	76 2f       	mov	r23, r22
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <__floatsisf+0x5e>
 3a6:	66 23       	and	r22, r22
 3a8:	71 f0       	breq	.+28     	; 0x3c6 <__floatsisf+0x74>
 3aa:	96 e8       	ldi	r25, 0x86	; 134
 3ac:	86 2f       	mov	r24, r22
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	2a f0       	brmi	.+10     	; 0x3be <__floatsisf+0x6c>
 3b4:	9a 95       	dec	r25
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	da f7       	brpl	.-10     	; 0x3b4 <__floatsisf+0x62>
 3be:	88 0f       	add	r24, r24
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	97 f9       	bld	r25, 7
 3c6:	08 95       	ret

000003c8 <__fp_split3>:
 3c8:	57 fd       	sbrc	r21, 7
 3ca:	90 58       	subi	r25, 0x80	; 128
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <__fp_splitA+0x10>
 3d2:	5f 3f       	cpi	r21, 0xFF	; 255
 3d4:	71 f0       	breq	.+28     	; 0x3f2 <__fp_splitA+0x1a>
 3d6:	47 95       	ror	r20

000003d8 <__fp_splitA>:
 3d8:	88 0f       	add	r24, r24
 3da:	97 fb       	bst	r25, 7
 3dc:	99 1f       	adc	r25, r25
 3de:	61 f0       	breq	.+24     	; 0x3f8 <__fp_splitA+0x20>
 3e0:	9f 3f       	cpi	r25, 0xFF	; 255
 3e2:	79 f0       	breq	.+30     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3e4:	87 95       	ror	r24
 3e6:	08 95       	ret
 3e8:	12 16       	cp	r1, r18
 3ea:	13 06       	cpc	r1, r19
 3ec:	14 06       	cpc	r1, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <__fp_split3+0xe>
 3f2:	46 95       	lsr	r20
 3f4:	f1 df       	rcall	.-30     	; 0x3d8 <__fp_splitA>
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3f8:	16 16       	cp	r1, r22
 3fa:	17 06       	cpc	r1, r23
 3fc:	18 06       	cpc	r1, r24
 3fe:	99 1f       	adc	r25, r25
 400:	f1 cf       	rjmp	.-30     	; 0x3e4 <__fp_splitA+0xc>
 402:	86 95       	lsr	r24
 404:	71 05       	cpc	r23, r1
 406:	61 05       	cpc	r22, r1
 408:	08 94       	sec
 40a:	08 95       	ret

0000040c <__fp_zero>:
 40c:	e8 94       	clt

0000040e <__fp_szero>:
 40e:	bb 27       	eor	r27, r27
 410:	66 27       	eor	r22, r22
 412:	77 27       	eor	r23, r23
 414:	cb 01       	movw	r24, r22
 416:	97 f9       	bld	r25, 7
 418:	08 95       	ret

0000041a <__mulsf3>:
 41a:	0b d0       	rcall	.+22     	; 0x432 <__mulsf3x>
 41c:	78 c0       	rjmp	.+240    	; 0x50e <__fp_round>
 41e:	69 d0       	rcall	.+210    	; 0x4f2 <__fp_pscA>
 420:	28 f0       	brcs	.+10     	; 0x42c <__mulsf3+0x12>
 422:	6e d0       	rcall	.+220    	; 0x500 <__fp_pscB>
 424:	18 f0       	brcs	.+6      	; 0x42c <__mulsf3+0x12>
 426:	95 23       	and	r25, r21
 428:	09 f0       	breq	.+2      	; 0x42c <__mulsf3+0x12>
 42a:	5a c0       	rjmp	.+180    	; 0x4e0 <__fp_inf>
 42c:	5f c0       	rjmp	.+190    	; 0x4ec <__fp_nan>
 42e:	11 24       	eor	r1, r1
 430:	ee cf       	rjmp	.-36     	; 0x40e <__fp_szero>

00000432 <__mulsf3x>:
 432:	ca df       	rcall	.-108    	; 0x3c8 <__fp_split3>
 434:	a0 f3       	brcs	.-24     	; 0x41e <__mulsf3+0x4>

00000436 <__mulsf3_pse>:
 436:	95 9f       	mul	r25, r21
 438:	d1 f3       	breq	.-12     	; 0x42e <__mulsf3+0x14>
 43a:	95 0f       	add	r25, r21
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	55 1f       	adc	r21, r21
 440:	62 9f       	mul	r22, r18
 442:	f0 01       	movw	r30, r0
 444:	72 9f       	mul	r23, r18
 446:	bb 27       	eor	r27, r27
 448:	f0 0d       	add	r31, r0
 44a:	b1 1d       	adc	r27, r1
 44c:	63 9f       	mul	r22, r19
 44e:	aa 27       	eor	r26, r26
 450:	f0 0d       	add	r31, r0
 452:	b1 1d       	adc	r27, r1
 454:	aa 1f       	adc	r26, r26
 456:	64 9f       	mul	r22, r20
 458:	66 27       	eor	r22, r22
 45a:	b0 0d       	add	r27, r0
 45c:	a1 1d       	adc	r26, r1
 45e:	66 1f       	adc	r22, r22
 460:	82 9f       	mul	r24, r18
 462:	22 27       	eor	r18, r18
 464:	b0 0d       	add	r27, r0
 466:	a1 1d       	adc	r26, r1
 468:	62 1f       	adc	r22, r18
 46a:	73 9f       	mul	r23, r19
 46c:	b0 0d       	add	r27, r0
 46e:	a1 1d       	adc	r26, r1
 470:	62 1f       	adc	r22, r18
 472:	83 9f       	mul	r24, r19
 474:	a0 0d       	add	r26, r0
 476:	61 1d       	adc	r22, r1
 478:	22 1f       	adc	r18, r18
 47a:	74 9f       	mul	r23, r20
 47c:	33 27       	eor	r19, r19
 47e:	a0 0d       	add	r26, r0
 480:	61 1d       	adc	r22, r1
 482:	23 1f       	adc	r18, r19
 484:	84 9f       	mul	r24, r20
 486:	60 0d       	add	r22, r0
 488:	21 1d       	adc	r18, r1
 48a:	82 2f       	mov	r24, r18
 48c:	76 2f       	mov	r23, r22
 48e:	6a 2f       	mov	r22, r26
 490:	11 24       	eor	r1, r1
 492:	9f 57       	subi	r25, 0x7F	; 127
 494:	50 40       	sbci	r21, 0x00	; 0
 496:	8a f0       	brmi	.+34     	; 0x4ba <__stack+0x5b>
 498:	e1 f0       	breq	.+56     	; 0x4d2 <__stack+0x73>
 49a:	88 23       	and	r24, r24
 49c:	4a f0       	brmi	.+18     	; 0x4b0 <__stack+0x51>
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	bb 1f       	adc	r27, r27
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	91 50       	subi	r25, 0x01	; 1
 4ac:	50 40       	sbci	r21, 0x00	; 0
 4ae:	a9 f7       	brne	.-22     	; 0x49a <__stack+0x3b>
 4b0:	9e 3f       	cpi	r25, 0xFE	; 254
 4b2:	51 05       	cpc	r21, r1
 4b4:	70 f0       	brcs	.+28     	; 0x4d2 <__stack+0x73>
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <__fp_inf>
 4b8:	aa cf       	rjmp	.-172    	; 0x40e <__fp_szero>
 4ba:	5f 3f       	cpi	r21, 0xFF	; 255
 4bc:	ec f3       	brlt	.-6      	; 0x4b8 <__stack+0x59>
 4be:	98 3e       	cpi	r25, 0xE8	; 232
 4c0:	dc f3       	brlt	.-10     	; 0x4b8 <__stack+0x59>
 4c2:	86 95       	lsr	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b7 95       	ror	r27
 4ca:	f7 95       	ror	r31
 4cc:	e7 95       	ror	r30
 4ce:	9f 5f       	subi	r25, 0xFF	; 255
 4d0:	c1 f7       	brne	.-16     	; 0x4c2 <__stack+0x63>
 4d2:	fe 2b       	or	r31, r30
 4d4:	88 0f       	add	r24, r24
 4d6:	91 1d       	adc	r25, r1
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	97 f9       	bld	r25, 7
 4de:	08 95       	ret

000004e0 <__fp_inf>:
 4e0:	97 f9       	bld	r25, 7
 4e2:	9f 67       	ori	r25, 0x7F	; 127
 4e4:	80 e8       	ldi	r24, 0x80	; 128
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	08 95       	ret

000004ec <__fp_nan>:
 4ec:	9f ef       	ldi	r25, 0xFF	; 255
 4ee:	80 ec       	ldi	r24, 0xC0	; 192
 4f0:	08 95       	ret

000004f2 <__fp_pscA>:
 4f2:	00 24       	eor	r0, r0
 4f4:	0a 94       	dec	r0
 4f6:	16 16       	cp	r1, r22
 4f8:	17 06       	cpc	r1, r23
 4fa:	18 06       	cpc	r1, r24
 4fc:	09 06       	cpc	r0, r25
 4fe:	08 95       	ret

00000500 <__fp_pscB>:
 500:	00 24       	eor	r0, r0
 502:	0a 94       	dec	r0
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	14 06       	cpc	r1, r20
 50a:	05 06       	cpc	r0, r21
 50c:	08 95       	ret

0000050e <__fp_round>:
 50e:	09 2e       	mov	r0, r25
 510:	03 94       	inc	r0
 512:	00 0c       	add	r0, r0
 514:	11 f4       	brne	.+4      	; 0x51a <__fp_round+0xc>
 516:	88 23       	and	r24, r24
 518:	52 f0       	brmi	.+20     	; 0x52e <__fp_round+0x20>
 51a:	bb 0f       	add	r27, r27
 51c:	40 f4       	brcc	.+16     	; 0x52e <__fp_round+0x20>
 51e:	bf 2b       	or	r27, r31
 520:	11 f4       	brne	.+4      	; 0x526 <__fp_round+0x18>
 522:	60 ff       	sbrs	r22, 0
 524:	04 c0       	rjmp	.+8      	; 0x52e <__fp_round+0x20>
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	08 95       	ret

00000530 <__umulhisi3>:
 530:	a2 9f       	mul	r26, r18
 532:	b0 01       	movw	r22, r0
 534:	b3 9f       	mul	r27, r19
 536:	c0 01       	movw	r24, r0
 538:	a3 9f       	mul	r26, r19
 53a:	01 d0       	rcall	.+2      	; 0x53e <__umulhisi3+0xe>
 53c:	b2 9f       	mul	r27, r18
 53e:	70 0d       	add	r23, r0
 540:	81 1d       	adc	r24, r1
 542:	11 24       	eor	r1, r1
 544:	91 1d       	adc	r25, r1
 546:	08 95       	ret

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>
