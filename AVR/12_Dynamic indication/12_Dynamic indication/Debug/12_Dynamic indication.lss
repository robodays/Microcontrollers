
12_Dynamic indication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000019c  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000674  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a9  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b2  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001665  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e9       	ldi	r30, 0x9C	; 156
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 37       	cpi	r26, 0x7C	; 124
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	23 d0       	rcall	.+70     	; 0xa0 <main>
  5a:	9e c0       	rjmp	.+316    	; 0x198 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <number>:
#include <util/delay.h>
#define DELAY 20

int digits[4];

void number(int num) {
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	9c 01       	movw	r18, r24
	
	digits[0] = num/1000;
  64:	68 ee       	ldi	r22, 0xE8	; 232
  66:	73 e0       	ldi	r23, 0x03	; 3
  68:	70 d0       	rcall	.+224    	; 0x14a <__divmodhi4>
  6a:	e4 e7       	ldi	r30, 0x74	; 116
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	71 83       	std	Z+1, r23	; 0x01
  70:	60 83       	st	Z, r22
	digits[1] = num % 1000 / 100;
  72:	c4 e6       	ldi	r28, 0x64	; 100
  74:	d0 e0       	ldi	r29, 0x00	; 0
  76:	be 01       	movw	r22, r28
  78:	68 d0       	rcall	.+208    	; 0x14a <__divmodhi4>
  7a:	73 83       	std	Z+3, r23	; 0x03
  7c:	62 83       	std	Z+2, r22	; 0x02
	digits[2] = num % 100 / 10;
  7e:	c9 01       	movw	r24, r18
  80:	be 01       	movw	r22, r28
  82:	63 d0       	rcall	.+198    	; 0x14a <__divmodhi4>
  84:	ca e0       	ldi	r28, 0x0A	; 10
  86:	d0 e0       	ldi	r29, 0x00	; 0
  88:	be 01       	movw	r22, r28
  8a:	5f d0       	rcall	.+190    	; 0x14a <__divmodhi4>
  8c:	75 83       	std	Z+5, r23	; 0x05
  8e:	64 83       	std	Z+4, r22	; 0x04
	digits[3] = num % 10;
  90:	c9 01       	movw	r24, r18
  92:	be 01       	movw	r22, r28
  94:	5a d0       	rcall	.+180    	; 0x14a <__divmodhi4>
  96:	97 83       	std	Z+7, r25	; 0x07
  98:	86 83       	std	Z+6, r24	; 0x06
}
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <main>:

int main(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	64 97       	sbiw	r28, 0x14	; 20
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b11111111;
  b4:	9f ef       	ldi	r25, 0xFF	; 255
  b6:	91 bb       	out	0x11, r25	; 17
	
	DDRB = 0b00001111;
  b8:	8f e0       	ldi	r24, 0x0F	; 15
  ba:	87 bb       	out	0x17, r24	; 23
	
	PORTD = 0b11111111;
  bc:	92 bb       	out	0x12, r25	; 18
	
	
	
	PORTB = 0b00001111;	
  be:	88 bb       	out	0x18, r24	; 24
	
	int digits16[10] = {0x3f, 0x6, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x7, 0x7f, 0x6f};
  c0:	84 e1       	ldi	r24, 0x14	; 20
  c2:	e0 e6       	ldi	r30, 0x60	; 96
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	8a 95       	dec	r24
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x2a>
		_delay_ms(DELAY);
*/		

		//for schemes Dynamic indication3_npn
		
		number(4567);
  d2:	87 ed       	ldi	r24, 0xD7	; 215
  d4:	91 e1       	ldi	r25, 0x11	; 17
  d6:	c3 df       	rcall	.-122    	; 0x5e <number>
		
		PORTB = 0b00000001;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	88 bb       	out	0x18, r24	; 24
		PORTD = digits16[digits[0]];
  dc:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
  e0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	2c 0f       	add	r18, r28
  ee:	3d 1f       	adc	r19, r29
  f0:	e2 0f       	add	r30, r18
  f2:	f3 1f       	adc	r31, r19
  f4:	80 81       	ld	r24, Z
  f6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	87 e8       	ldi	r24, 0x87	; 135
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x5c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x62>
 102:	00 00       	nop
		_delay_ms(DELAY);
		for (int i = 1; i < 4; i++)
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	1c c0       	rjmp	.+56     	; 0x142 <main+0xa2>
		{
			PORTB <<= 1;
 10a:	28 b3       	in	r18, 0x18	; 24
 10c:	22 0f       	add	r18, r18
 10e:	28 bb       	out	0x18, r18	; 24
			PORTD = digits16[digits[i]];
 110:	fc 01       	movw	r30, r24
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ec 58       	subi	r30, 0x8C	; 140
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	01 90       	ld	r0, Z+
 11c:	f0 81       	ld	r31, Z
 11e:	e0 2d       	mov	r30, r0
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	2c 0f       	add	r18, r28
 12a:	3d 1f       	adc	r19, r29
 12c:	e2 0f       	add	r30, r18
 12e:	f3 1f       	adc	r31, r19
 130:	20 81       	ld	r18, Z
 132:	22 bb       	out	0x12, r18	; 18
 134:	e7 e8       	ldi	r30, 0x87	; 135
 136:	f3 e1       	ldi	r31, 0x13	; 19
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x98>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x9e>
 13e:	00 00       	nop
		number(4567);
		
		PORTB = 0b00000001;
		PORTD = digits16[digits[0]];
		_delay_ms(DELAY);
		for (int i = 1; i < 4; i++)
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	84 30       	cpi	r24, 0x04	; 4
 144:	91 05       	cpc	r25, r1
 146:	0c f3       	brlt	.-62     	; 0x10a <main+0x6a>
 148:	c4 cf       	rjmp	.-120    	; 0xd2 <main+0x32>

0000014a <__divmodhi4>:
 14a:	97 fb       	bst	r25, 7
 14c:	07 2e       	mov	r0, r23
 14e:	16 f4       	brtc	.+4      	; 0x154 <__divmodhi4+0xa>
 150:	00 94       	com	r0
 152:	06 d0       	rcall	.+12     	; 0x160 <__divmodhi4_neg1>
 154:	77 fd       	sbrc	r23, 7
 156:	08 d0       	rcall	.+16     	; 0x168 <__divmodhi4_neg2>
 158:	0b d0       	rcall	.+22     	; 0x170 <__udivmodhi4>
 15a:	07 fc       	sbrc	r0, 7
 15c:	05 d0       	rcall	.+10     	; 0x168 <__divmodhi4_neg2>
 15e:	3e f4       	brtc	.+14     	; 0x16e <__divmodhi4_exit>

00000160 <__divmodhi4_neg1>:
 160:	90 95       	com	r25
 162:	81 95       	neg	r24
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	08 95       	ret

00000168 <__divmodhi4_neg2>:
 168:	70 95       	com	r23
 16a:	61 95       	neg	r22
 16c:	7f 4f       	sbci	r23, 0xFF	; 255

0000016e <__divmodhi4_exit>:
 16e:	08 95       	ret

00000170 <__udivmodhi4>:
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	51 e1       	ldi	r21, 0x11	; 17
 176:	07 c0       	rjmp	.+14     	; 0x186 <__udivmodhi4_ep>

00000178 <__udivmodhi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	a6 17       	cp	r26, r22
 17e:	b7 07       	cpc	r27, r23
 180:	10 f0       	brcs	.+4      	; 0x186 <__udivmodhi4_ep>
 182:	a6 1b       	sub	r26, r22
 184:	b7 0b       	sbc	r27, r23

00000186 <__udivmodhi4_ep>:
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	a9 f7       	brne	.-22     	; 0x178 <__udivmodhi4_loop>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
