
18_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000018e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c6  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000597  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000315  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000328  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	17 d0       	rcall	.+46     	; 0x72 <main>
  44:	68 c0       	rjmp	.+208    	; 0x116 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <EEPROM_write>:
unsigned char click0 = 0, click1 = 0;

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  48:	e1 99       	sbic	0x1c, 1	; 28
  4a:	fe cf       	rjmp	.-4      	; 0x48 <EEPROM_write>
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
  4c:	9f bb       	out	0x1f, r25	; 31
  4e:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  50:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
  52:	8c b3       	in	r24, 0x1c	; 28
  54:	84 60       	ori	r24, 0x04	; 4
  56:	8c bb       	out	0x1c, r24	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
  58:	8c b3       	in	r24, 0x1c	; 28
  5a:	82 60       	ori	r24, 0x02	; 2
  5c:	8c bb       	out	0x1c, r24	; 28
  5e:	08 95       	ret

00000060 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  60:	e1 99       	sbic	0x1c, 1	; 28
  62:	fe cf       	rjmp	.-4      	; 0x60 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
  64:	9f bb       	out	0x1f, r25	; 31
  66:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  68:	8c b3       	in	r24, 0x1c	; 28
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
  6e:	8d b3       	in	r24, 0x1d	; 29
}
  70:	08 95       	ret

00000072 <main>:


int main(void)
{
	//LED
	DDRB = 0b00001111;
  72:	8f e0       	ldi	r24, 0x0F	; 15
  74:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b0001111;
  76:	84 bb       	out	0x14, r24	; 20
	
	//Button
	DDRD &= ~((1<<0) | (1<<1));
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8c 7f       	andi	r24, 0xFC	; 252
  7c:	81 bb       	out	0x11, r24	; 17
	
	PORTB = 0b00000000;
  7e:	18 ba       	out	0x18, r1	; 24
	PORTC = 0b0000000;
  80:	15 ba       	out	0x15, r1	; 21
	
	PORTD |= (1<<0) | (1<<1);
  82:	82 b3       	in	r24, 0x12	; 18
  84:	83 60       	ori	r24, 0x03	; 3
  86:	82 bb       	out	0x12, r24	; 18
	
	click0 = PORTB = EEPROM_read(0x00);
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	e9 df       	rcall	.-46     	; 0x60 <EEPROM_read>
  8e:	88 bb       	out	0x18, r24	; 24
  90:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <click0>
	click1 = PORTC = EEPROM_read(0X01);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	e3 df       	rcall	.-58     	; 0x60 <EEPROM_read>
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	
    while (1) 
    {
		if (~PIND & (1<<0)) {
  a0:	80 99       	sbic	0x10, 0	; 16
  a2:	1b c0       	rjmp	.+54     	; 0xda <main+0x68>
			if (click0 < 16) {
  a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <click0>
  a8:	80 31       	cpi	r24, 0x10	; 16
  aa:	20 f4       	brcc	.+8      	; 0xb4 <main+0x42>
				click0++;
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <click0>
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x46>
			} else {
				click0 = 0;
  b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <click0>
			}
			PORTB = click0;
  b8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <click0>
  bc:	88 bb       	out	0x18, r24	; 24
			EEPROM_write(0x00, click0);
  be:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <click0>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	c0 df       	rcall	.-128    	; 0x48 <EEPROM_write>
			while (~PIND & (1<<0)) {
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <main+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e4       	ldi	r24, 0x4F	; 79
  cc:	93 ec       	ldi	r25, 0xC3	; 195
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x5c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x62>
  d4:	00 00       	nop
  d6:	80 9b       	sbis	0x10, 0	; 16
  d8:	f8 cf       	rjmp	.-16     	; 0xca <main+0x58>
				_delay_ms(200);
			}
		}
		if (~PIND & (1<<1)) {
  da:	81 99       	sbic	0x10, 1	; 16
  dc:	e1 cf       	rjmp	.-62     	; 0xa0 <main+0x2e>
			if (click1 < 16) {
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	80 31       	cpi	r24, 0x10	; 16
  e4:	20 f4       	brcc	.+8      	; 0xee <main+0x7c>
				click1++;
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x80>
			} else {
				click1 = 0;
  ee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			PORTC = click1;
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	85 bb       	out	0x15, r24	; 21
			EEPROM_write(0x01, click1);
  f8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	a3 df       	rcall	.-186    	; 0x48 <EEPROM_write>
			while (~PIND & (1<<1)) {
 102:	06 c0       	rjmp	.+12     	; 0x110 <main+0x9e>
 104:	8f e4       	ldi	r24, 0x4F	; 79
 106:	93 ec       	ldi	r25, 0xC3	; 195
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x96>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x9c>
 10e:	00 00       	nop
 110:	81 9b       	sbis	0x10, 1	; 16
 112:	f8 cf       	rjmp	.-16     	; 0x104 <main+0x92>
 114:	c5 cf       	rjmp	.-118    	; 0xa0 <main+0x2e>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
