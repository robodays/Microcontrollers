
20_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7d  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005db  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040d  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f2  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ed       	ldi	r30, 0xD6	; 214
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	73 d0       	rcall	.+230    	; 0x130 <main>
  4a:	c3 c0       	rjmp	.+390    	; 0x1d2 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <LCD_commands>:
// raising and lowering the potential for fixing commands
#define E_1 PORTD |= (1<<3); 
#define E_0 PORTD &= ~(1<<3); 

void LCD_commands(unsigned char command) {
	PORTD = command;
  4e:	82 bb       	out	0x12, r24	; 18
	RS_COMMAND;
  50:	92 b3       	in	r25, 0x12	; 18
  52:	9b 7f       	andi	r25, 0xFB	; 251
  54:	92 bb       	out	0x12, r25	; 18
	E_1;
  56:	92 b3       	in	r25, 0x12	; 18
  58:	98 60       	ori	r25, 0x08	; 8
  5a:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	90 e1       	ldi	r25, 0x10	; 16
  5e:	9a 95       	dec	r25
  60:	f1 f7       	brne	.-4      	; 0x5e <LCD_commands+0x10>
  62:	00 c0       	rjmp	.+0      	; 0x64 <LCD_commands+0x16>
	_delay_us(50);
	E_0;
  64:	92 b3       	in	r25, 0x12	; 18
  66:	97 7f       	andi	r25, 0xF7	; 247
  68:	92 bb       	out	0x12, r25	; 18
  6a:	90 e1       	ldi	r25, 0x10	; 16
  6c:	9a 95       	dec	r25
  6e:	f1 f7       	brne	.-4      	; 0x6c <LCD_commands+0x1e>
  70:	00 c0       	rjmp	.+0      	; 0x72 <LCD_commands+0x24>
	_delay_us(50);
	
	PORTD = (command<<4);
  72:	82 95       	swap	r24
  74:	80 7f       	andi	r24, 0xF0	; 240
  76:	82 bb       	out	0x12, r24	; 18
	RS_COMMAND;
  78:	82 b3       	in	r24, 0x12	; 18
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	82 bb       	out	0x12, r24	; 18
	E_1;
  7e:	82 b3       	in	r24, 0x12	; 18
  80:	88 60       	ori	r24, 0x08	; 8
  82:	82 bb       	out	0x12, r24	; 18
  84:	80 e1       	ldi	r24, 0x10	; 16
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <LCD_commands+0x38>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <LCD_commands+0x3e>
	_delay_us(50);
	E_0;
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	87 7f       	andi	r24, 0xF7	; 247
  90:	82 bb       	out	0x12, r24	; 18
  92:	90 e1       	ldi	r25, 0x10	; 16
  94:	9a 95       	dec	r25
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_commands+0x46>
  98:	00 c0       	rjmp	.+0      	; 0x9a <LCD_commands+0x4c>
  9a:	08 95       	ret

0000009c <LCD_data>:
	_delay_us(50);
}

void LCD_data(unsigned char data) {
	PORTD = data;
  9c:	82 bb       	out	0x12, r24	; 18
	RS_DATA;
  9e:	92 b3       	in	r25, 0x12	; 18
  a0:	94 60       	ori	r25, 0x04	; 4
  a2:	92 bb       	out	0x12, r25	; 18
	E_1;
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	98 60       	ori	r25, 0x08	; 8
  a8:	92 bb       	out	0x12, r25	; 18
  aa:	90 e1       	ldi	r25, 0x10	; 16
  ac:	9a 95       	dec	r25
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_data+0x10>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_data+0x16>
	_delay_us(50);
	E_0;
  b2:	92 b3       	in	r25, 0x12	; 18
  b4:	97 7f       	andi	r25, 0xF7	; 247
  b6:	92 bb       	out	0x12, r25	; 18
  b8:	90 e1       	ldi	r25, 0x10	; 16
  ba:	9a 95       	dec	r25
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_data+0x1e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_data+0x24>
	_delay_us(50);
	
	PORTD = (data<<4);
  c0:	82 95       	swap	r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	82 bb       	out	0x12, r24	; 18
	RS_DATA;
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	82 bb       	out	0x12, r24	; 18
	E_1;
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_data+0x38>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_data+0x3e>
	_delay_us(50);
	E_0;
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	82 bb       	out	0x12, r24	; 18
  e0:	90 e1       	ldi	r25, 0x10	; 16
  e2:	9a 95       	dec	r25
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_data+0x46>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_data+0x4c>
  e8:	08 95       	ret

000000ea <line1>:
	_delay_us(50);
}

void line1(unsigned char adress) {
	LCD_commands(adress | (1<<7));
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	b0 df       	rcall	.-160    	; 0x4e <LCD_commands>
  ee:	08 95       	ret

000000f0 <line2>:
}

void line2(unsigned char adress) {
	LCD_commands((adress + 0x40) | (1<<7));
  f0:	80 5c       	subi	r24, 0xC0	; 192
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	ac df       	rcall	.-168    	; 0x4e <LCD_commands>
  f6:	08 95       	ret

000000f8 <LCD_string>:
}

void LCD_string(char str[]) {
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < strlen(str); i++) {
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	06 c0       	rjmp	.+12     	; 0x110 <LCD_string+0x18>
		LCD_data(str[i]);
 104:	fe 01       	movw	r30, r28
 106:	e8 0f       	add	r30, r24
 108:	f9 1f       	adc	r31, r25
 10a:	80 81       	ld	r24, Z
 10c:	c7 df       	rcall	.-114    	; 0x9c <LCD_data>
void line2(unsigned char adress) {
	LCD_commands((adress + 0x40) | (1<<7));
}

void LCD_string(char str[]) {
	for (uint8_t i = 0; i < strlen(str); i++) {
 10e:	1f 5f       	subi	r17, 0xFF	; 255
 110:	81 2f       	mov	r24, r17
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fe 01       	movw	r30, r28
 116:	01 90       	ld	r0, Z+
 118:	00 20       	and	r0, r0
 11a:	e9 f7       	brne	.-6      	; 0x116 <LCD_string+0x1e>
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	ec 1b       	sub	r30, r28
 120:	fd 0b       	sbc	r31, r29
 122:	8e 17       	cp	r24, r30
 124:	9f 07       	cpc	r25, r31
 126:	70 f3       	brcs	.-36     	; 0x104 <LCD_string+0xc>
		LCD_data(str[i]);
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	08 95       	ret

00000130 <main>:


int main(void)
{
	DDRD = 0b11111100;
 130:	8c ef       	ldi	r24, 0xFC	; 252
 132:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
 134:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	85 ea       	ldi	r24, 0xA5	; 165
 138:	9e e0       	ldi	r25, 0x0E	; 14
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0xa>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x10>
 140:	00 00       	nop
	
	//from datasheet LCD
	_delay_ms(15);
	LCD_commands(0b00110000);
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	84 df       	rcall	.-248    	; 0x4e <LCD_commands>
 146:	81 ee       	ldi	r24, 0xE1	; 225
 148:	94 e0       	ldi	r25, 0x04	; 4
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x1a>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x20>
 150:	00 00       	nop
	
	_delay_ms(5);
	LCD_commands(0b00110000);
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	7c df       	rcall	.-264    	; 0x4e <LCD_commands>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	91 e2       	ldi	r25, 0x21	; 33
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x28>
 15c:	00 00       	nop

	_delay_us(100);
	LCD_commands(0b00110000);
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	76 df       	rcall	.-276    	; 0x4e <LCD_commands>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x36>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x3c>
 16c:	00 00       	nop
	
	_delay_ms(1);
	LCD_commands(0b00000010);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	6e df       	rcall	.-292    	; 0x4e <LCD_commands>
 172:	83 ef       	ldi	r24, 0xF3	; 243
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x46>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x4c>
 17c:	00 00       	nop
	
	_delay_ms(2);
	LCD_commands(0b00101000); // 4 bits, 2 string, font 5*8
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	66 df       	rcall	.-308    	; 0x4e <LCD_commands>
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x56>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x5c>
 18c:	00 00       	nop

	_delay_ms(1);
	LCD_commands(0b00001100); // turn on the display, do not show and do not blink the cursor
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	5e df       	rcall	.-324    	; 0x4e <LCD_commands>
 192:	89 ef       	ldi	r24, 0xF9	; 249
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x66>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x6c>
 19c:	00 00       	nop
	//LCD_commands(0b00001111); // turn on the display, show and blink the cursor

	_delay_ms(1);
	LCD_commands(0b00000001); // Clear display
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	56 df       	rcall	.-340    	; 0x4e <LCD_commands>
 1a2:	83 ef       	ldi	r24, 0xF3	; 243
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x76>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x7c>
 1ac:	00 00       	nop
	
	_delay_ms(2);
	LCD_commands(0b00000110); // increment and shift the cursor to the right
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	4e df       	rcall	.-356    	; 0x4e <LCD_commands>
 1b2:	89 ef       	ldi	r24, 0xF9	; 249
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x86>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x8c>
 1bc:	00 00       	nop
	
	_delay_ms(1);
	
	line1(8);
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	94 df       	rcall	.-216    	; 0xea <line1>
	LCD_data('!');
 1c2:	81 e2       	ldi	r24, 0x21	; 33
 1c4:	6b df       	rcall	.-298    	; 0x9c <LCD_data>
	
	line2(2);
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	93 df       	rcall	.-218    	; 0xf0 <line2>
	LCD_string("Print string");
 1ca:	80 e6       	ldi	r24, 0x60	; 96
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	94 df       	rcall	.-216    	; 0xf8 <LCD_string>
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <main+0xa0>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
