
17_PWM_Phase_and_Frequency_Correct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051b  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000347  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000322  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	ba c0       	rjmp	.+372    	; 0x1aa <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

int main(void)
{
	//Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM, (non-inverting mode)
	//Bit 7:6 – COM1A1:0: Compare Output Mode for channel A
	TCCR1A |= (1<<COM1A1);
  38:	8f b5       	in	r24, 0x2f	; 47
  3a:	80 68       	ori	r24, 0x80	; 128
  3c:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<COM1A0);
  3e:	8f b5       	in	r24, 0x2f	; 47
  40:	8f 7b       	andi	r24, 0xBF	; 191
  42:	8f bd       	out	0x2f, r24	; 47
	//TCCR1B &= ~(1<<WGM12);
	//TCCR1B &= ~(1<<WGM13);
	
	//PWM, Phase and Frequency Correct ICR1
	//Bit 1:0 – WGM11:0: Waveform Generation Mode
	TCCR1A &= ~(1<<WGM10);
  44:	8f b5       	in	r24, 0x2f	; 47
  46:	8e 7f       	andi	r24, 0xFE	; 254
  48:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11);
  4a:	8f b5       	in	r24, 0x2f	; 47
  4c:	8d 7f       	andi	r24, 0xFD	; 253
  4e:	8f bd       	out	0x2f, r24	; 47
	//Bit 4:3 – WGM13:2: Waveform Generation Mode
	//See TCCR1A Register description.
	TCCR1B &= ~(1<<WGM12);
  50:	8e b5       	in	r24, 0x2e	; 46
  52:	87 7f       	andi	r24, 0xF7	; 247
  54:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<WGM13);
  56:	8e b5       	in	r24, 0x2e	; 46
  58:	80 61       	ori	r24, 0x10	; 16
  5a:	8e bd       	out	0x2e, r24	; 46
	
	
	//clkI/O/8 (From prescaler)
	//Bit 2:0 – CS12:0: Clock Select
	TCCR1B |= (1<<CS11);
  5c:	8e b5       	in	r24, 0x2e	; 46
  5e:	82 60       	ori	r24, 0x02	; 2
  60:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS10);
  62:	8e b5       	in	r24, 0x2e	; 46
  64:	8e 7f       	andi	r24, 0xFE	; 254
  66:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS12);
  68:	8e b5       	in	r24, 0x2e	; 46
  6a:	8b 7f       	andi	r24, 0xFB	; 251
  6c:	8e bd       	out	0x2e, r24	; 46

	//Output Compare Register 1 A
	OCR1A = 500;
  6e:	84 ef       	ldi	r24, 0xF4	; 244
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	9b bd       	out	0x2b, r25	; 43
  74:	8a bd       	out	0x2a, r24	; 42
	
	//!!!!! Frequency
	ICR1 = 1000;
  76:	88 ee       	ldi	r24, 0xE8	; 232
  78:	93 e0       	ldi	r25, 0x03	; 3
  7a:	97 bd       	out	0x27, r25	; 39
  7c:	86 bd       	out	0x26, r24	; 38
	
	
	DDRB |= (1<<1) | (1<<2);
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	86 60       	ori	r24, 0x06	; 6
  82:	87 bb       	out	0x17, r24	; 23
	
	PORTB &= ~((1<<1) | (1<<2));
  84:	88 b3       	in	r24, 0x18	; 24
  86:	89 7f       	andi	r24, 0xF9	; 249
  88:	88 bb       	out	0x18, r24	; 24
	
	//button
	DDRC = 0b0000000;
  8a:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b0111111;
  8c:	8f e3       	ldi	r24, 0x3F	; 63
  8e:	85 bb       	out	0x15, r24	; 21
	
	while (1)
	{
		if (~PINC & (1<<0)) {
  90:	98 99       	sbic	0x13, 0	; 19
  92:	14 c0       	rjmp	.+40     	; 0xbc <__SREG__+0x7d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e4       	ldi	r24, 0x4F	; 79
  96:	93 ec       	ldi	r25, 0xC3	; 195
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <__SREG__+0x59>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__SREG__+0x5f>
  9e:	00 00       	nop
			_delay_ms(200);
			OCR1A += 10;
  a0:	8a b5       	in	r24, 0x2a	; 42
  a2:	9b b5       	in	r25, 0x2b	; 43
  a4:	0a 96       	adiw	r24, 0x0a	; 10
  a6:	9b bd       	out	0x2b, r25	; 43
  a8:	8a bd       	out	0x2a, r24	; 42
			if (OCR1A >= 1013) {
  aa:	8a b5       	in	r24, 0x2a	; 42
  ac:	9b b5       	in	r25, 0x2b	; 43
  ae:	85 3f       	cpi	r24, 0xF5	; 245
  b0:	93 40       	sbci	r25, 0x03	; 3
  b2:	20 f0       	brcs	.+8      	; 0xbc <__SREG__+0x7d>
				OCR1A = 511;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
			}
		}
		if (~PINC & (1<<1)) {
  bc:	99 99       	sbic	0x13, 1	; 19
  be:	13 c0       	rjmp	.+38     	; 0xe6 <__SREG__+0xa7>
  c0:	8f e4       	ldi	r24, 0x4F	; 79
  c2:	93 ec       	ldi	r25, 0xC3	; 195
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <__SREG__+0x85>
  c8:	00 c0       	rjmp	.+0      	; 0xca <__SREG__+0x8b>
  ca:	00 00       	nop
			_delay_ms(200);
			OCR1A -= 10;
  cc:	8a b5       	in	r24, 0x2a	; 42
  ce:	9b b5       	in	r25, 0x2b	; 43
  d0:	0a 97       	sbiw	r24, 0x0a	; 10
  d2:	9b bd       	out	0x2b, r25	; 43
  d4:	8a bd       	out	0x2a, r24	; 42
			if (OCR1A <= 10) {
  d6:	8a b5       	in	r24, 0x2a	; 42
  d8:	9b b5       	in	r25, 0x2b	; 43
  da:	0b 97       	sbiw	r24, 0x0b	; 11
  dc:	20 f4       	brcc	.+8      	; 0xe6 <__SREG__+0xa7>
				OCR1A = 511;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	9b bd       	out	0x2b, r25	; 43
  e4:	8a bd       	out	0x2a, r24	; 42
			}
		}
		
		if (~PINC & (1<<2)) {
  e6:	9a 99       	sbic	0x13, 2	; 19
  e8:	14 c0       	rjmp	.+40     	; 0x112 <__SREG__+0xd3>
  ea:	8f e4       	ldi	r24, 0x4F	; 79
  ec:	93 ec       	ldi	r25, 0xC3	; 195
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__SREG__+0xaf>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__SREG__+0xb5>
  f4:	00 00       	nop
			_delay_ms(200);
			ICR1 += 10;
  f6:	86 b5       	in	r24, 0x26	; 38
  f8:	97 b5       	in	r25, 0x27	; 39
  fa:	0a 96       	adiw	r24, 0x0a	; 10
  fc:	97 bd       	out	0x27, r25	; 39
  fe:	86 bd       	out	0x26, r24	; 38
			if (ICR1 >= 1500) {
 100:	86 b5       	in	r24, 0x26	; 38
 102:	97 b5       	in	r25, 0x27	; 39
 104:	8c 3d       	cpi	r24, 0xDC	; 220
 106:	95 40       	sbci	r25, 0x05	; 5
 108:	20 f0       	brcs	.+8      	; 0x112 <__SREG__+0xd3>
				ICR1 = 350;
 10a:	8e e5       	ldi	r24, 0x5E	; 94
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	97 bd       	out	0x27, r25	; 39
 110:	86 bd       	out	0x26, r24	; 38
			}
		}
		if (~PINC & (1<<3)) {
 112:	9b 99       	sbic	0x13, 3	; 19
 114:	13 c0       	rjmp	.+38     	; 0x13c <__SREG__+0xfd>
 116:	8f e4       	ldi	r24, 0x4F	; 79
 118:	93 ec       	ldi	r25, 0xC3	; 195
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <__SREG__+0xdb>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__SREG__+0xe1>
 120:	00 00       	nop
			_delay_ms(200);
			ICR1 -= 10;
 122:	86 b5       	in	r24, 0x26	; 38
 124:	97 b5       	in	r25, 0x27	; 39
 126:	0a 97       	sbiw	r24, 0x0a	; 10
 128:	97 bd       	out	0x27, r25	; 39
 12a:	86 bd       	out	0x26, r24	; 38
			if (ICR1 <= 10) {
 12c:	86 b5       	in	r24, 0x26	; 38
 12e:	97 b5       	in	r25, 0x27	; 39
 130:	0b 97       	sbiw	r24, 0x0b	; 11
 132:	20 f4       	brcc	.+8      	; 0x13c <__SREG__+0xfd>
				ICR1 = 350;
 134:	8e e5       	ldi	r24, 0x5E	; 94
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	97 bd       	out	0x27, r25	; 39
 13a:	86 bd       	out	0x26, r24	; 38
			}
		}
		
		if (~PINC & (1<<4)) {
 13c:	9c 99       	sbic	0x13, 4	; 19
 13e:	19 c0       	rjmp	.+50     	; 0x172 <__SREG__+0x133>
 140:	8f e4       	ldi	r24, 0x4F	; 79
 142:	93 ec       	ldi	r25, 0xC3	; 195
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <__SREG__+0x105>
 148:	00 c0       	rjmp	.+0      	; 0x14a <__SREG__+0x10b>
 14a:	00 00       	nop
			_delay_ms(200);
			ICR1 += 10;
 14c:	86 b5       	in	r24, 0x26	; 38
 14e:	97 b5       	in	r25, 0x27	; 39
 150:	0a 96       	adiw	r24, 0x0a	; 10
 152:	97 bd       	out	0x27, r25	; 39
 154:	86 bd       	out	0x26, r24	; 38
			OCR1A += 20;
 156:	8a b5       	in	r24, 0x2a	; 42
 158:	9b b5       	in	r25, 0x2b	; 43
 15a:	44 96       	adiw	r24, 0x14	; 20
 15c:	9b bd       	out	0x2b, r25	; 43
 15e:	8a bd       	out	0x2a, r24	; 42
			if (ICR1 >= 1500) {
 160:	86 b5       	in	r24, 0x26	; 38
 162:	97 b5       	in	r25, 0x27	; 39
 164:	8c 3d       	cpi	r24, 0xDC	; 220
 166:	95 40       	sbci	r25, 0x05	; 5
 168:	20 f0       	brcs	.+8      	; 0x172 <__SREG__+0x133>
				ICR1 = 350;
 16a:	8e e5       	ldi	r24, 0x5E	; 94
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	97 bd       	out	0x27, r25	; 39
 170:	86 bd       	out	0x26, r24	; 38
			}
		}
		if (~PINC & (1<<5)) {
 172:	9d 99       	sbic	0x13, 5	; 19
 174:	8d cf       	rjmp	.-230    	; 0x90 <__SREG__+0x51>
 176:	8f e4       	ldi	r24, 0x4F	; 79
 178:	93 ec       	ldi	r25, 0xC3	; 195
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <__SREG__+0x13b>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <__SREG__+0x141>
 180:	00 00       	nop
			_delay_ms(200);
			ICR1 -= 10;
 182:	86 b5       	in	r24, 0x26	; 38
 184:	97 b5       	in	r25, 0x27	; 39
 186:	0a 97       	sbiw	r24, 0x0a	; 10
 188:	97 bd       	out	0x27, r25	; 39
 18a:	86 bd       	out	0x26, r24	; 38
			OCR1A -= 20;
 18c:	8a b5       	in	r24, 0x2a	; 42
 18e:	9b b5       	in	r25, 0x2b	; 43
 190:	44 97       	sbiw	r24, 0x14	; 20
 192:	9b bd       	out	0x2b, r25	; 43
 194:	8a bd       	out	0x2a, r24	; 42
			if (ICR1 <= 10) {
 196:	86 b5       	in	r24, 0x26	; 38
 198:	97 b5       	in	r25, 0x27	; 39
 19a:	0b 97       	sbiw	r24, 0x0b	; 11
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <__SREG__+0x161>
 19e:	78 cf       	rjmp	.-272    	; 0x90 <__SREG__+0x51>
				ICR1 = 350;
 1a0:	8e e5       	ldi	r24, 0x5E	; 94
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	97 bd       	out	0x27, r25	; 39
 1a6:	86 bd       	out	0x26, r24	; 38
 1a8:	73 cf       	rjmp	.-282    	; 0x90 <__SREG__+0x51>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
