
6_Logic_operations.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000597  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000513  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000115d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	18 c0       	rjmp	.+48     	; 0x66 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:



int main(void)
{
	DDRD = 0b11111111;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000000;
  3c:	17 ba       	out	0x17, r1	; 23
	
	PORTD = 0b00000001;
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	82 bb       	out	0x12, r24	; 18
	//PORTB = 0b00000011; 
	PORTB = 0b00000010; // резистор к нулевому порту прит€нут отдельно на схеме 10кќм
  42:	82 e0       	ldi	r24, 0x02	; 2
  44:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	2f e9       	ldi	r18, 0x9F	; 159
  48:	86 e8       	ldi	r24, 0x86	; 134
  4a:	91 e0       	ldi	r25, 0x01	; 1
  4c:	21 50       	subi	r18, 0x01	; 1
  4e:	80 40       	sbci	r24, 0x00	; 0
  50:	90 40       	sbci	r25, 0x00	; 0
  52:	e1 f7       	brne	.-8      	; 0x4c <__SREG__+0xd>
  54:	00 c0       	rjmp	.+0      	; 0x56 <__SREG__+0x17>
  56:	00 00       	nop
  58:	02 c0       	rjmp	.+4      	; 0x5e <__SREG__+0x1f>
		//(PINB & (1<<0)) == 1
		//(~PINB & (1<<0)) == 0
		//(!(PINB & (1<<0))) == 0
		while (~PINB & (1<<0))
		{
			PORTD = 0b11111111;
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	82 bb       	out	0x12, r24	; 18
		
		//while
		//(PINB & (1<<0)) == 1
		//(~PINB & (1<<0)) == 0
		//(!(PINB & (1<<0))) == 0
		while (~PINB & (1<<0))
  5e:	b0 9b       	sbis	0x16, 0	; 22
  60:	fc cf       	rjmp	.-8      	; 0x5a <__SREG__+0x1b>
		{
			PORTD = 0b11111111;
		}
		PORTD = 0b00000000;
  62:	12 ba       	out	0x12, r1	; 18
		//_delay_ms(DELAY);
	}
  64:	f0 cf       	rjmp	.-32     	; 0x46 <__SREG__+0x7>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
